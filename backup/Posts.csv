post post_id,blog_id,user_id,cat_id,post_dt,post_tz,post_creadt,post_upddt,post_password,post_type,post_format,post_url,post_lang,post_title,post_excerpt,post_excerpt_xhtml,post_content,post_content_xhtml,post_notes,post_words,post_meta,post_status,post_selected,post_open_comment,post_open_tb,nb_comment,nb_trackback,post_position
"300677","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","33883","2008-11-19 22:20:00","Europe/Paris","2008-11-19 21:20:22","2012-12-23 23:59:54","","post","xhtml","2008/11/19/Back-in-the-blogosphere","en","Back in the blogosphere  !","","","<p>I've been away from blogging for quite a long time, but here we go again !</p>\r\n<p>You can find preceding posts on <a href=\"http://www.pixvillage.com/blogs/devblog\" target=\"_blank\">my previous coding blog</a>. I will probably republish the most useful ones here.</p>","<p>I've been away from blogging for quite a long time, but here we go again\n!</p>\n<p>You can find preceding posts on <a href=\"http://www.pixvillage.com/blogs/devblog\" target=\"_blank\">my previous coding\nblog</a>. I will probably republish the most useful ones here.</p>","","back the blogosphere been away from blogging for quite long time but here again you can find preceding posts previous coding blog will probably republish the most useful ones here","","1","0","1","1","0","0","0"
"300709","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-11-20 00:00:00","Europe/Paris","2008-11-19 23:00:38","2012-12-23 23:59:34","","post","xhtml","2008/11/20/Save-is-not-a-feature-anymore","en","'Save' is not a feature anymore","","","<p>Pete Brown noted in <a href=\"http://community.irritatedvowel.com/blogs/pete_browns_blog/archive/2008/11/18/When-Will-the-Floppy-Disk-Die-as-a-Save-Icon_3F00_.aspx\" target=\"_blank\">this post</a> that the save icon is still represented by a 3 1/2\" floppy by most of the application.<img width=\"89\" height=\"62\" align=\"right\" alt=\"Floppy-Word\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Saveisnotafeatureanymore_14464_Floppy-Word_3.jpg\" border=\"0\" /></p>\r\n<p>But what does the <strong>Save</strong> button really mean ?</p>\r\n<p>Back in the floppy days, there was no fast persistent storage. To work at acceptable speed, you had to manage everything in memory, the take a few seconds to save at some point. At that time, most of the storage mediums were removable.</p>\r\n<p>Today, things are different. You can't find a computer without a hard disk or solid state drive.</p>\r\n<p>When an application proposes a save action you should understand :</p>\r\n<ul>\r\n<li>My application stores my data in memory </li>\r\n<li><em>If I forget to save it, my data will be lost !</em> </li>\r\n</ul>\r\n<p>As Chase Saunders states&nbsp; in <a href=\"http://community.irritatedvowel.com/blogs/pete_browns_blog/archive/2008/11/18/When-Will-the-Floppy-Disk-Die-as-a-Save-Icon_3F00_.aspx#3053\" target=\"_blank\">his comment</a> this is what he calls a 'Make It Work' button !</p>\r\n<p>Is this a feature ? It's a curse !</p>\r\n<p>How would work a program without <strong>Save</strong> button ?</p>\r\n<ul>\r\n<li>The document would be persisted continuously on disk. </li>\r\n<li>It would have a default name (the first sentence ?) in a default location. </li>\r\n<li>The program would display a list of available documents. </li>\r\n<li>You should be able to <strong>Copy</strong> (instead of Save As) your document to another place. </li>\r\n<li>You should be able to <strong>Delete</strong> it from its location. </li>\r\n<li>For complex documents the program would propose versioning or labeling to mark important documents steps. </li>\r\n</ul>\r\n<p>The world would then be a better place !</p>","<p>Pete Brown noted in <a href=\"http://community.irritatedvowel.com/blogs/pete_browns_blog/archive/2008/11/18/When-Will-the-Floppy-Disk-Die-as-a-Save-Icon_3F00_.aspx\" target=\"_blank\">this post</a> that the save icon is still represented by a 3\n1/2&quot; floppy by most of the application.<img width=\"89\" height=\"62\" align=\"right\" alt=\"Floppy-Word\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Saveisnotafeatureanymore_14464_Floppy-Word_3.jpg\" border=\"0\" /></p>\n<p>But what does the <strong>Save</strong> button really mean ?</p>\n<p>Back in the floppy days, there was no fast persistent storage. To work at\nacceptable speed, you had to manage everything in memory, the take a few\nseconds to save at some point. At that time, most of the storage mediums were\nremovable.</p>\n<p>Today, things are different. You can't find a computer without a hard disk\nor solid state drive.</p>\n<p>When an application proposes a save action you should understand :</p>\n<ul>\n<li>My application stores my data in memory</li>\n<li><em>If I forget to save it, my data will be lost !</em></li>\n</ul>\n<p>As Chase Saunders statesÂ  in <a href=\"http://community.irritatedvowel.com/blogs/pete_browns_blog/archive/2008/11/18/When-Will-the-Floppy-Disk-Die-as-a-Save-Icon_3F00_.aspx#3053\" target=\"_blank\">his comment</a> this is what he calls a 'Make It Work' button\n!</p>\n<p>Is this a feature ? It's a curse !</p>\n<p>How would work a program without <strong>Save</strong> button ?</p>\n<ul>\n<li>The document would be persisted continuously on disk.</li>\n<li>It would have a default name (the first sentence ?) in a default\nlocation.</li>\n<li>The program would display a list of available documents.</li>\n<li>You should be able to <strong>Copy</strong> (instead of Save As) your\ndocument to another place.</li>\n<li>You should be able to <strong>Delete</strong> it from its location.</li>\n<li>For complex documents the program would propose versioning or labeling to\nmark important documents steps.</li>\n</ul>\n<p>The world would then be a better place !</p>","","save not feature anymore pete brown noted this post that the save icon still represented quot floppy most the application but what does the save button really mean back the floppy days there was fast persistent storage work acceptable speed you had manage everything memory the take few seconds save some point that time most the storage mediums were removable today things are different you can find computer without hard disk solid state drive when application proposes save action you should understand application stores data memory forget save data will lost chase saunders states his comment this what calls make work button this feature curse how would work program without save button the document would persisted continuously disk would have default name the first sentence default location the program would display list available documents you should able copy instead save your document another place you should able delete from its location for complex documents the program would propose versioning labeling mark important documents steps the world would then better place","a:1:{s:3:\"tag\";a:1:{i:0;s:2:\"UX\";}}","1","0","1","1","2","0","0"
"301164","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","33883","2008-11-21 14:55:00","Europe/Paris","2008-11-21 13:55:36","2012-12-23 23:59:15","","post","xhtml","2008/11/21/Must-know-English-to-be-a-programmer","en","Must know English to be a programmer ?","","","<p>I found through <a href=\"http://www.hanselman.com/blog/DoYouHaveToKnowEnglishToBeAProgrammer.aspx\">Scott Hanselman</a>'s blog a conversation starting from</p>\r\n<blockquote>\r\n<p><a href=\"http://hype-free.blogspot.com/2008/10/should-we-use-english.html\"><em>\"If you don't know English, you're not a programmer.\"</em></a></p>\r\n</blockquote>  <p>I was 8 when I started playing with BASIC on the <a href=\"http://en.wikipedia.org/wiki/TI-99/4A\">TI-99/4A</a> my father bought in the early 80's, and at that time I had never learnt an English word... But that was not a problem as long as the documentation was in my native language.</p>\r\n<p>I had no need to know English since I knew what For, Load, Run, Save did. Ok my pronunciation was a bit sloppy (Load was Lo - a - d, with a big french <em>a</em>) but I knew what the computer would do when I used those commands.</p>\r\n<p>Of course you can achieve a better style and discover libraries ways faster when knowing English, but I don't think it's a requirement. It's better though to use a widely spread language when you want to share your code. I've had already hard time reading Italian code, but this is more a problem about languages in general than a problem about programming.</p>\r\n<p>Don't be stopped by your native language, programming languages are languages per&nbsp; se, and you should <strong>learn a new [programming] language every year</strong>. Why not English ?</p>","<p>I found through <a href=\"http://www.hanselman.com/blog/DoYouHaveToKnowEnglishToBeAProgrammer.aspx\">Scott\nHanselman</a>'s blog a conversation starting from</p>\n<blockquote>\n<p><a href=\"http://hype-free.blogspot.com/2008/10/should-we-use-english.html\"><em>&quot;If you\ndon't know English, you're not a programmer.&quot;</em></a></p>\n</blockquote>\n<p>I was 8 when I started playing with BASIC on the <a href=\"http://en.wikipedia.org/wiki/TI-99/4A\">TI-99/4A</a> my father bought in the\nearly 80's, and at that time I had never learnt an English word... But that was\nnot a problem as long as the documentation was in my native language.</p>\n<p>I had no need to know English since I knew what For, Load, Run, Save did. Ok\nmy pronunciation was a bit sloppy (Load was Lo - a - d, with a big french\n<em>a</em>) but I knew what the computer would do when I used those\ncommands.</p>\n<p>Of course you can achieve a better style and discover libraries ways faster\nwhen knowing English, but I don't think it's a requirement. It's better though\nto use a widely spread language when you want to share your code. I've had\nalready hard time reading Italian code, but this is more a problem about\nlanguages in general than a problem about programming.</p>\n<p>Don't be stopped by your native language, programming languages are\nlanguages perÂ  se, and you should <strong>learn a new [programming]\nlanguage every year</strong>. Why not English ?</p>","","must know english programmer found through scott hanselman blog conversation starting from quot you don know english you not programmer quot was when started playing with basic the father bought the early and that time had never learnt english word but that was not problem long the documentation was native language had need know english since knew what for load run save did pronunciation was bit sloppy load was with big french but knew what the computer would when used those commands course you can achieve better style and discover libraries ways faster when knowing english but don think requirement better though use widely spread language when you want share your code had already hard time reading italian code but this more problem about languages general than problem about programming don stopped your native language programming languages are languages per and you should learn new programming language every year why not english","","1","0","1","1","0","0","0"
"302178","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-11-24 15:37:00","Europe/Paris","2008-11-24 14:37:26","2012-12-23 23:58:41","","post","xhtml","2008/11/24/Do-you-understand-what-it-is-all-about","en","Do you understand what it is all about ?","","","<p>I want to be sure the title of the blog will not be misunderstood: when I say \"Think before coding\", I don't mean you should prepare everything before and the start coding like a robot. This is what is called <a href=\"http://en.wikipedia.org/wiki/Waterfall_model\">waterfall model</a>, and&nbsp; and it has always been considered as as non-working model, even by its author. <a href=\"http://blogs.sun.com/DaveEdstrom/entry/you_are_not_expected_to\"><img width=\"242\" height=\"222\" align=\"right\" style=\"border: 0 currentColor;\" alt=\"NotUnderstand\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Whatisitallabout_D0A7_NotUnderstand_3.jpg\" border=\"0\" /></a></p>\r\n<p>Programming is not applying a technique. When confronted twice to a problem, the programmer should not use the same solution, but understand what make both problems so close and build something that solve this class of problems. It can be a simple helper function, a small library or a big framework. This is the <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY (Don't Repeat Yourself) principle</a>.</p>\r\n<p>We all learnt how to implement a Quicksort algorithm at school. When was the last time you had to implement it? Personally I use the Linq Sort() extension method and it does the trick for me.</p>\r\n<p>If you have to implement it for a specific reason, it should be because you understood that your problem was not exactly the same as the one handled by existing implementations.</p>\r\n<p>This is why programming is not about technique or algorithm, if you're smart enough, you can adapt almost anything to any language or technology.</p>\r\n<p><em>There is still one thing that tools and technology can't do for you :&nbsp; understanding.</em></p>\r\n<p><em><strong>Programming IS about understanding</strong></em></p>\r\n<ul>   <li>Understand the problems </li>\r\n<li>Understand the processes, </li>\r\n<li>Understand the people, </li>\r\n<li>Understand the other programmers, </li>\r\n<li>Understand yourself! </li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<h4>You should have a deep understanding of the problems and processes.</h4>\r\n<p>This is the base of modeling, wether it is domain models as in <a href=\"http://www.domaindrivendesign.org/\">Domain Driven Design</a> or infrastructure framework creation, through <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a>.</p>\r\n<h4>You should understand people.</h4>\r\n<p>Because they are the one that ultimately will use what you're building. People are usually hard to understand. This is all the matter about User Experience (UX), but even when programming a framework, you should understand how other programmer will use it and understand it, and how they'll build on it software for other people with their one expectations.</p>\r\n<h4>You should understand programmers.</h4>\r\n<p>You rarely write your code only for you, and you should write your code so that other programmer have the better understanding of what you intended to do, and what you understood about the problem you're solving by writing this code.</p>\r\n<h4>You should understand yourself.</h4>\r\n<p>Even when you write code only for yourself, you should understand what you wrote in the first place, as <a href=\"http://www.artima.com/intv/dry.html\">Andy Hunt and Dave Thomas</a> say :</p>\r\n<blockquote>\r\n<h5>All Programming is Maintenance Programming</h5>\r\n<p>   <strong>Bill Venners</strong>: You say in your book, <em>The Pragmatic Programmer</em> (Addison-Wesley, 1999), that \"programmers are constantly in maintenance mode.\" Why?     </p>\r\n<p><strong>Dave Thomas</strong>: All programming is maintenance programming, because you are rarely writing original code. If you look at the actual time you spend programming, you write a bit here and then you go back and make a change. Or you go back and fix a bug. Or you rip it out altogether and replace it with something else. But you are very quickly maintaining code even if it's a brand new project with a fresh source file. You spend most of your time in maintenance mode. So you may as well just bite the bullet and say, \"I'm maintaining from day one.\" The disciplines that apply to maintenance should apply globally. </p>\r\n<p><strong>Andy Hunt</strong>: It's only the first 10 minutes that the code's original, when you type it in the first time. That's it. </p>\r\n</blockquote>  <p>But you should also understand how you do things, how you did things, how you changed, and how you will change in the future.&nbsp; Things are moving so fast that you can not simply stay with your current knowledge and expect it to be sufficient in two years.</p>","<p>I want to be sure the title of the blog will not be misunderstood: when I\nsay &quot;Think before coding&quot;, I don't mean you should prepare everything before\nand the start coding like a robot. This is what is called <a href=\"http://en.wikipedia.org/wiki/Waterfall_model\">waterfall model</a>, andÂ \nand it has always been considered as as non-working model, even by its author.\n<a href=\"http://blogs.sun.com/DaveEdstrom/entry/you_are_not_expected_to\"><img width=\"242\" height=\"222\" align=\"right\" style=\"border: 0 currentColor;\" alt=\"NotUnderstand\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Whatisitallabout_D0A7_NotUnderstand_3.jpg\" border=\"0\" /></a></p>\n<p>Programming is not applying a technique. When confronted twice to a problem,\nthe programmer should not use the same solution, but understand what make both\nproblems so close and build something that solve this class of problems. It can\nbe a simple helper function, a small library or a big framework. This is the\n<a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY (Don't Repeat\nYourself) principle</a>.</p>\n<p>We all learnt how to implement a Quicksort algorithm at school. When was the\nlast time you had to implement it? Personally I use the Linq Sort() extension\nmethod and it does the trick for me.</p>\n<p>If you have to implement it for a specific reason, it should be because you\nunderstood that your problem was not exactly the same as the one handled by\nexisting implementations.</p>\n<p>This is why programming is not about technique or algorithm, if you're smart\nenough, you can adapt almost anything to any language or technology.</p>\n<p><em>There is still one thing that tools and technology can't do for you\n:Â  understanding.</em></p>\n<p><em><strong>Programming IS about understanding</strong></em></p>\n<ul>\n<li>Understand the problems</li>\n<li>Understand the processes,</li>\n<li>Understand the people,</li>\n<li>Understand the other programmers,</li>\n<li>Understand yourself!</li>\n</ul>\n<p>Â </p>\n<h4>You should have a deep understanding of the problems and processes.</h4>\n<p>This is the base of modeling, wether it is domain models as in <a href=\"http://www.domaindrivendesign.org/\">Domain Driven Design</a> or infrastructure\nframework creation, through <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of\nConcerns</a>.</p>\n<h4>You should understand people.</h4>\n<p>Because they are the one that ultimately will use what you're building.\nPeople are usually hard to understand. This is all the matter about User\nExperience (UX), but even when programming a framework, you should understand\nhow other programmer will use it and understand it, and how they'll build on it\nsoftware for other people with their one expectations.</p>\n<h4>You should understand programmers.</h4>\n<p>You rarely write your code only for you, and you should write your code so\nthat other programmer have the better understanding of what you intended to do,\nand what you understood about the problem you're solving by writing this\ncode.</p>\n<h4>You should understand yourself.</h4>\n<p>Even when you write code only for yourself, you should understand what you\nwrote in the first place, as <a href=\"http://www.artima.com/intv/dry.html\">Andy\nHunt and Dave Thomas</a> say :</p>\n<blockquote>\n<h5>All Programming is Maintenance Programming</h5>\n<p><strong>Bill Venners</strong>: You say in your book, <em>The Pragmatic\nProgrammer</em> (Addison-Wesley, 1999), that &quot;programmers are constantly in\nmaintenance mode.&quot; Why?</p>\n<p><strong>Dave Thomas</strong>: All programming is maintenance programming,\nbecause you are rarely writing original code. If you look at the actual time\nyou spend programming, you write a bit here and then you go back and make a\nchange. Or you go back and fix a bug. Or you rip it out altogether and replace\nit with something else. But you are very quickly maintaining code even if it's\na brand new project with a fresh source file. You spend most of your time in\nmaintenance mode. So you may as well just bite the bullet and say, &quot;I'm\nmaintaining from day one.&quot; The disciplines that apply to maintenance should\napply globally.</p>\n<p><strong>Andy Hunt</strong>: It's only the first 10 minutes that the code's\noriginal, when you type it in the first time. That's it.</p>\n</blockquote>\n<p>But you should also understand how you do things, how you did things, how\nyou changed, and how you will change in the future.Â  Things are moving so\nfast that you can not simply stay with your current knowledge and expect it to\nbe sufficient in two years.</p>","","you understand what all about want sure the title the blog will not misunderstood when say quot think before coding quot don mean you should prepare everything before and the start coding like robot this what called waterfall model and and has always been considered non working model even its author programming not applying technique when confronted twice problem the programmer should not use the same solution but understand what make both problems close and build something that solve this class problems can simple helper function small library big framework this the dry don repeat yourself principle all learnt how implement quicksort algorithm school when was the last time you had implement personally use the linq sort extension method and does the trick for you have implement for specific reason should because you understood that your problem was not exactly the same the one handled existing implementations this why programming not about technique algorithm you smart enough you can adapt almost anything any language technology there still one thing that tools and technology can for you understanding programming about understanding understand the problems understand the processes understand the people understand the other programmers understand yourself you should have deep understanding the problems and processes this the base modeling wether domain models domain driven design infrastructure framework creation through separation concerns you should understand people because they are the one that ultimately will use what you building people are usually hard understand this all the matter about user experience but even when programming framework you should understand how other programmer will use and understand and how they build software for other people with their one expectations you should understand programmers you rarely write your code only for you and you should write your code that other programmer have the better understanding what you intended and what you understood about the problem you solving writing this code you should understand yourself even when you write code only for yourself you should understand what you wrote the first place andy hunt and dave thomas say all programming maintenance programming bill venners you say your book the pragmatic programmer addison wesley 1999 that quot programmers are constantly maintenance mode quot why dave thomas all programming maintenance programming because you are rarely writing original code you look the actual time you spend programming you write bit here and then you back and make change you back and fix bug you rip out altogether and replace with something else but you are very quickly maintaining code even brand new project with fresh source file you spend most your time maintenance mode you may well just bite the bullet and say quot maintaining from day one quot the disciplines that apply maintenance should apply globally andy hunt only the first minutes that the code original when you type the first time that but you should also understand how you things how you did things how you changed and how you will change the future things are moving fast that you can not simply stay with your current knowledge and expect sufficient two years","","1","0","1","1","0","0","0"
"302189","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-11-24 15:51:00","Europe/Paris","2008-11-24 14:51:47","2012-12-23 23:58:10","","post","xhtml","2008/11/24/Coincidences-just-happen","en","Coincidences just happen...","","","<p>It's quite strange how ideas can appear at the same time in different places. This morning while take a shower I was thinking about a future post series about programming and building architecture and how things had changed in the last few years. Only 1h later I was reading <a href=\"http://www.codethinked.com/post/2008/11/23/Dont-Be-Afraid-of-Easy.aspx\">this post</a> by <a href=\"http://www.codethinked.com/\">Justin Etheredge</a>, that matches exactly this subject.</p>\r\n<p>I'm still preparing the posts however.</p>","<p>It's quite strange how ideas can appear at the same time in different\nplaces. This morning while take a shower I was thinking about a future post\nseries about programming and building architecture and how things had changed\nin the last few years. Only 1h later I was reading <a href=\"http://www.codethinked.com/post/2008/11/23/Dont-Be-Afraid-of-Easy.aspx\">this\npost</a> by <a href=\"http://www.codethinked.com/\">Justin Etheredge</a>, that\nmatches exactly this subject.</p>\n<p>I'm still preparing the posts however.</p>","","coincidences just happen quite strange how ideas can appear the same time different places this morning while take shower was thinking about future post series about programming and building architecture and how things had changed the last few years only later was reading this post justin etheredge that matches exactly this subject still preparing the posts however","","1","0","1","1","0","0","0"
"302518","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-11-25 16:47:00","Europe/Paris","2008-11-25 15:47:49","2012-12-23 23:57:51","","post","xhtml","2008/11/25/CSS-is-too-Tricky","en","CSS is too Tricky","","","<p>I found through <a href=\"http://www.alvinashcraft.com/2008/11/24/dew-drop-november-24-2008/\">Alvin Ashcraft's Morning Dew</a> a post about CSS tricks <a href=\"http://blog.reindel.com/2008/11/23/six-indispensable-css-tips-and-tricks-i-use-on-every-project/\">Six indispensable CSS tips and tricks I use on every project</a>. Very interesting since it gives some ways to make cleaner CSS integration (I really like the Overclear one, don't need the clear both anymore !!).</p>\r\n<p>But while reading this question came to my mind:</p>\r\n<p><em>Why do we need to find crazy tricks like this for any single thing we want to do with HTML + CSS ?</em></p>\r\n<p>This is the sign that <strong>HTML + CSS is a complete design failure</strong> !</p>\r\n<p>When you want to make something as simple as putting several blocks on the same line... you must use float left, but it does not behave exactly has you expect it to do... When using Silvelight and WPF I had none of these problems. There are surely other problems with theses technologies but I have found an important difference :</p>\r\n<ul>\r\n<li>In CSS, the elements decide how the fit in their parent</li>\r\n<li>In Silverlight, parents decide the layout of their children</li>\r\n</ul>\r\n<p>And it makes a huge difference. Because in CSS, the interactions between sibling children using very different placement models make it <strong>a n*n combination problem</strong>. For sure it's not manageable and no browser can handle every case gracefully.</p>\r\n<p>In Silverlight, you obtain the layout you want by composition, and each rule remains simple. No need to use Jedi tricks to obtain what you want.</p>","<p>I found through <a href=\"http://www.alvinashcraft.com/2008/11/24/dew-drop-november-24-2008/\">Alvin\nAshcraft's Morning Dew</a> a post about CSS tricks <a href=\"http://blog.reindel.com/2008/11/23/six-indispensable-css-tips-and-tricks-i-use-on-every-project/\">\nSix indispensable CSS tips and tricks I use on every project</a>. Very\ninteresting since it gives some ways to make cleaner CSS integration (I really\nlike the Overclear one, don't need the clear both anymore !!).</p>\n<p>But while reading this question came to my mind:</p>\n<p><em>Why do we need to find crazy tricks like this for any single thing we\nwant to do with HTML + CSS ?</em></p>\n<p>This is the sign that <strong>HTML + CSS is a complete design\nfailure</strong> !</p>\n<p>When you want to make something as simple as putting several blocks on the\nsame line... you must use float left, but it does not behave exactly has you\nexpect it to do... When using Silvelight and WPF I had none of these problems.\nThere are surely other problems with theses technologies but I have found an\nimportant difference :</p>\n<ul>\n<li>In CSS, the elements decide how the fit in their parent</li>\n<li>In Silverlight, parents decide the layout of their children</li>\n</ul>\n<p>And it makes a huge difference. Because in CSS, the interactions between\nsibling children using very different placement models make it <strong>a n*n\ncombination problem</strong>. For sure it's not manageable and no browser can\nhandle every case gracefully.</p>\n<p>In Silverlight, you obtain the layout you want by composition, and each rule\nremains simple. No need to use Jedi tricks to obtain what you want.</p>","","css too tricky found through alvin ashcraft morning dew post about css tricks six indispensable css tips and tricks use every project very interesting since gives some ways make cleaner css integration really like the overclear one don need the clear both anymore but while reading this question came mind why need find crazy tricks like this for any single thing want with html css this the sign that html css complete design failure when you want make something simple putting several blocks the same line you must use float left but does not behave exactly has you expect when using silvelight and wpf had none these problems there are surely other problems with theses technologies but have found important difference css the elements decide how the fit their parent silverlight parents decide the layout their children and makes huge difference because css the interactions between sibling children using very different placement models make combination problem for sure not manageable and browser can handle every case gracefully silverlight you obtain the layout you want composition and each rule remains simple need use jedi tricks obtain what you want","a:1:{s:3:\"tag\";a:2:{i:0;s:3:\"Css\";i:1;s:3:\"Web\";}}","1","0","1","1","2","0","0"
"304478","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2008-12-01 10:49:00","Europe/Paris","2008-12-01 09:49:41","2012-12-23 23:57:31","","post","xhtml","2008/12/01/Ubiquity-of-language-lost-in-translation","en","Ubiquity of language... lost in translation ?","","","<p>I found two collapsing problems :</p>\r\n<ul>\r\n<li>You should use the same language between domain experts and development teams (<a href=\"http://domaindrivendesign.org/discussion/messageboardarchive/UbiquitousLanguage.html\">DDD</a>)</li>\r\n<li>You should use English for naming in your code (<a href=\"http://msdn.microsoft.com/en-us/library/ms229045.aspx\">Design guidelines</a>)</li>\r\n</ul>\r\n<p><em>What if my domain experts don't speak English ?</em></p>","<p>I found two collapsing problems :</p>\n<ul>\n<li>You should use the same language between domain experts and development\nteams (<a href=\"http://domaindrivendesign.org/discussion/messageboardarchive/UbiquitousLanguage.html\">DDD</a>)</li>\n<li>You should use English for naming in your code (<a href=\"http://msdn.microsoft.com/en-us/library/ms229045.aspx\">Design\nguidelines</a>)</li>\n</ul>\n<p><em>What if my domain experts don't speak English ?</em></p>","","ubiquity language lost translation found two collapsing problems you should use the same language between domain experts and development teams ddd you should use english for naming your code design guidelines what domain experts don speak english","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"Domain Driven Design\";}}","1","0","1","1","3","0","0"
"304576","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-12-01 16:17:00","Europe/Paris","2008-12-01 15:17:04","2012-12-23 23:57:05","","post","xhtml","2008/12/01/Problem-with-the-Select-N1-problem","en","Problem with the Select N+1 problem","","","<p>Ayende <a href=\"http://ayende.com/Blog/archive/2008/12/01/solving-the-select-n1-problem.aspx\">proposes solutions</a> for the Select N+1 problem in NHibernate.</p>\r\n<p>Some will say it is a sign that lazy load is <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/message/7918\">the work of the devil</a>. But I can remember the time when people were saying that garbage collectors are evil.</p>\r\n<p>We all would like to have non intrusive data fetching strategy that work 99% of the time !</p>\r\n<p>The problem is not about lazy load or not. It is that you must take care about your data fetching strategy whenever you make a data access. </p>\r\n<p><em>There is currently no technology smart enough to infer the right fetching strategy.</em></p>\r\n<p>If someone builds it, this won't be a problem anymore.</p>\r\n<p>If you know about it, please tell the world !</p>","<p>Ayende <a href=\"http://ayende.com/Blog/archive/2008/12/01/solving-the-select-n1-problem.aspx\">proposes\nsolutions</a> for the Select N+1 problem in NHibernate.</p>\n<p>Some will say it is a sign that lazy load is <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/message/7918\">the work\nof the devil</a>. But I can remember the time when people were saying that\ngarbage collectors are evil.</p>\n<p>We all would like to have non intrusive data fetching strategy that work 99%\nof the time !</p>\n<p>The problem is not about lazy load or not. It is that you must take care\nabout your data fetching strategy whenever you make a data access.</p>\n<p><em>There is currently no technology smart enough to infer the right\nfetching strategy.</em></p>\n<p>If someone builds it, this won't be a problem anymore.</p>\n<p>If you know about it, please tell the world !</p>","","problem with the select problem ayende proposes solutions for the select problem nhibernate some will say sign that lazy load the work the devil but can remember the time when people were saying that garbage collectors are evil all would like have non intrusive data fetching strategy that work the time the problem not about lazy load not that you must take care about your data fetching strategy whenever you make data access there currently technology smart enough infer the right fetching strategy someone builds this won problem anymore you know about please tell the world","","1","0","1","1","0","0","0"
"304857","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2008-12-02 14:41:00","Europe/Paris","2008-12-02 13:41:52","2008-12-30 17:11:32","","post","xhtml","2008/12/02/Domain-Driven-Design","en","Domain Driven Design","","","<p>I had read a lot of stuff about it these last months, and I think I got the essence and the principles.</p>\r\n<p>I've received <a href=\"http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1228225106&amp;sr=8-1\">the blue book</a> today.</p>\r\n<p>I'm sure I'll have matter for blogging these days...</p>","<p>I had read a lot of stuff about it these last months, and I think I got the\nessence and the principles.</p>\n<p>I've received <a href=\"http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1228225106&amp;sr=8-1\">\nthe blue book</a> today.</p>\n<p>I'm sure I'll have matter for blogging these days...</p>","","domain driven design had read lot stuff about these last months and think got the essence and the principles received the blue book today sure have matter for blogging these days","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","0","0"
"307211","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2008-12-10 12:46:00","Europe/Paris","2008-12-10 11:46:02","2008-12-30 17:12:05","","post","xhtml","2008/12/10/Wow-Book-review-Domain-Driven-Design","en","Wow - Book review - Domain Driven Design!","","","<p>Ok, I finished Domain Driven Design yesterday. I think I had no such <em>Aha moment</em> since I read Design Patterns eleven years ago...</p>\r\n<p>I thought I was prepared for it, I had read many things to get maximum info...</p>\r\n<p>I had :</p>\r\n<ul>\r\n<li>Read <a href=\"http://www.infoq.com/minibooks/domain-driven-design-quickly\">Domain Driven Design Quickly</a> (you can download it)</li>\r\n<li>Followed threads on the <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/\">DDD yahoo group</a></li>\r\n<li>Peeked at samples on <a href=\"http://domaindrivendesign.org/\">domaindrivendesign.org</a></li>\r\n<li>Start to try on my own projects</li>\r\n</ul>\r\n<p>I had practiced knowledge crunching on my own for long.</p>\r\n<p>But the book go far beyond all that. It has a deep vision of programming on large scale projects, and give really good insight on difficulties that arise when working on complex systems with several teams. These are really precious pieces of advice.</p>\r\n<p>The pattern presentation of the different chapters, even when those patterns are not implementation patterns but team organization patterns is really helpful and clear.</p>\r\n<p>There is not much about implementation details, but it is not a problem. The principles are not tied to a specific technology or framework. Actually this is even a good point, it leaves the book clean from a specific implementation. Implementation books are aging faster. </p>\r\n<p>You definitely should have this book on your shelf. </p>","<p>Ok, I finished Domain Driven Design yesterday. I think I had no such <em>Aha\nmoment</em> since I read Design Patterns eleven years ago...</p>\n<p>I thought I was prepared for it, I had read many things to get maximum\ninfo...</p>\n<p>I had :</p>\n<ul>\n<li>Read <a href=\"http://www.infoq.com/minibooks/domain-driven-design-quickly\">Domain Driven\nDesign Quickly</a> (you can download it)</li>\n<li>Followed threads on the <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/\">DDD yahoo\ngroup</a></li>\n<li>Peeked at samples on <a href=\"http://domaindrivendesign.org/\">domaindrivendesign.org</a></li>\n<li>Start to try on my own projects</li>\n</ul>\n<p>I had practiced knowledge crunching on my own for long.</p>\n<p>But the book go far beyond all that. It has a deep vision of programming on\nlarge scale projects, and give really good insight on difficulties that arise\nwhen working on complex systems with several teams. These are really precious\npieces of advice.</p>\n<p>The pattern presentation of the different chapters, even when those patterns\nare not implementation patterns but team organization patterns is really\nhelpful and clear.</p>\n<p>There is not much about implementation details, but it is not a problem. The\nprinciples are not tied to a specific technology or framework. Actually this is\neven a good point, it leaves the book clean from a specific implementation.\nImplementation books are aging faster.</p>\n<p>You definitely should have this book on your shelf.</p>","","wow book review domain driven design finished domain driven design yesterday think had such aha moment since read design patterns eleven years ago thought was prepared for had read many things get maximum info had read domain driven design quickly you can download followed threads the ddd yahoo group peeked samples domaindrivendesign org start try own projects had practiced knowledge crunching own for long but the book far beyond all that has deep vision programming large scale projects and give really good insight difficulties that arise when working complex systems with several teams these are really precious pieces advice the pattern presentation the different chapters even when those patterns are not implementation patterns but team organization patterns really helpful and clear there not much about implementation details but not problem the principles are not tied specific technology framework actually this even good point leaves the book clean from specific implementation implementation books are aging faster you definitely should have this book your shelf","a:1:{s:3:\"tag\";a:2:{i:0;s:5:\"Books\";i:1;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","0","0"
"310542","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2008-12-19 16:26:00","Europe/Paris","2008-12-19 15:26:43","2012-12-23 23:56:21","","post","xhtml","2008/12/19/Coding-and-writing-The-form","en","Coding and writing - The form","","","<p>There is a number of common points between coding and writing</p>\r\n<h4>Spelling</h4>\r\n<p>The most basic mistake... Oops I wrote retrun instead of return... hopefully modern text editors check it on the fly.</p>\r\n<h4>Syntax</h4>\r\n<p>Correct sentences are made of word in a correct order. Here again, on the fly checking helps a lot.</p>\r\n<h4>Presentation</h4>\r\n<p>Is your code visibly clear... Enough space between parts, but not too much. Is you code clearly indented.</p>\r\n<h4>Style</h4>\r\n<p>Style is even more subjective. When coding, usually stay concise, but there are a lot of parameters here.</p>\r\n<p>You can :</p>\r\n<ul>\r\n<li>choose if statements or ?: alternating operator</li>\r\n<li>define fluent interfaces to do things on several lines</li>\r\n<li>use linq to express your intent more clearly,</li>\r\n<li>use var implicit type or not</li>\r\n<li>use anonymous types or not</li>\r\n<li>use lambdas or functions</li>\r\n</ul>\r\n<p>The important thing is that your style should fit some purpose, the style should emphasis important parts of your primary intent.</p>\r\n<h4>Structure</h4>\r\n<p>A book is divided in parts, chapters and paragraphs. The code is divided in files namespaces and classes. The structure of the code should help the reader go straight to what is the most important to him and understand how things are related.</p>\r\n<p>&nbsp;</p>\r\n<p>Next time, we'll talk about substance. Tell me if you see more analogies !</p>","<p>There is a number of common points between coding and writing</p>\n<h4>Spelling</h4>\n<p>The most basic mistake... Oops I wrote retrun instead of return... hopefully\nmodern text editors check it on the fly.</p>\n<h4>Syntax</h4>\n<p>Correct sentences are made of word in a correct order. Here again, on the\nfly checking helps a lot.</p>\n<h4>Presentation</h4>\n<p>Is your code visibly clear... Enough space between parts, but not too much.\nIs you code clearly indented.</p>\n<h4>Style</h4>\n<p>Style is even more subjective. When coding, usually stay concise, but there\nare a lot of parameters here.</p>\n<p>You can :</p>\n<ul>\n<li>choose if statements or ?: alternating operator</li>\n<li>define fluent interfaces to do things on several lines</li>\n<li>use linq to express your intent more clearly,</li>\n<li>use var implicit type or not</li>\n<li>use anonymous types or not</li>\n<li>use lambdas or functions</li>\n</ul>\n<p>The important thing is that your style should fit some purpose, the style\nshould emphasis important parts of your primary intent.</p>\n<h4>Structure</h4>\n<p>A book is divided in parts, chapters and paragraphs. The code is divided in\nfiles namespaces and classes. The structure of the code should help the reader\ngo straight to what is the most important to him and understand how things are\nrelated.</p>\n<p>Â </p>\n<p>Next time, we'll talk about substance. Tell me if you see more analogies\n!</p>","","coding and writing the form there number common points between coding and writing spelling the most basic mistake oops wrote retrun instead return hopefully modern text editors check the fly syntax correct sentences are made word correct order here again the fly checking helps lot presentation your code visibly clear enough space between parts but not too much you code clearly indented style style even more subjective when coding usually stay concise but there are lot parameters here you can choose statements alternating operator define fluent interfaces things several lines use linq express your intent more clearly use var implicit type not use anonymous types not use lambdas functions the important thing that your style should fit some purpose the style should emphasis important parts your primary intent structure book divided parts chapters and paragraphs the code divided files namespaces and classes the structure the code should help the reader straight what the most important him and understand how things are related next time talk about substance tell you see more analogies","","1","0","1","1","0","0","0"
"311459","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2008-12-22 16:42:00","Europe/Paris","2008-12-22 15:42:41","2008-12-22 15:44:32","","post","xhtml","2008/12/22/DDD:-Specifications","en","DDD: Specifications","","","<p>There's an <a href=\"http://codebetter.com/blogs/gregyoung/archive/2008/12/21/ddd-specifications-language-and-locality.aspx\">interesting post</a> by Greg Young about Specifications.</p>\r\n<p>I'm currently refactoring some code to move constraints and validation in specification classes, and it really gives a better insight at what is constituting entities and what's not, especially when there are multiple level of constraints (persistence constraints, business constraints...)</p>","<p>There's an <a href=\"http://codebetter.com/blogs/gregyoung/archive/2008/12/21/ddd-specifications-language-and-locality.aspx\">\ninteresting post</a> by Greg Young about Specifications.</p>\n<p>I'm currently refactoring some code to move constraints and validation in\nspecification classes, and it really gives a better insight at what is\nconstituting entities and what's not, especially when there are multiple level\nof constraints (persistence constraints, business constraints...)</p>","","ddd specifications there interesting post greg young about specifications currently refactoring some code move constraints and validation specification classes and really gives better insight what constituting entities and what not especially when there are multiple level constraints persistence constraints business constraints","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","0","0"
"311951","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2008-12-24 11:05:00","Europe/Paris","2008-12-24 10:05:06","2012-12-23 23:55:15","","post","xhtml","2008/12/24/Data-Structures-and-Algorithms","en","Data Structures and Algorithms","","","<p>I had a peek through <a href=\"http://feeds.feedburner.com/~r/JonSkeetCodingBlog/~3/492393350/new-version-of-data-structures-and-algorithms-book-now-online.aspx\">Jon Skeetâs blog</a> this morning at a free eBook called <a href=\"http://dotnetslackers.com/projects/Data-Structures-And-Algorithms/\">Data Structures and Algorithms</a> by <a href=\"http://msmvps.com/blogs/gbarnett/archive/2008/12/22/data-structures-and-algorithms-book-flying-out-again.aspx\">Granville Barnett</a> and <a href=\"http://blogs.ugidotnet.org/WetBlog/archive/2008/12/19/aggiornamento-data-structure-and-algorithms-book.aspx\">Luca Del Tongo</a>.</p>\r\n<p>The book is clear and presents the usual linked lists, trees, sets structures in a concise yet precise way.</p>\r\n<p>Thereâs something new I had not seen in other algorithm books before. The algorithms are written in pseudo code, but <em>there is a chapter about unit testing your implementation</em>.</p>\r\n<p>If the writers read this, I just would like to share a little tricks that make linked list algorithms easier to write..</p>\r\n<p>Linked list algorithms are always bloated with tests like this :</p>\r\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\r\n<p style=\"margin: 0;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">if</span> (head == <span style=\"color: blue;\">null</span>)</p>\r\n<p style=\"margin: 0;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; head = ...;</p>\r\n<p style=\"margin: 0;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">else</span></p>\r\n<p style=\"margin: 0;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node-&gt;Next = ...;</p>\r\n</div>\r\n<p>Actually the content of head and then content of node-&gt;Next are both pointers on next node. But the way to reference those two locations is different, ending in a lot of if statements.</p>\r\n<p>If the language supports reference variables or pointer, you can use a double pointer to hold the current position :</p>\r\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\r\n<p style=\"margin: 0;\">Node** next = &amp;head;</p>\r\n</div>\r\n<p>This way there is no more difference between the head (*next) and nodes Next pointers. The little tricky thing is to move to next location :</p>\r\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\r\n<p style=\"margin: 0;\">next = &amp;((*next)-&gt;Next);</p>\r\n</div>\r\n<p>With this you can consider every âNextâ pointer including head as equivalent. No more if statement !</p>\r\n<p>By the way, I was trying to find out how to do this on C#, but is it possible without going <em>unsafe</em> ?</p>","<p>I had a peek through <a href=\"http://feeds.feedburner.com/~r/JonSkeetCodingBlog/~3/492393350/new-version-of-data-structures-and-algorithms-book-now-online.aspx\">\nJon Skeetâs blog</a> this morning at a free eBook called <a href=\"http://dotnetslackers.com/projects/Data-Structures-And-Algorithms/\">Data\nStructures and Algorithms</a> by <a href=\"http://msmvps.com/blogs/gbarnett/archive/2008/12/22/data-structures-and-algorithms-book-flying-out-again.aspx\">\nGranville Barnett</a> and <a href=\"http://blogs.ugidotnet.org/WetBlog/archive/2008/12/19/aggiornamento-data-structure-and-algorithms-book.aspx\">\nLuca Del Tongo</a>.</p>\n<p>The book is clear and presents the usual linked lists, trees, sets\nstructures in a concise yet precise way.</p>\n<p>Thereâs something new I had not seen in other algorithm books before. The\nalgorithms are written in pseudo code, but <em>there is a chapter about unit\ntesting your implementation</em>.</p>\n<p>If the writers read this, I just would like to share a little tricks that\nmake linked list algorithms easier to write..</p>\n<p>Linked list algorithms are always bloated with tests like this :</p>\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\n<p style=\"margin: 0;\">Â Â Â Â Â Â Â  <span style=\"color: blue;\">if</span> (head == <span style=\"color: blue;\">null</span>)</p>\n<p style=\"margin: 0;\">\nÂ Â Â Â Â Â Â Â Â Â Â  head =\n...;</p>\n<p style=\"margin: 0;\">Â Â Â Â Â Â Â  <span style=\"color: blue;\">else</span></p>\n<p style=\"margin: 0;\">\nÂ Â Â Â Â Â Â Â Â Â Â \nnode-&gt;Next = ...;</p>\n</div>\n<p>Actually the content of head and then content of node-&gt;Next are both\npointers on next node. But the way to reference those two locations is\ndifferent, ending in a lot of if statements.</p>\n<p>If the language supports reference variables or pointer, you can use a\ndouble pointer to hold the current position :</p>\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\n<p style=\"margin: 0;\">Node** next = &amp;head;</p>\n</div>\n<p>This way there is no more difference between the head (*next) and nodes Next\npointers. The little tricky thing is to move to next location :</p>\n<div style=\"background: white; color: black; font-family: courier new; font-size: 10pt;\">\n<p style=\"margin: 0;\">next = &amp;((*next)-&gt;Next);</p>\n</div>\n<p>With this you can consider every âNextâ pointer including head as\nequivalent. No more if statement !</p>\n<p>By the way, I was trying to find out how to do this on C#, but is it\npossible without going <em>unsafe</em> ?</p>","","data structures and algorithms had peek through jon skeetâs blog this morning free ebook called data structures and algorithms granville barnett and luca del tongo the book clear and presents the usual linked lists trees sets structures concise yet precise way thereâs something new had not seen other algorithm books before the algorithms are written pseudo code but there chapter about unit testing your implementation the writers read this just would like share little tricks that make linked list algorithms easier write linked list algorithms are always bloated with tests like this head null head else node next actually the content head and then content node next are both pointers next node but the way reference those two locations different ending lot statements the language supports reference variables pointer you can use double pointer hold the current position node next amp head this way there more difference between the head next and nodes next pointers the little tricky thing move next location next amp next next with this you can consider every ânextâ pointer including head equivalent more statement the way was trying find out how this but possible without going unsafe","a:1:{s:3:\"tag\";a:1:{i:0;s:5:\"Books\";}}","1","0","1","1","0","0","0"
"312984","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30774","2008-12-29 18:24:00","Europe/Paris","2008-12-29 17:24:12","2008-12-30 17:07:35","","post","xhtml","2008/12/29/AspNet-authentication-cookie-oddities","en","Asp.Net authentication cookie oddities...","","","<p>Back to low level considerations.</p>\r\n<p>In order to use a specific and shareable encryption scheme between sites, we had to bypass the <strong>FormsAuthentication.Encrypt</strong> method an write a new one.</p>\r\n<p>Something strange happened then. When using our implementation, the cookie disappeared ! </p>\r\n<p><em>The cookie was added to the <strong>Response.Cookies</strong>, but was not present in the <strong>Request.Cookies</strong> of the following request.</em></p>\r\n<p>After deep search, it appeared that the cookie was actually sent to the browser. Why wouldnât it be sent back ?</p>\r\n<p>The really weird thing was that the cookie data was in the <strong>Response.Headers</strong>, but not in <strong>Response.Cookies</strong> !!!</p>\r\n<p><em>It seems that when parsing the Cookie header, <strong>Asp.net strips off the .ASPXAUTH cookie</strong> if it cannot be decrypted by <strong>FormsAuthentication.Decrypt</strong> !</em></p>\r\n<p>The solution was to use another cookie name, and everything was working again !</p>\r\n<p>If it can save 2 hours of your precious timeâ¦</p>","<p>Back to low level considerations.</p>\n<p>In order to use a specific and shareable encryption scheme between sites, we\nhad to bypass the <strong>FormsAuthentication.Encrypt</strong> method an write\na new one.</p>\n<p>Something strange happened then. When using our implementation, the cookie\ndisappeared !</p>\n<p><em>The cookie was added to the <strong>Response.Cookies</strong>, but was\nnot present in the <strong>Request.Cookies</strong> of the following\nrequest.</em></p>\n<p>After deep search, it appeared that the cookie was actually sent to the\nbrowser. Why wouldnât it be sent back ?</p>\n<p>The really weird thing was that the cookie data was in the\n<strong>Response.Headers</strong>, but not in <strong>Response.Cookies</strong>\n!!!</p>\n<p><em>It seems that when parsing the Cookie header, <strong>Asp.net strips off\nthe .ASPXAUTH cookie</strong> if it cannot be decrypted by\n<strong>FormsAuthentication.Decrypt</strong> !</em></p>\n<p>The solution was to use another cookie name, and everything was working\nagain !</p>\n<p>If it can save 2 hours of your precious timeâ¦</p>","","asp net authentication cookie oddities back low level considerations order use specific and shareable encryption scheme between sites had bypass the formsauthentication encrypt method write new one something strange happened then when using our implementation the cookie disappeared the cookie was added the response cookies but was not present the request cookies the following request after deep search appeared that the cookie was actually sent the browser why wouldnât sent back the really weird thing was that the cookie data was the response headers but not response cookies seems that when parsing the cookie header asp net strips off the aspxauth cookie cannot decrypted formsauthentication decrypt the solution was use another cookie name and everything was working again can save hours your precious timeâ¦","a:1:{s:3:\"tag\";a:1:{i:0;s:7:\"Asp.Net\";}}","1","0","1","1","0","0","0"
"315926","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30774","2009-01-08 17:58:00","Europe/Paris","2009-01-08 16:58:04","2009-01-08 17:04:25","","post","xhtml","2009/01/08/Aspnet-MVC-binding-security-issue","en","Asp.net MVC binding security issue","","","<p>Thereâs a post on <a href=\"http://www.codethinked.com/\">CodeThinked</a> about a <a href=\"http://www.codethinked.com/post/2009/01/08/ASPNET-MVC-Think-Before-You-Bind.aspx\">serious potential security issue</a>.</p>\r\n<p>The problem comes from an MVC convenience that when using an object as a controller action parameter, Asp.net MVC will bind the form fields to object properties auto-magically. Read the full post for a complete description.</p>\r\n<p>I would recommend a solution using a presentation only model. There is a good reason for this.</p>\r\n<p>The model object passed to the view should not be directly the domain/business object. I always create a thin adaptation layer for presentation, even when it doesnât add much value. I lets me decouple presentation concerns from domain concerns.</p>\r\n<p>The object coming back from the form should follow the same rule as part of this presentation concerns. There is no problem if those presentation objects provide only non sensitive fields.</p>\r\n<p>&nbsp;</p>\r\n<p>But itâs sure that not anyone will know about the risks.</p>","<p>Thereâs a post on <a href=\"http://www.codethinked.com/\">CodeThinked</a>\nabout a <a href=\"http://www.codethinked.com/post/2009/01/08/ASPNET-MVC-Think-Before-You-Bind.aspx\">\nserious potential security issue</a>.</p>\n<p>The problem comes from an MVC convenience that when using an object as a\ncontroller action parameter, Asp.net MVC will bind the form fields to object\nproperties auto-magically. Read the full post for a complete description.</p>\n<p>I would recommend a solution using a presentation only model. There is a\ngood reason for this.</p>\n<p>The model object passed to the view should not be directly the\ndomain/business object. I always create a thin adaptation layer for\npresentation, even when it doesnât add much value. I lets me decouple\npresentation concerns from domain concerns.</p>\n<p>The object coming back from the form should follow the same rule as part of\nthis presentation concerns. There is no problem if those presentation objects\nprovide only non sensitive fields.</p>\n<p>Â </p>\n<p>But itâs sure that not anyone will know about the risks.</p>","","asp net mvc binding security issue thereâs post codethinked about serious potential security issue the problem comes from mvc convenience that when using object controller action parameter asp net mvc will bind the form fields object properties auto magically read the full post for complete description would recommend solution using presentation only model there good reason for this the model object passed the view should not directly the domain business object always create thin adaptation layer for presentation even when doesnât add much value lets decouple presentation concerns from domain concerns the object coming back from the form should follow the same rule part this presentation concerns there problem those presentation objects provide only non sensitive fields but itâs sure that not anyone will know about the risks","a:1:{s:3:\"tag\";a:1:{i:0;s:11:\"Asp.Net MVC\";}}","1","0","1","1","0","0","0"
"318992","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-01-19 11:50:00","Europe/Paris","2009-01-19 10:50:56","2009-04-29 14:25:31","","post","xhtml","2009/01/19/Repositories-and-IQueryable-the-paging-case","en","Repositories and IQueryable, the paging case.","","","<p><font color=\"#ff0000\"><strong>Edit :</strong> My opinion on this subject have changedâ¦ You can read the full story in </font><a href=\"http://thinkbeforecoding.com/post/2009/04/08/Back-on-Repositories-and-Paging-Introducing-reporting\"><font color=\"#ff0000\">Back on Repositories and Paging. Introducing reporting</font></a><font color=\"#ff0000\">. </font></p>  <p><font color=\"#ff0000\">The technique is still useful to write the query services, but I would not recommend to implement it on a repository.</font></p>  <p>&#160;</p>  <p>When it comes to repositories, people have a hard time figuring how to respect the DDD vision while taking most out of current ORM technologies (Linq and ORM) and not writing too much code â weâre so lazy.<img style=\"border-right-width: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"civilwar\" alt=\"civilwar\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_RepositoriesandIQueryablethepagingcase_94DC_civilwar_1.png\" width=\"244\" height=\"171\" /></p>  <p>The war between IRepository&lt;T&gt; generic repositories or not is raging outside, and I took some time to chose my side. Here are the points to consider :</p>  <ul>   <li>The repository is a contract between the domain and the infrastructure </li>    <li>The implementation details should not leak outside </li> </ul>  <p>In my opinion, the first point indicates that <strong>the repository should be tailored to the domain needs</strong>. It cannot be generic, or it is not a contract at all.</p>  <p><em>When writing a contract, details matter !</em></p>  <p>This doesnât mean that we cannot use generic tools to access data behind the interface curtain. Linq DataContext and Tables&lt;T&gt; are very sharp tools to implement repositories. And there is <a href=\"http://codebetter.com/blogs/gregyoung/archive/2009/01/16/ddd-the-generic-repository.aspx\">a very good post by Greg Young</a> about that.</p>  <p>&#160;</p>  <p>There is still a point to be discussed though :</p>  <p><strong>Should the repository methods return IEnumerable&lt;T&gt; or IQueryable&lt;T&gt; ?</strong></p>  <p>The IQueryable&lt;T&gt; is part of the framework, and cleanly integrated in the language.</p>  <p><em>The problem is that its implementation depends heavily on the underlying provider. And it is a really serious leak !</em></p>  <p>So lets state the question differently :</p>  <p><strong>- Why would we need IQueryable ?     <br /></strong>- Because we can add new query clauses, and they will be executed directly in the database.</p>  <p>- <strong>What kind of clause would you add ?     <br /></strong>- Donât knowâ¦ clausesâ¦</p>  <p><strong>- Would it be business specifications ?     <br /></strong>- No, these should already be in the repository..</p>  <p><strong>- So ?     <br /></strong>- <em>Sorting and Paging</em> ! These are presentation concerns !</p>  <p><strong>- Hereâs the point.</strong></p>  <p>Paging is not a recent concern for programmers and there is never enough tools to implement it properly. The main problem is that paging once youâve got all the data is less that effective. And this is what will happen with an IEnumerable approach.</p>  <p>But letâs ask a two last questions.</p>  <p><strong>Why is paging useful ? Is it really a presentation concern ?</strong></p>  <p>We need paging to navigate through large collection of object, and <em>if a collection can grow enough so that is cannot be embraced in a single query, it becomes a domain concern</em> !</p>  <ul>   <li>When your object collection is known at design time to stay in small bounds but you still want to page it for presentation clarity, there is no real penalty to fetch all and display only a few. </li>    <li>But when your collection can grow big, you SHOULD provide a mechanism to retrieve only a range of it, for presentation purpose or simply for batching purpose. </li> </ul>  <p>The problem is that if we leak IQueryable, the user can do far more than paging, and problems can arise. So I suggest to use a new interface <strong>IPaged&lt;T&gt;</strong> that would provide everything needed for paging :</p>  <div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">   <p style=\"margin: 0px\"><span style=\"color: blue\">public</span> <span style=\"color: blue\">interface</span> <span style=\"color: #2b91af\">IPaged</span>&lt;T&gt; : <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;summary&gt;</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span> <span style=\"color: green\">Get the total entity count.</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;/summary&gt;</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">int</span> Count { <span style=\"color: blue\">get</span>; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;summary&gt;</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span> <span style=\"color: green\">Get a range of persited entities.</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;/summary&gt;</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt; GetRange(<span style=\"color: blue\">int</span> index, <span style=\"color: blue\">int</span> count);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; }</p> </div>  <p>&#160;</p>  <p>And here is a simple implementation on a IQueryable :</p>  <div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">   <p style=\"margin: 0px\"><span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">Paged</span>&lt;T&gt; : <span style=\"color: #2b91af\">IPaged</span>&lt;T&gt;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">private</span> <span style=\"color: blue\">readonly</span> IQueryable&lt;T&gt; source;</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> Paged(IQueryable&lt;T&gt; source)</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">this</span>.source = source;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: #2b91af\">IEnumerator</span>&lt;T&gt; GetEnumerator()</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">return</span> source.GetEnumerator();</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; IEnumerator IEnumerable.GetEnumerator()</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">return</span> GetEnumerator();</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: blue\">int</span> Count</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">get</span> { <span style=\"color: blue\">return</span> source.Count(); }</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt; GetRange(<span style=\"color: blue\">int</span> index, <span style=\"color: blue\">int</span> count)</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">return</span> source.Skip(index).Take(count);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; }</p> </div>  <p>Then your repository can return IPaged collections like this without leaking implementation details :</p>  <div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">   <p style=\"margin: 0px\"><span style=\"color: blue\">public</span> IPaged&lt;Customer&gt; GetCustomers();</p> </div>  <p>&#160;</p>  <p>This seems to be a major step in the repository pattern understanding, and itâs underlying war. And you, on which side are you ?</p>","<p><strong>Edit :</strong> My opinion on this subject have changedâ¦ You can\nread the full story in <a href=\"http://thinkbeforecoding.com/post/2009/04/08/Back-on-Repositories-and-Paging-Introducing-reporting\">\nBack on Repositories and Paging. Introducing reporting</a>.</p>\n<p>The technique is still useful to write the query services, but I would not\nrecommend to implement it on a repository.</p>\n<p>Â </p>\n<p>When it comes to repositories, people have a hard time figuring how to\nrespect the DDD vision while taking most out of current ORM technologies (Linq\nand ORM) and not writing too much code â weâre so lazy.<img style=\"border-right-width: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"civilwar\" alt=\"civilwar\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_RepositoriesandIQueryablethepagingcase_94DC_civilwar_1.png\" width=\"244\" height=\"171\" /></p>\n<p>The war between IRepository&lt;T&gt; generic repositories or not is raging\noutside, and I took some time to chose my side. Here are the points to consider\n:</p>\n<ul>\n<li>The repository is a contract between the domain and the infrastructure</li>\n<li>The implementation details should not leak outside</li>\n</ul>\n<p>In my opinion, the first point indicates that <strong>the repository should\nbe tailored to the domain needs</strong>. It cannot be generic, or it is not a\ncontract at all.</p>\n<p><em>When writing a contract, details matter !</em></p>\n<p>This doesnât mean that we cannot use generic tools to access data behind the\ninterface curtain. Linq DataContext and Tables&lt;T&gt; are very sharp tools to\nimplement repositories. And there is <a href=\"http://codebetter.com/blogs/gregyoung/archive/2009/01/16/ddd-the-generic-repository.aspx\">\na very good post by Greg Young</a> about that.</p>\n<p>Â </p>\n<p>There is still a point to be discussed though :</p>\n<p><strong>Should the repository methods return IEnumerable&lt;T&gt; or\nIQueryable&lt;T&gt; ?</strong></p>\n<p>The IQueryable&lt;T&gt; is part of the framework, and cleanly integrated in\nthe language.</p>\n<p><em>The problem is that its implementation depends heavily on the underlying\nprovider. And it is a really serious leak !</em></p>\n<p>So lets state the question differently :</p>\n<p><strong>- Why would we need IQueryable ?<br /></strong> - Because we can add\nnew query clauses, and they will be executed directly in the database.</p>\n<p>- <strong>What kind of clause would you add ?<br /></strong> - Donât knowâ¦\nclausesâ¦</p>\n<p><strong>- Would it be business specifications ?<br /></strong> - No, these\nshould already be in the repository..</p>\n<p><strong>- So ?<br /></strong> - <em>Sorting and Paging</em> ! These are\npresentation concerns !</p>\n<p><strong>- Hereâs the point.</strong></p>\n<p>Paging is not a recent concern for programmers and there is never enough\ntools to implement it properly. The main problem is that paging once youâve got\nall the data is less that effective. And this is what will happen with an\nIEnumerable approach.</p>\n<p>But letâs ask a two last questions.</p>\n<p><strong>Why is paging useful ? Is it really a presentation concern\n?</strong></p>\n<p>We need paging to navigate through large collection of object, and <em>if a\ncollection can grow enough so that is cannot be embraced in a single query, it\nbecomes a domain concern</em> !</p>\n<ul>\n<li>When your object collection is known at design time to stay in small bounds\nbut you still want to page it for presentation clarity, there is no real\npenalty to fetch all and display only a few.</li>\n<li>But when your collection can grow big, you SHOULD provide a mechanism to\nretrieve only a range of it, for presentation purpose or simply for batching\npurpose.</li>\n</ul>\n<p>The problem is that if we leak IQueryable, the user can do far more than\npaging, and problems can arise. So I suggest to use a new interface\n<strong>IPaged&lt;T&gt;</strong> that would provide everything needed for\npaging :</p>\n<div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">\n<p style=\"margin: 0px\"><span style=\"color: blue\">public</span> <span style=\"color: blue\">interface</span> <span style=\"color: #2b91af\">IPaged</span>&lt;T&gt; : <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt;</p>\n<p style=\"margin: 0px\">Â Â Â  {</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;summary&gt;</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span> <span style=\"color: green\">Get the total entity\ncount.</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;/summary&gt;</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">int</span> Count { <span style=\"color: blue\">get</span>; }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;summary&gt;</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span> <span style=\"color: green\">Get a range of persited\nentities.</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: gray\">///</span><span style=\"color: gray\">&lt;/summary&gt;</span></p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt; GetRange(<span style=\"color: blue\">int</span> index, <span style=\"color: blue\">int</span>\ncount);</p>\n<p style=\"margin: 0px\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>And here is a simple implementation on a IQueryable :</p>\n<div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">\n<p style=\"margin: 0px\"><span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">Paged</span>&lt;T&gt; :\n<span style=\"color: #2b91af\">IPaged</span>&lt;T&gt;</p>\n<p style=\"margin: 0px\">Â Â Â  {</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">private</span> <span style=\"color: blue\">readonly</span>\nIQueryable&lt;T&gt; source;</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> Paged(IQueryable&lt;T&gt; source)</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">this</span>.source = source;</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: #2b91af\">IEnumerator</span>&lt;T&gt; GetEnumerator()</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">return</span> source.GetEnumerator();</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  IEnumerator\nIEnumerable.GetEnumerator()</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">return</span> GetEnumerator();</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: blue\">int</span> Count</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">get</span> { <span style=\"color: blue\">return</span>\nsource.Count(); }</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: #2b91af\">IEnumerable</span>&lt;T&gt; GetRange(<span style=\"color: blue\">int</span> index, <span style=\"color: blue\">int</span> count)</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">return</span> source.Skip(index).Take(count);</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â Â Â  }</p>\n</div>\n<p>Then your repository can return IPaged collections like this without leaking\nimplementation details :</p>\n<div style=\"font-family: courier new; background: white; color: black; font-size: 10pt\">\n<p style=\"margin: 0px\"><span style=\"color: blue\">public</span>\nIPaged&lt;Customer&gt; GetCustomers();</p>\n</div>\n<p>Â </p>\n<p>This seems to be a major step in the repository pattern understanding, and\nitâs underlying war. And you, on which side are you ?</p>","","repositories and iqueryable the paging case edit opinion this subject have changedâ¦ you can read the full story back repositories and paging introducing reporting the technique still useful write the query services but would not recommend implement repository when comes repositories people have hard time figuring how respect the ddd vision while taking most out current orm technologies linq and orm and not writing too much code weâre lazy the war between irepository generic repositories not raging outside and took some time chose side here are the points consider the repository contract between the domain and the infrastructure the implementation details should not leak outside opinion the first point indicates that the repository should tailored the domain needs cannot generic not contract all when writing contract details matter this doesnât mean that cannot use generic tools access data behind the interface curtain linq datacontext and tables are very sharp tools implement repositories and there very good post greg young about that there still point discussed though should the repository methods return ienumerable iqueryable the iqueryable part the framework and cleanly integrated the language the problem that its implementation depends heavily the underlying provider and really serious leak lets state the question differently why would need iqueryable because can add new query clauses and they will executed directly the database what kind clause would you add donât knowâ¦ clausesâ¦ would business specifications these should already the repository sorting and paging these are presentation concerns hereâs the point paging not recent concern for programmers and there never enough tools implement properly the main problem that paging once youâve got all the data less that effective and this what will happen with ienumerable approach but letâs ask two last questions why paging useful really presentation concern need paging navigate through large collection object and collection can grow enough that cannot embraced single query becomes domain concern when your object collection known design time stay small bounds but you still want page for presentation clarity there real penalty fetch all and display only few but when your collection can grow big you should provide mechanism retrieve only range for presentation purpose simply for batching purpose the problem that leak iqueryable the user can far more than paging and problems can arise suggest use new interface ipaged that would provide everything needed for paging public interface ipaged ienumerable summary get the total entity count summary int count get summary get range persited entities summary ienumerable getrange int index int count and here simple implementation iqueryable public class paged ipaged private readonly iqueryable source public paged iqueryable source this source source public ienumerator getenumerator return source getenumerator ienumerator ienumerable getenumerator return getenumerator public int count get return source count public ienumerable getrange int index int count return source skip index take count then your repository can return ipaged collections like this without leaking implementation details public ipaged customer getcustomers this seems major step the repository pattern understanding and itâs underlying war and you which side are you","a:1:{s:3:\"tag\";a:4:{i:0;s:6:\"Paging\";i:1;s:4:\"Linq\";i:2;s:20:\"Domain Driven Design\";i:3;s:10:\"Repository\";}}","1","0","1","1","18","1","0"
"319646","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-01-21 17:12:00","Europe/Paris","2009-01-21 16:12:22","2009-01-22 16:06:12","","post","xhtml","2009/01/21/Mixing-IEnumerable-and-IQueryable","en","Mixing IEnumerable and IQueryable","","","<p>Marcel posted a comment in <a href=\"http://www.thinkbeforecoding.com/post/2009/01/19/Repositories-and-IQueryable-the-paging-case\">the previous post</a> saying that even if returning IEnumerable, the new query clauses would be executed in the databaseâ¦ <strong>But itâs not.</strong></p>\r\n<p>If the repository use linq internally and returns the result as IEnumerable, on the other side, consider something like this :</p>\r\n<div style=\"FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">var selectedEntities = repository.GetAll().Where(x =&gt; x.Selected)</p>\r\n</div>\r\n<p>Where GetAll returns an IEnumerable (that is actually a IQueryable).</p>\r\n<p>The Where extension method will be selected on Enumerable. <em>Be careful, Extension methods are static methods, no virtual call is involved here</em>. The static type of the object decide the selected extension method.</p>\r\n<p>&nbsp;</p>\r\n<p>Check in your debugger, selectedEntities is an instance of the Enumerable.WhereIterator internal class.</p>\r\n<p>&nbsp;</p>\r\n<p>So when enumerating it, it enumerates its source and returns every item that passes the predicate.</p>\r\n<p>When enumerating the source, here the source use linq2Sql to get the items and creates a query that returns all rows from the database.</p>\r\n<p><strong>The where clause was not executed in the database.</strong></p>\r\n<p>So the Linq provider did not leak outside of the repository.</p>","<p>Marcel posted a comment in <a href=\"http://www.thinkbeforecoding.com/post/2009/01/19/Repositories-and-IQueryable-the-paging-case\">\nthe previous post</a> saying that even if returning IEnumerable, the new query\nclauses would be executed in the databaseâ¦ <strong>But itâs not.</strong></p>\n<p>If the repository use linq internally and returns the result as IEnumerable,\non the other side, consider something like this :</p>\n<div style=\"FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">var selectedEntities = repository.GetAll().Where(x =&gt;\nx.Selected)</p>\n</div>\n<p>Where GetAll returns an IEnumerable (that is actually a IQueryable).</p>\n<p>The Where extension method will be selected on Enumerable. <em>Be careful,\nExtension methods are static methods, no virtual call is involved here</em>.\nThe static type of the object decide the selected extension method.</p>\n<p>Â </p>\n<p>Check in your debugger, selectedEntities is an instance of the\nEnumerable.WhereIterator internal class.</p>\n<p>Â </p>\n<p>So when enumerating it, it enumerates its source and returns every item that\npasses the predicate.</p>\n<p>When enumerating the source, here the source use linq2Sql to get the items\nand creates a query that returns all rows from the database.</p>\n<p><strong>The where clause was not executed in the database.</strong></p>\n<p>So the Linq provider did not leak outside of the repository.</p>","","mixing ienumerable and iqueryable marcel posted comment the previous post saying that even returning ienumerable the new query clauses would executed the databaseâ¦ but itâs not the repository use linq internally and returns the result ienumerable the other side consider something like this var selectedentities repository getall where selected where getall returns ienumerable that actually iqueryable the where extension method will selected enumerable careful extension methods are static methods virtual call involved here the static type the object decide the selected extension method check your debugger selectedentities instance the enumerable whereiterator internal class when enumerating enumerates its source and returns every item that passes the predicate when enumerating the source here the source use linq2sql get the items and creates query that returns all rows from the database the where clause was not executed the database the linq provider did not leak outside the repository","a:1:{s:3:\"tag\";a:2:{i:0;s:4:\"Linq\";i:1;s:10:\"Repository\";}}","1","0","1","1","2","0","0"
"324887","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-02-07 14:44:00","Europe/Paris","2009-02-07 13:44:51","2009-03-06 16:40:10","","post","xhtml","2009/02/07/Lazy-load-and-persistence-ignorance","en","Lazy load and persistence ignorance","","","<h1><a href=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Lazyloadandpersistenceignorance_BD9E_lazy_1__2.jpg\"><img style=\"BORDER-RIGHT: 0; BORDER-TOP: 0; FLOAT: right; BORDER-LEFT: 0; BORDER-BOTTOM: 0\" height=\"170\" alt=\"lazy\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Lazyloadandpersistenceignorance_BD9E_lazy_1__thumb.jpg\" width=\"244\" /></a></h1>\r\n<p>I often see questions about how to make lazy loads in entities, and wether using dependency injection for it.</p>\r\n<p>The usual response is something like this :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Entity</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> SubEntity subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> IDataService dataService;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id, IDataService dataService)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.dataService = dataService;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (subEntity == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subEntity = dataService.GetSubEntity(id);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>As you can see, your entity is seriously tied to your persistence problem now. Even if it accesses the persistence layer through an interface, it is not persistence ignorant anymore.</p>\r\n<p>The smell is that you cannot create an in memory instance of your entity anymore without worrying about data access.</p>\r\n<p><em>Should you sill inject the data access service, or is it useless and you should leave it null ?</em></p>\r\n<p>So believe me : <strong>do not inject data services in your entity</strong>.</p>\r\n<p>Now, how can we still have the lazy load behavior ?</p>\r\n<p>Through injection. But not dependency injection, I use execution inversion of control through delegate injection.</p>\r\n<p>If you give to your entity a function that will return the value when asked, it's as if you gave the value.</p>\r\n<p>Let's encapsulate this in a small class :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> T value;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; loader;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Lazy(T value)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.value = value;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Lazy(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; loader)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.loader = loader;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> T Value</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (loader != <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = loader();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loader = <span style=\"COLOR: blue\">null</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> value;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">implicit</span> <span style=\"COLOR: blue\">operator</span> T(<span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt; lazy)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> lazy.Value;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">implicit</span> <span style=\"COLOR: blue\">operator</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(T value)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(value);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Then you can use it like this in your entity :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Entity</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id, <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.subEntity = subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Guid</span> Id { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> id; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> subEntity; } <span style=\"COLOR: green\">// implicit cast here</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p><strong>The code is more straight forward, the intent is clearly visible.</strong></p>\r\n<p>One benefit here, is that the subEntity field can be marked as readonly, that is a big improvement because our entity is really immutable now. Actually the Lazy&lt;T&gt; is mutable, but it behaves as an immutable value.</p>\r\n<p>If your entity is not immutable, you can still leverage the Lazy&lt;T&gt; class :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; class</span> <span style=\"COLOR: #2b91af\">Entity</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id, <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.subEntity = subEntity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Guid</span> Id { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> id; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> subEntity; } <span style=\"COLOR: green\">// implicit cast here</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">set</span> { subEntity = <span style=\"COLOR: blue\">value</span>; } <span style=\"COLOR: green\">// implicit cast here too</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The last part is about how you use it when instantiating the object.</p>\r\n<p>When creating a new instance in a factory (not linked to database) :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SubEntity subEntity = ...;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Guid</span> id = ...;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Entity</span> entity = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Entity</span>(id, subEntity);</p>\r\n</div>\r\n<p>Here again, the implicit cast happen to pass the SubEntity as an already loaded Lazy&lt;SubEntity&gt;.</p>\r\n<p>When binding the entity to the database :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EntityBuilder</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> IDataService dataService;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> EntityBuilder(IDataService dataService)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.dataService = dataService;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Entity</span> GetEntity(<span style=\"COLOR: #2b91af\">Guid</span> id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Entity</span>(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt;(() =&gt; dataService.GetSubEntity(id)));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>We can use a small helper method to make the instantiation cleaner :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Lazy</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt; From&lt;T&gt;(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; loader)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(loader);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Then you can write :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Entity</span>(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Lazy</span>.From(() =&gt; dataService.GetSubEntity(id)));</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now, the code that instantiate the Entity decides where the sub entity comes from.</p>\r\n<p>The entity has become truly persistence ignorant.</p>\r\n<p>Some would also advice not to use lazy load at all... this is still an option to consider !</p>\r\n<p><em>Continued in </em><a href=\"http://www.thinkbeforecoding.com/post/2009/02/08/Lazy-loads-and-persistence-ignorance-Part-2\"><em>Lazy loads and persistence ignorance (Part 2)</em></a></p>","<h1><a href=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Lazyloadandpersistenceignorance_BD9E_lazy_1__2.jpg\">\n<img style=\"BORDER-RIGHT: 0; BORDER-TOP: 0; FLOAT: right; BORDER-LEFT: 0; BORDER-BOTTOM: 0\" height=\"170\" alt=\"lazy\" src=\"http://www.thinkbeforecoding.com/public/WindowsLiveWriter_Lazyloadandpersistenceignorance_BD9E_lazy_1__thumb.jpg\" width=\"244\" /></a></h1>\n<p>I often see questions about how to make lazy loads in entities, and wether\nusing dependency injection for it.</p>\n<p>The usual response is something like this :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Entity</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> SubEntity subEntity;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> IDataService dataService;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id,\nIDataService dataService)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.dataService = dataService;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span></p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (subEntity == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsubEntity = dataService.GetSubEntity(id);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">return</span> subEntity;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>As you can see, your entity is seriously tied to your persistence problem\nnow. Even if it accesses the persistence layer through an interface, it is not\npersistence ignorant anymore.</p>\n<p>The smell is that you cannot create an in memory instance of your entity\nanymore without worrying about data access.</p>\n<p><em>Should you sill inject the data access service, or is it useless and you\nshould leave it null ?</em></p>\n<p>So believe me : <strong>do not inject data services in your\nentity</strong>.</p>\n<p>Now, how can we still have the lazy load behavior ?</p>\n<p>Through injection. But not dependency injection, I use execution inversion\nof control through delegate injection.</p>\n<p>If you give to your entity a function that will return the value when asked,\nit's as if you gave the value.</p>\n<p>Let's encapsulate this in a small class :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> T value;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt;\nloader;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Lazy(T value)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.value = value;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Lazy(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; loader)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.loader = loader;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> T Value</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span></p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (loader != <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n{</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nvalue = loader();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nloader = <span style=\"COLOR: blue\">null</span>;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n}</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">return</span> value;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">implicit</span> <span style=\"COLOR: blue\">operator</span> T(<span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt; lazy)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> lazy.Value;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">implicit</span> <span style=\"COLOR: blue\">operator</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(T value)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(value);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Then you can use it like this in your entity :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Entity</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Guid</span> id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id,\n<span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.subEntity = subEntity;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Guid</span> Id {\n<span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\nid; } }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> subEntity; }\n<span style=\"COLOR: green\">// implicit cast here</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p><strong>The code is more straight forward, the intent is clearly\nvisible.</strong></p>\n<p>One benefit here, is that the subEntity field can be marked as readonly,\nthat is a big improvement because our entity is really immutable now. Actually\nthe Lazy&lt;T&gt; is mutable, but it behaves as an immutable value.</p>\n<p>If your entity is not immutable, you can still leverage the Lazy&lt;T&gt;\nclass :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  class</span>\n<span style=\"COLOR: #2b91af\">Entity</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Guid</span> id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Entity(<span style=\"COLOR: #2b91af\">Guid</span> id,\n<span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt; subEntity)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.subEntity = subEntity;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Guid</span> Id {\n<span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\nid; } }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> SubEntity SubEntity</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> subEntity; }\n<span style=\"COLOR: green\">// implicit cast here</span></p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">set</span> { subEntity = <span style=\"COLOR: blue\">value</span>;\n} <span style=\"COLOR: green\">// implicit cast here too</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The last part is about how you use it when instantiating the object.</p>\n<p>When creating a new instance in a factory (not linked to database) :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  SubEntity\nsubEntity = ...;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Guid</span> id = ...;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Entity</span> entity = <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">Entity</span>(id, subEntity);</p>\n</div>\n<p>Here again, the implicit cast happen to pass the SubEntity as an already\nloaded Lazy&lt;SubEntity&gt;.</p>\n<p>When binding the entity to the database :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">EntityBuilder</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> IDataService dataService;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> EntityBuilder(IDataService dataService)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.dataService = dataService;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Entity</span>\nGetEntity(<span style=\"COLOR: #2b91af\">Guid</span> id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Entity</span>(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nid,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;SubEntity&gt;(() =&gt;\ndataService.GetSubEntity(id)));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>We can use a small helper method to make the instantiation cleaner :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Lazy</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt; From&lt;T&gt;(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; loader)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Lazy</span>&lt;T&gt;(loader);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Then you can write :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Entity</span>(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nid,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Lazy</span>.From(() =&gt;\ndataService.GetSubEntity(id)));</p>\n</div>\n<p>Â </p>\n<p>Now, the code that instantiate the Entity decides where the sub entity comes\nfrom.</p>\n<p>The entity has become truly persistence ignorant.</p>\n<p>Some would also advice not to use lazy load at all... this is still an\noption to consider !</p>\n<p><em>Continued in</em> <a href=\"http://www.thinkbeforecoding.com/post/2009/02/08/Lazy-loads-and-persistence-ignorance-Part-2\">\n<em>Lazy loads and persistence ignorance (Part 2)</em></a></p>","","lazy load and persistence ignorance often see questions about how make lazy loads entities and wether using dependency injection for the usual response something like this class entity private guid private subentity subentity private idataservice dataservice public entity guid idataservice dataservice this this dataservice dataservice public subentity subentity get subentity null subentity dataservice getsubentity return subentity you can see your entity seriously tied your persistence problem now even accesses the persistence layer through interface not persistence ignorant anymore the smell that you cannot create memory instance your entity anymore without worrying about data access should you sill inject the data access service useless and you should leave null believe not inject data services your entity now how can still have the lazy load behavior through injection but not dependency injection use execution inversion control through delegate injection you give your entity function that will return the value when asked you gave the value let encapsulate this small class public class lazy private value private func loader public lazy value this value value public lazy func loader this loader loader public value get loader null value loader loader null return value public static implicit operator lazy lazy return lazy value public static implicit operator lazy value return new lazy value then you can use like this your entity class entity private readonly guid private readonly lazy subentity subentity public entity guid lazy subentity subentity this this subentity subentity public guid get return public subentity subentity get return subentity implicit cast here the code more straight forward the intent clearly visible one benefit here that the subentity field can marked readonly that big improvement because our entity really immutable now actually the lazy mutable but behaves immutable value your entity not immutable you can still leverage the lazy class class entity private readonly guid private lazy subentity subentity public entity guid lazy subentity subentity this this subentity subentity public guid get return public subentity subentity get return subentity implicit cast here set subentity value implicit cast here too the last part about how you use when instantiating the object when creating new instance factory not linked database subentity subentity guid entity entity new entity subentity here again the implicit cast happen pass the subentity already loaded lazy subentity when binding the entity the database class entitybuilder private idataservice dataservice public entitybuilder idataservice dataservice this dataservice dataservice public entity getentity guid return new entity new lazy subentity dataservice getsubentity can use small helper method make the instantiation cleaner public static class lazy public static lazy from func loader return new lazy loader then you can write return new entity lazy from dataservice getsubentity now the code that instantiate the entity decides where the sub entity comes from the entity has become truly persistence ignorant some would also advice not use lazy load all this still option consider continued lazy loads and persistence ignorance part","a:1:{s:3:\"tag\";a:2:{i:0;s:10:\"Repository\";i:1;s:20:\"Domain Driven Design\";}}","1","0","1","1","8","1","0"
"325085","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-02-08 13:17:00","Europe/Paris","2009-02-08 12:17:31","2009-03-06 16:38:51","","post","xhtml","2009/02/08/Lazy-loads-and-persistence-ignorance-Part-2","en","Lazy loads and persistence ignorance (Part 2)","","","<p>In the <a href=\"http://www.thinkbeforecoding.com/post/2009/02/07/Lazy-load-and-persistence-ignorance\">previous post</a>, I introduced a class to manage function injection for lazy loads to enable persistence ignorance.</p>\r\n<p><a href=\"http://www.marisic.net/\">Chris</a> was asking where the builder I was talking about should be used, and I tumbled on a <a href=\"http://stackoverflow.com/questions/524075/lazy-loading-whats-the-best-approach/524138#524138\">StackOverflow question</a> asking how to make lazy loading without using classes like Lazy&lt;T&gt;...</p>\r\n<p>I'll discuss the second part first.</p>\r\n<p>There is a good way to make lazy loading without using classes like that. You can use proxies.</p>\r\n<p>There are two main ways to make transparent proxies</p>\r\n<ul>\r\n<li>by creating dynamically a derived class using Reflection.Emit</li>\r\n<li>by creating a transparent proxy</li>\r\n</ul>\r\n<p>Still there are some drawbacks with both approaches. For the first one, all your members should be made virtual, for the second your class should inherit from MarshalByRefObject. In all case you should then take care not to mess up between proxies and underlying classes.</p>\r\n<p>The main critic to refuse to use Lazy&lt;T&gt; class is usually that it's not a domain concept, and that it leaks persistence concern in the model.</p>\r\n<p>I reject those critics.</p>\r\n<p>Have you ever seen someone criticize List&lt;T&gt; or Dictionary&lt;,&gt; because it was not a domain concept ? <strong>We're writing OO code, and we can use basic tooling to make our models expressive</strong>. IEnumerable&lt;T&gt; and Linq to objects are good examples of these useful tools.</p>\r\n<p>And I don't consider that Lazy&lt;T&gt; is a persistence concern. <strong>It expresses that the relation between entities is a bit more loose than others</strong>. There is nothing in the Lazy&lt;T&gt; signature that ties your entity to any persistence concept. You just provide a way to give the value of the property when needed rather than at construction, but this choice comes from outside of your entity.</p>\r\n<p>And at least it becomes clearer than with derived proxies where the C# keyword <strong>virtual</strong> is used to express something but tries to hide it in the same time.</p>\r\n<p>&nbsp;</p>\r\n<p>For Chris question, I use the builder in the repository.</p>\r\n<p>The repository is responsible for retrieving entities from the data store. The reconstruction of objects is a bit different from the construction. This is underlined in Evan's book in the chapter <em>Factories / Reconstituting Stored Objects.</em></p>\r\n<p>In my data access layer I use a IDataBuilder&lt;T&gt; interface that represents a service that can build an object of type T from a IDataRecord. This is when I work directly with the ADO.Net and stored procedures.</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IDataBuilder</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T Build(IDataRecord record);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I also use a class that encapsulate the access to the stored procedures (or queries if you don't want to use stored procedures).</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">DataAccess</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> UniqueResult&lt;<span style=\"COLOR: #2b91af\">Entity</span>&gt; GetEntity(<span style=\"COLOR: #2b91af\">Guid</span> id);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> MultipleResult&lt;Entity&gt; GetEntities()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>UniqueResult&lt;T&gt; and MultipleResult&lt;T&gt; provides a methods that take a builder to read data records :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">UniqueResult</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> T With(IDataBuilder&lt;T&gt; builder)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">MultipleResult</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; With(IDataBuilder&lt;T&gt; builder)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In your repository implementation you can then use all this :</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// The concrete repository interface that belongs to the domain</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEntityRepository</span> : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;Entity&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity <span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">Guid</span> id] { <span style=\"COLOR: blue\">get</span>;}</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//.. other methods</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// the implementation that is not part of the domain</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// an that is pesistance dependant.</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EntityRepository</span> : <span style=\"COLOR: #2b91af\">IEntityRepository</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> DataAccess dataAccess;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">EntityBuilder</span> builder;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> EntityRepository(DataAccess dataAccess, <span style=\"COLOR: #2b91af\">EntityBuilder</span> builder)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.dataAccess = dataAccess;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.builder = builder;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;Entity&gt; GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> dataAccess.GetEntities().With(builder);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> GetEnumerator();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Entity <span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">Guid</span> id]</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> dataAccess.GetEntity(id).With(builder); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The last part is in the implementation of the builder.</p>\r\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EntityBuilder</span> : IDataBuilder&lt;Entity&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> DataAccess dataAccess;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> EntityBuilder(DataAccess dataAccess)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.dataAccess = dataAccess;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Entity GetEntity(IDataRecord record)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> id = (<span style=\"COLOR: #2b91af\">Guid</span>)record[<span style=\"COLOR: #a31515\">\"Id\"</span>];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> Entity(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Lazy</span>.From(() =&gt; dataAccess.GetSubEntity(id)));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Of course, the repository implementation, the DataAccess class and the builder are all internal to the data access implementation. It can be in a separate Assembly or internal in a sub namespace of the main assembly depending on you module separation preferences.</p>\r\n<p>When using linq, you simply don't need the DataAccess class because you can query the DataContext directly. But you can use the same pattern.</p>\r\n<p><em>The main point is still that your Entity object knows strictly nothing about what's going on there.</em></p>","<p>In the <a href=\"http://www.thinkbeforecoding.com/post/2009/02/07/Lazy-load-and-persistence-ignorance\">\nprevious post</a>, I introduced a class to manage function injection for lazy\nloads to enable persistence ignorance.</p>\n<p><a href=\"http://www.marisic.net/\">Chris</a> was asking where the builder I\nwas talking about should be used, and I tumbled on a <a href=\"http://stackoverflow.com/questions/524075/lazy-loading-whats-the-best-approach/524138#524138\">\nStackOverflow question</a> asking how to make lazy loading without using\nclasses like Lazy&lt;T&gt;...</p>\n<p>I'll discuss the second part first.</p>\n<p>There is a good way to make lazy loading without using classes like that.\nYou can use proxies.</p>\n<p>There are two main ways to make transparent proxies</p>\n<ul>\n<li>by creating dynamically a derived class using Reflection.Emit</li>\n<li>by creating a transparent proxy</li>\n</ul>\n<p>Still there are some drawbacks with both approaches. For the first one, all\nyour members should be made virtual, for the second your class should inherit\nfrom MarshalByRefObject. In all case you should then take care not to mess up\nbetween proxies and underlying classes.</p>\n<p>The main critic to refuse to use Lazy&lt;T&gt; class is usually that it's\nnot a domain concept, and that it leaks persistence concern in the model.</p>\n<p>I reject those critics.</p>\n<p>Have you ever seen someone criticize List&lt;T&gt; or Dictionary&lt;,&gt;\nbecause it was not a domain concept ? <strong>We're writing OO code, and we can\nuse basic tooling to make our models expressive</strong>. IEnumerable&lt;T&gt;\nand Linq to objects are good examples of these useful tools.</p>\n<p>And I don't consider that Lazy&lt;T&gt; is a persistence concern. <strong>It\nexpresses that the relation between entities is a bit more loose than\nothers</strong>. There is nothing in the Lazy&lt;T&gt; signature that ties your\nentity to any persistence concept. You just provide a way to give the value of\nthe property when needed rather than at construction, but this choice comes\nfrom outside of your entity.</p>\n<p>And at least it becomes clearer than with derived proxies where the C#\nkeyword <strong>virtual</strong> is used to express something but tries to hide\nit in the same time.</p>\n<p>Â </p>\n<p>For Chris question, I use the builder in the repository.</p>\n<p>The repository is responsible for retrieving entities from the data store.\nThe reconstruction of objects is a bit different from the construction. This is\nunderlined in Evan's book in the chapter <em>Factories / Reconstituting Stored\nObjects.</em></p>\n<p>In my data access layer I use a IDataBuilder&lt;T&gt; interface that\nrepresents a service that can build an object of type T from a IDataRecord.\nThis is when I work directly with the ADO.Net and stored procedures.</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IDataBuilder</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  T\nBuild(IDataRecord record);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>I also use a class that encapsulate the access to the stored procedures (or\nqueries if you don't want to use stored procedures).</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">DataAccess</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> UniqueResult&lt;<span style=\"COLOR: #2b91af\">Entity</span>&gt; GetEntity(<span style=\"COLOR: #2b91af\">Guid</span> id);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> MultipleResult&lt;Entity&gt; GetEntities()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>UniqueResult&lt;T&gt; and MultipleResult&lt;T&gt; provides a methods that\ntake a builder to read data records :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">UniqueResult</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> T With(IDataBuilder&lt;T&gt; builder)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//...Â Â Â Â Â Â Â Â Â Â Â </span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">MultipleResult</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; With(IDataBuilder&lt;T&gt;\nbuilder)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//...Â Â Â Â Â Â Â Â Â Â Â </span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>In your repository implementation you can then use all this :</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">// The\nconcrete repository interface that belongs to the domain</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEntityRepository</span> : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;Entity&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  Entity\n<span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">Guid</span>\nid] { <span style=\"COLOR: blue\">get</span>;}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//.. other methods</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">// the\nimplementation that is not part of the domain</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">// an that\nis pesistance dependant.</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">EntityRepository</span> : <span style=\"COLOR: #2b91af\">IEntityRepository</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> DataAccess dataAccess;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">EntityBuilder</span>\nbuilder;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> EntityRepository(DataAccess dataAccess,\n<span style=\"COLOR: #2b91af\">EntityBuilder</span> builder)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.dataAccess = dataAccess;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.builder = builder;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;Entity&gt; GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> dataAccess.GetEntities().With(builder);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> GetEnumerator();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Entity <span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">Guid</span> id]</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\ndataAccess.GetEntity(id).With(builder); }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>The last part is in the implementation of the builder.</p>\n<div style=\"BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; FONT-SIZE: 10pt; BACKGROUND: #f8f8f8; BORDER-LEFT: #aaaaaa 1px solid; COLOR: black; BORDER-BOTTOM: #aaaaaa 1px solid; FONT-FAMILY: courier new\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">EntityBuilder</span> :\nIDataBuilder&lt;Entity&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> DataAccess dataAccess;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> EntityBuilder(DataAccess dataAccess)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.dataAccess = dataAccess;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Entity GetEntity(IDataRecord record)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> id = (<span style=\"COLOR: #2b91af\">Guid</span>)record[<span style=\"COLOR: #a31515\">&quot;Id&quot;</span>];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> Entity(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nid,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Lazy</span>.From(() =&gt;\ndataAccess.GetSubEntity(id)));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>Of course, the repository implementation, the DataAccess class and the\nbuilder are all internal to the data access implementation. It can be in a\nseparate Assembly or internal in a sub namespace of the main assembly depending\non you module separation preferences.</p>\n<p>When using linq, you simply don't need the DataAccess class because you can\nquery the DataContext directly. But you can use the same pattern.</p>\n<p><em>The main point is still that your Entity object knows strictly nothing\nabout what's going on there.</em></p>","","lazy loads and persistence ignorance part the previous post introduced class manage function injection for lazy loads enable persistence ignorance chris was asking where the builder was talking about should used and tumbled stackoverflow question asking how make lazy loading without using classes like lazy discuss the second part first there good way make lazy loading without using classes like that you can use proxies there are two main ways make transparent proxies creating dynamically derived class using reflection emit creating transparent proxy still there are some drawbacks with both approaches for the first one all your members should made virtual for the second your class should inherit from marshalbyrefobject all case you should then take care not mess between proxies and underlying classes the main critic refuse use lazy class usually that not domain concept and that leaks persistence concern the model reject those critics have you ever seen someone criticize list dictionary because was not domain concept writing code and can use basic tooling make our models expressive ienumerable and linq objects are good examples these useful tools and don consider that lazy persistence concern expresses that the relation between entities bit more loose than others there nothing the lazy signature that ties your entity any persistence concept you just provide way give the value the property when needed rather than construction but this choice comes from outside your entity and least becomes clearer than with derived proxies where the keyword virtual used express something but tries hide the same time for chris question use the builder the repository the repository responsible for retrieving entities from the data store the reconstruction objects bit different from the construction this underlined evan book the chapter factories reconstituting stored objects data access layer use idatabuilder interface that represents service that can build object type from idatarecord this when work directly with the ado net and stored procedures public interface idatabuilder build idatarecord record also use class that encapsulate the access the stored procedures queries you don want use stored procedures public class dataaccess public uniqueresult entity getentity guid public multipleresult entity getentities uniqueresult and multipleresult provides methods that take builder read data records public struct uniqueresult public with idatabuilder builder public struct multipleresult public ienumerable with idatabuilder builder your repository implementation you can then use all this the concrete repository interface that belongs the domain public interface ientityrepository ienumerable entity entity this guid get other methods the implementation that not part the domain that pesistance dependant internal class entityrepository ientityrepository private dataaccess dataaccess private entitybuilder builder public entityrepository dataaccess dataaccess entitybuilder builder this dataaccess dataaccess this builder builder public ienumerator entity getenumerator return dataaccess getentities with builder ienumerator ienumerable getenumerator return getenumerator public entity this guid get return dataaccess getentity with builder the last part the implementation the builder internal class entitybuilder idatabuilder entity private dataaccess dataaccess public entitybuilder dataaccess dataaccess this dataaccess dataaccess public entity getentity idatarecord record var guid record quot quot return new entity lazy from dataaccess getsubentity course the repository implementation the dataaccess class and the builder are all internal the data access implementation can separate assembly internal sub namespace the main assembly depending you module separation preferences when using linq you simply don need the dataaccess class because you can query the datacontext directly but you can use the same pattern the main point still that your entity object knows strictly nothing about what going there","a:1:{s:3:\"tag\";a:2:{i:0;s:10:\"Repository\";i:1;s:20:\"Domain Driven Design\";}}","1","0","1","1","7","0","0"
"328237","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","32119","2009-02-17 15:55:00","Europe/Paris","2009-02-17 14:55:15","2009-05-19 13:39:34","","post","xhtml","2009/02/17/Implement-Linq-to-Objects-in-CSharp-2","en","Implement Linq to Objects in C# 2.0","","","<p>Iâm still working mainly with Visual Studio 2005 at work, and I was really missing Linq to Objects features. And Iâm sure Iâm not the only one.</p>\r\n<p>There are <a href=\"http://code.google.com/p/backlinq/\">workarounds</a> when compiling C#2.0 code using Visual Studio 2008 since itâs using the C#3.0 compiler internally, but it wonât work in VS2005.</p>\r\n<p>&nbsp;</p>\r\n<h3>How does linq to objects work ?</h3>\r\n<p>Linq to Object works by chaining operations on the <strong>IEnumerable&lt;&gt;</strong> interface.</p>\r\n<p>When writing the following the following linq query statement</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> paperBackTitles = <span style=\"COLOR: blue\">from</span> book <span style=\"COLOR: blue\">in</span> books</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">where</span> book.PublicationYear == 2009</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">select</span> book.Title;</p>\r\n</div>\r\n<p>The compiler translates it to :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = books</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; .Where(book =&gt; book.PublicationYear == 2009)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; .Select(book =&gt; book.Title);</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The lambdas are used as simple delegates in Linq to Object using the following definitions :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> TResult <span style=\"COLOR: #2b91af\">Func</span>&lt;T,TResult&gt;(T arg);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> TResult <span style=\"COLOR: #2b91af\">Func</span>&lt;T1,T2,TResult&gt;(T1 arg1, T2 arg2);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">bool</span> <span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt;(T arg);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">void</span> <span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;(T arg);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">void</span> <span style=\"COLOR: #2b91af\">Action</span>&lt;T1,T2&gt;(T1 arg1, T2 arg2);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;<span style=\"COLOR: green\">//...</span></p>\r\n</div>\r\n<p>So the preceding code is equivalent to :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = books</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; .Where(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book){<span style=\"COLOR: blue\">return</span> book.PublicationYear == 2009;})</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; .Select(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book){<span style=\"COLOR: blue\">return</span> book.Title;});</p>\r\n</div>\r\n<p>But the <strong>IEnumerable&lt;&gt;</strong> interface doesnât provide those methods. These are actually extension methods defined in the <strong>Enumerable</strong> class.</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Enumerable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; Where&lt;T&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; Select&lt;T, TResult&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The translation is immediate :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.Select(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(books,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book) </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <span style=\"COLOR: blue\">return</span> book.PublicationYear == 2009; }),</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book) { <span style=\"COLOR: blue\">return</span> book.Title; });</p>\r\n</div>\r\n<p>Once weâre here, thereâs nothing that cannot be implemented in C#2.0.</p>\r\n<p>&nbsp;</p>\r\n<h3>What do we need ?</h3>\r\n<p>There is plenty of things in Linq to Object, and I prefer to say right now that we will not have the full integrated query syntax !</p>\r\n<p>Implementing the static Enumerable class is not very difficult, letâs provide a implementation for Where and Select :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Enumerable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; Where&lt;T&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (source == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">\"source\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (predicate == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">\"predicate\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> WhereIterator(source, predicate);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; WhereIterator&lt;T&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (T item <span style=\"COLOR: blue\">in</span> source)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (predicate(item))</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">yield</span> <span style=\"COLOR: blue\">return</span> item;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; Select&lt;T, TResult&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (source == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">\"source\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (projection == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">\"projection\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> SelectIterator(source, projection);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; SelectIterator&lt;T, TResult&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (T item <span style=\"COLOR: blue\">in</span> source)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">yield</span> <span style=\"COLOR: blue\">return</span> projection(item);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">}</p>\r\n</div>\r\n<p>You can notice that Iâm splitting the methods in a part that does argument check and another one that makes the actual iteration process. This is because the iterator code will only get called when actually iterating, and it will be really hard to find out why the code throws an exception at that moment. By performing argument checking in a <em>non-iterator</em> method, the exception is thrown at actual method call.</p>\r\n<p>&nbsp;</p>\r\n<p>Since C#2.0 doesnât support <strong>extension methods</strong> weâll have to find something so that the code doesnât look ugly as in the final translation above.</p>\r\n<p>&nbsp;</p>\r\n<h3>Simulating extension methods in C#2.0</h3>\r\n<p>Extension methods are just syntactic sugar and are simply converted to a static method call by the compiler :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; books.Where(predicate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: green\">// is translated to</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(books, predicate)</p>\r\n</div>\r\n<p>If we can wrap the books variable in a kind of C++ smart pointer providing the Where method, the trick is done.</p>\r\n<p>To do this, we will use a small struct that encapsulate the IEnumerable&lt;&gt; interface :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Enumerable(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.source = source;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;T&gt; GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> source.GetEnumerator();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> GetEnumerator();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt; Where(<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(source, predicate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;TResult&gt; Select&lt;TResult&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;TResult&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.Select(source, projection)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">}</p>\r\n</div>\r\n<p>The return type is Enumerable&lt;&gt; so that calls can be chained.</p>\r\n<p>&nbsp;</p>\r\n<p>We can had a small helper to make the smart pointer creation shorter :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Enumerable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> Enumerable&lt;T&gt; From&lt;T&gt;(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> Enumerable&lt;T&gt;(source);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">}</p>\r\n</div>\r\n<p>Now we can write :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Enumerable</span>.From(books)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; .Where(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book){<span style=\"COLOR: blue\">return</span> book.PublicationYear == 2009;})</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; .Select&lt;<span style=\"COLOR: blue\">string</span>&gt;(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book){<span style=\"COLOR: blue\">return</span> book.Title;});</p>\r\n</div>\r\n<p>We just have to extend the Enumerable class and Enumerable&lt;&gt; struct with more methods to get a full linq to object implementation in C# 2.0.</p>","<p>Iâm still working mainly with Visual Studio 2005 at work, and I was really\nmissing Linq to Objects features. And Iâm sure Iâm not the only one.</p>\n<p>There are <a href=\"http://code.google.com/p/backlinq/\">workarounds</a> when\ncompiling C#2.0 code using Visual Studio 2008 since itâs using the C#3.0\ncompiler internally, but it wonât work in VS2005.</p>\n<p>Â </p>\n<h3>How does linq to objects work ?</h3>\n<p>Linq to Object works by chaining operations on the\n<strong>IEnumerable&lt;&gt;</strong> interface.</p>\n<p>When writing the following the following linq query statement</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â  <span style=\"COLOR: blue\">var</span>\npaperBackTitles = <span style=\"COLOR: blue\">from</span> book <span style=\"COLOR: blue\">in</span> books</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">where</span> book.PublicationYear == 2009</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">select</span> book.Title;</p>\n</div>\n<p>The compiler translates it to :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = books</p>\n<p style=\"MARGIN: 0\">Â Â  .Where(book =&gt; book.PublicationYear ==\n2009)</p>\n<p style=\"MARGIN: 0\">Â Â  .Select(book =&gt; book.Title);</p>\n</div>\n<p>Â </p>\n<p>The lambdas are used as simple delegates in Linq to Object using the\nfollowing definitions :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> TResult <span style=\"COLOR: #2b91af\">Func</span>&lt;T,TResult&gt;(T arg);</p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> TResult <span style=\"COLOR: #2b91af\">Func</span>&lt;T1,T2,TResult&gt;(T1 arg1, T2 arg2);</p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">bool</span>\n<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt;(T arg);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">void</span>\n<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;(T arg);</p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">delegate</span> <span style=\"COLOR: blue\">void</span>\n<span style=\"COLOR: #2b91af\">Action</span>&lt;T1,T2&gt;(T1 arg1, T2 arg2);</p>\n<p style=\"MARGIN: 0\">Â <span style=\"COLOR: green\">//...</span></p>\n</div>\n<p>So the preceding code is equivalent to :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles = books</p>\n<p style=\"MARGIN: 0\">Â Â  .Where(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span>\nbook){<span style=\"COLOR: blue\">return</span> book.PublicationYear ==\n2009;})</p>\n<p style=\"MARGIN: 0\">Â Â  .Select(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span>\nbook){<span style=\"COLOR: blue\">return</span> book.Title;});</p>\n</div>\n<p>But the <strong>IEnumerable&lt;&gt;</strong> interface doesnât provide those\nmethods. These are actually extension methods defined in the\n<strong>Enumerable</strong> class.</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Enumerable</span></p>\n<p style=\"MARGIN: 0\">Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; Where&lt;T&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">this</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate);</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; Select&lt;T,\nTResult&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">this</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection);</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">Â  }</p>\n</div>\n<p>Â </p>\n<p>The translation is immediate :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles =</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.Select(</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(books,</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â  { <span style=\"COLOR: blue\">return</span> book.PublicationYear == 2009; }),</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span> book) { <span style=\"COLOR: blue\">return</span>\nbook.Title; });</p>\n</div>\n<p>Once weâre here, thereâs nothing that cannot be implemented in C#2.0.</p>\n<p>Â </p>\n<h3>What do we need ?</h3>\n<p>There is plenty of things in Linq to Object, and I prefer to say right now\nthat we will not have the full integrated query syntax !</p>\n<p>Implementing the static Enumerable class is not very difficult, letâs\nprovide a implementation for Where and Select :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Enumerable</span></p>\n<p style=\"MARGIN: 0\">Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; Where&lt;T&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\n<p style=\"MARGIN: 0\">Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (source == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">&quot;source&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (predicate == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">&quot;predicate&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> WhereIterator(source, predicate);</p>\n<p style=\"MARGIN: 0\">Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â  <span style=\"COLOR: blue\">private</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; WhereIterator&lt;T&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\n<p style=\"MARGIN: 0\">Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (T item <span style=\"COLOR: blue\">in</span>\nsource)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (predicate(item))</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">yield</span> <span style=\"COLOR: blue\">return</span>\nitem;</p>\n<p style=\"MARGIN: 0\">Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; Select&lt;T,\nTResult&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\n<p style=\"MARGIN: 0\">Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (source == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">&quot;source&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (projection == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentNullException</span>(<span style=\"COLOR: #a31515\">&quot;projection&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> SelectIterator(source, projection);</p>\n<p style=\"MARGIN: 0\">Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â  <span style=\"COLOR: blue\">private</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;TResult&gt; SelectIterator&lt;T,\nTResult&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\n<p style=\"MARGIN: 0\">Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (T item <span style=\"COLOR: blue\">in</span>\nsource)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">yield</span> <span style=\"COLOR: blue\">return</span>\nprojection(item);</p>\n<p style=\"MARGIN: 0\">Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">}</p>\n</div>\n<p>You can notice that Iâm splitting the methods in a part that does argument\ncheck and another one that makes the actual iteration process. This is because\nthe iterator code will only get called when actually iterating, and it will be\nreally hard to find out why the code throws an exception at that moment. By\nperforming argument checking in a <em>non-iterator</em> method, the exception\nis thrown at actual method call.</p>\n<p>Â </p>\n<p>Since C#2.0 doesnât support <strong>extension methods</strong> weâll have to\nfind something so that the code doesnât look ugly as in the final translation\nabove.</p>\n<p>Â </p>\n<h3>Simulating extension methods in C#2.0</h3>\n<p>Extension methods are just syntactic sugar and are simply converted to a\nstatic method call by the compiler :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  books.Where(predicate)</p>\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: green\">// is translated\nto</span></p>\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(books, predicate)</p>\n</div>\n<p>If we can wrap the books variable in a kind of C++ smart pointer providing\nthe Where method, the trick is done.</p>\n<p>To do this, we will use a small struct that encapsulate the\nIEnumerable&lt;&gt; interface :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">public</span> Enumerable(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.source = source;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;T&gt; GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> source.GetEnumerator();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> GetEnumerator();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt; Where(<span style=\"COLOR: #2b91af\">Predicate</span>&lt;T&gt; predicate)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;T&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.Where(source, predicate)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  );</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;TResult&gt; Select&lt;TResult&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Func</span>&lt;T, TResult&gt; projection)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Enumerable</span>&lt;TResult&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.Select(source, projection)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â  );</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">}</p>\n</div>\n<p>The return type is Enumerable&lt;&gt; so that calls can be chained.</p>\n<p>Â </p>\n<p>We can had a small helper to make the smart pointer creation shorter :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Enumerable</span></p>\n<p style=\"MARGIN: 0\">Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> Enumerable&lt;T&gt; From&lt;T&gt;(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;T&gt; source)</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span>\nEnumerable&lt;T&gt;(source);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">}</p>\n</div>\n<p>Now we can write :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">string</span>&gt; paperBackTitles =</p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: #2b91af\">Enumerable</span>.From(books)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  .Where(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span>\nbook){<span style=\"COLOR: blue\">return</span> book.PublicationYear ==\n2009;})</p>\n<p style=\"MARGIN: 0\">Â Â Â Â  .Select&lt;<span style=\"COLOR: blue\">string</span>&gt;(<span style=\"COLOR: blue\">delegate</span>(<span style=\"COLOR: #2b91af\">Book</span>\nbook){<span style=\"COLOR: blue\">return</span> book.Title;});</p>\n</div>\n<p>We just have to extend the Enumerable class and Enumerable&lt;&gt; struct\nwith more methods to get a full linq to object implementation in C# 2.0.</p>","","implement linq objects iâm still working mainly with visual studio 2005 work and was really missing linq objects features and iâm sure iâm not the only one there are workarounds when compiling code using visual studio 2008 since itâs using the compiler internally but wonât work vs2005 how does linq objects work linq object works chaining operations the ienumerable interface when writing the following the following linq query statement var paperbacktitles from book books where book publicationyear 2009 select book title the compiler translates ienumerable string paperbacktitles books where book book publicationyear 2009 select book book title the lambdas are used simple delegates linq object using the following definitions public delegate tresult func tresult arg public delegate tresult func tresult arg1 arg2 public delegate bool predicate arg public delegate void action arg public delegate void action arg1 arg2 the preceding code equivalent ienumerable string paperbacktitles books where delegate book book return book publicationyear 2009 select delegate book book return book title but the ienumerable interface doesnât provide those methods these are actually extension methods defined the enumerable class public static class enumerable public static ienumerable where this ienumerable source predicate predicate public static ienumerable tresult select tresult this ienumerable source func tresult projection the translation immediate ienumerable string paperbacktitles enumerable select enumerable where books delegate book book return book publicationyear 2009 delegate book book return book title once weâre here thereâs nothing that cannot implemented what need there plenty things linq object and prefer say right now that will not have the full integrated query syntax implementing the static enumerable class not very difficult letâs provide implementation for where and select public static class enumerable public static ienumerable where ienumerable source predicate predicate source null throw new argumentnullexception quot source quot predicate null throw new argumentnullexception quot predicate quot return whereiterator source predicate private static ienumerable whereiterator ienumerable source predicate predicate foreach item source predicate item yield return item public static ienumerable tresult select tresult ienumerable source func tresult projection source null throw new argumentnullexception quot source quot projection null throw new argumentnullexception quot projection quot return selectiterator source projection private static ienumerable tresult selectiterator tresult ienumerable source func tresult projection foreach item source yield return projection item you can notice that iâm splitting the methods part that does argument check and another one that makes the actual iteration process this because the iterator code will only get called when actually iterating and will really hard find out why the code throws exception that moment performing argument checking non iterator method the exception thrown actual method call since doesnât support extension methods weâll have find something that the code doesnât look ugly the final translation above simulating extension methods extension methods are just syntactic sugar and are simply converted static method call the compiler books where predicate translated enumerable where books predicate can wrap the books variable kind smart pointer providing the where method the trick done this will use small struct that encapsulate the ienumerable interface public struct enumerable ienumerable private readonly ienumerable source public enumerable ienumerable source this source source public ienumerator getenumerator return source getenumerator ienumerator ienumerable getenumerator return getenumerator public enumerable where predicate predicate return new enumerable enumerable where source predicate public enumerable tresult select tresult func tresult projection return new enumerable tresult enumerable select source projection the return type enumerable that calls can chained can had small helper make the smart pointer creation shorter public static class enumerable public static enumerable from ienumerable source return new enumerable source now can write ienumerable string paperbacktitles enumerable from books where delegate book book return book publicationyear 2009 select string delegate book book return book title just have extend the enumerable class and enumerable struct with more methods get full linq object implementation","a:1:{s:3:\"tag\";a:1:{i:0;s:4:\"Linq\";}}","1","1","1","1","9","0","0"
"329641","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2009-02-22 23:31:00","Europe/Paris","2009-02-22 22:31:05","2009-02-22 22:33:03","","post","xhtml","2009/02/22/Maintenance","en","Maintenance","","","<p>I've been moving the blog address from <a href=\"http://www.thinkbeforecoding.com/\">www.thinkbeforecoding.com</a> to&nbsp;<a href=\"\">thinkbeforecoding.com</a> and it can cause some temporary troubles with the feeds between 2009-02-22 and 2009-02-23.. all should be ok then.</p>\r\n<p>I don't know why Google MyBrand has changed the CNAME redirection inbetween...</p>","<p>I've been moving the blog address from <a href=\"http://www.thinkbeforecoding.com/\">www.thinkbeforecoding.com</a>\ntoÂ <a href=\"\">thinkbeforecoding.com</a> and it can cause some temporary\ntroubles with the feeds between 2009-02-22 and 2009-02-23.. all should be ok\nthen.</p>\n<p>I don't know why Google MyBrand has changed the CNAME redirection\ninbetween...</p>","","maintenance been moving the blog address from www thinkbeforecoding com thinkbeforecoding com and can cause some temporary troubles with the feeds between 2009 and 2009 all should then don know why google mybrand has changed the cname redirection inbetween","","1","0","1","1","0","0","0"
"329682","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2009-02-23 09:55:00","Europe/Paris","2009-02-23 08:55:26","2009-02-23 08:55:43","","post","xhtml","2009/02/23/Back-on-track","en","Back on track","","","<p>Everything should be back to normal now, the adresses of the feeds have not changed, so no there's no change for you.</p>","<p>Everything should be back to normal now, the adresses of the feeds have not\nchanged, so no there's no change for you.</p>","","back track everything should back normal now the adresses the feeds have not changed there change for you","","1","0","1","1","0","0","0"
"330082","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-02-24 15:57:00","Europe/Paris","2009-02-24 14:57:58","2009-03-06 16:36:40","","post","xhtml","2009/02/24/Domain-Driven-Design-Step-By-Step","en","Domain Driven Design Step By Step","","","<p>Casey Charlton is moving his <a href=\"http://devlicio.us/blogs/casey/archive/2009/02/21/ddd-living-in-the-enterprise.aspx\">DDD series</a> on a wiki site so that every body can put itâs personal touch.</p>\r\n<p>You can find it and participate at : <a title=\"http://dddstepbystep.com/\" href=\"http://dddstepbystep.com/\">http://dddstepbystep.com/</a></p>\r\n<p>Expect me to write there !</p>","<p>Casey Charlton is moving his <a href=\"http://devlicio.us/blogs/casey/archive/2009/02/21/ddd-living-in-the-enterprise.aspx\">\nDDD series</a> on a wiki site so that every body can put itâs personal\ntouch.</p>\n<p>You can find it and participate at : <a title=\"http://dddstepbystep.com/\" href=\"http://dddstepbystep.com/\">http://dddstepbystep.com/</a></p>\n<p>Expect me to write there !</p>","","domain driven design step step casey charlton moving his ddd series wiki site that every body can put itâs personal touch you can find and participate http dddstepbystep com expect write there","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","0","0"
"332903","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-03-04 16:01:00","Europe/Paris","2009-03-04 15:01:53","2009-05-19 13:40:27","","post","xhtml","2009/03/04/How-not-to-inject-services-in-entities","en","How *not* to inject services in entities","","","<p><img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; MARGIN: 0 0 0 5px; DISPLAY: inline; FLOAT: right; BORDER-TOP: 0; BORDER-RIGHT: 0\" title=\"syringe\" alt=\"syringe\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Hownottoinjectservicesinentities_BF72_syringe_3.jpg\" width=\"170\" height=\"244\" />Iâve seen lot of people asking where and how to inject services in entities. The services in question are often repositories by the wayâ¦ </p>\r\n<p>The response is simple : </p>\r\n<p>&nbsp;<strong>- DO NOT inject services in entities !</strong></p>\r\n<p>- Ok I see, youâre against dependency injection</p>\r\n<p><strong>- NO, I'm not against dependency injection, I use it a lot.</strong></p>\r\n<p>- You can still use a static service locatorâ¦</p>\r\n<p><strong>- I avoid service locator when I can, especially when the service locator must be staticâ¦</strong></p>\r\n<p><em>â So youâll get an anemic object model !</em></p>\r\n<p><strong>- I donât think so.</strong></p>\r\n<p>&nbsp;</p>\r\n<h3>Injecting services in entities is wrong</h3>\r\n<p>Youâll find me a bit presumptuous, but I say it again : <strong>Injecting services in entities is wrong</strong>.</p>\r\n<p>Nesting objects is not a problem from an OO point of view, but weâre talking about a special kind of objects, entities.</p>\r\n<p>&nbsp;</p>\r\n<p>Entities are all about their state management, and this state management can require several objects.</p>\r\n<ul>\r\n<li>Code infrastructure objects like lists or dictionary to handle collection of data, </li>\r\n<li>Object oriented constructs to leverage code maintenance techniques like strategies. </li>\r\n</ul>\r\n<p>Entities donât have to be classes with public setters and gettersâ¦ you should even avoid this to keep you entities in a consistent state.</p>\r\n<p>But there is no reason for an entity to keep a reference on a service, since itâs not part of its state.</p>\r\n<p>There are usually three situations in which people thinks they need it :</p>\r\n<ul>\r\n<li>Lazy loads </li>\r\n<li>Relations </li>\r\n<li>Behavior methods </li>\r\n</ul>\r\n<p>Letâs review each pointâ¦</p>\r\n<p>&nbsp;</p>\r\n<h4>Lazy loads</h4>\r\n<p>Sometimes, an entity property is heavy to load and is not required by all code paths. In this case, loading it upfront can lead to performance problems.</p>\r\n<p>The usual way to work it out is to hold a reference to a data access object or a repository and to load and cache the requested data on demand.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;<em>Using a data access layer object in the entity is clearly a break of persistence ignorance, but using a repository is not a better option.</em></p>\r\n<p>&nbsp;</p>\r\n<p>The repository is a way to abstract persistence in the model, but itâs still a persistence concern even if modeled in terms of domain terms.</p>\r\n<p>Iâve already posted about ways to solve this problem in <a href=\"http://www.thinkbeforecoding.com/post/2009/02/07/Lazy-load-and-persistence-ignorance\">Lazy load and persistence ignorance</a> and <a href=\"http://thinkbeforecoding.com/post/2009/02/08/Lazy-loads-and-persistence-ignorance-Part-2\">part 2</a>.</p>\r\n<p>&nbsp;</p>\r\n<h4>Relations</h4>\r\n<p>I was twitting yesterday with <a href=\"https://twitter.com/kbaley\">Kyle Baley</a> about the need to have an Event repository in the Users entity. He wanted to get the User Team for the current event. I think you donât need more context to understand the problem.</p>\r\n<p>The User did not know about the current event so it <em>needed</em> the Event repository to find it and find the corresponding team.</p>\r\n<p>But why does the User entity expose a CurrentTeam property if it doesnât know about Events ? Thereâs something missing here.</p>\r\n<p>The whole picture becomes clearer if you add a Participant entity that embodies the participation of a user to an Event, and no repository is needed anymore since you donât need a CurrentTeam property on User.</p>\r\n<p>&nbsp;<strong>Make relations clear instead of hiding it in repositories.</strong></p>\r\n<p>&nbsp;</p>\r\n<h4>Behavior methods</h4>\r\n<p>If I have mail message entity and I want a Send method on it ?</p>\r\n<p>Tiding your entity to the service that will use it is not conceptually satisfying. The server that will send the message is a medium and is not part of the entity itself.</p>\r\n<p>Itâs seems better to call server.Send(message).</p>\r\n<p>The problem is that you can end breaking the <strong>tell donât ask</strong> principle because the Send method will ask the message for each property value. And you can be tempted to put computations that should be in the message entity inside the Send method.</p>\r\n<p>&nbsp;</p>\r\n<p>Letâs call <strong>Double Dispatch</strong> to the rescue !</p>\r\n<ul>\r\n<li>Design a server interface presenting a Send method that take the parameters it need (title, recipients, message bodyâ¦) </li>\r\n<li>Add a SendThrough method to your entity that takes the server interface as parameter </li>\r\n<li>Implement SendTrhough so that it computes values to pass to the Send method </li>\r\n<li>Thatâs it. </li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>Here is a small sample implementation :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IMailService</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Send(<span style=\"COLOR: blue\">string</span> sender, <span style=\"COLOR: blue\">string</span> recipient, <span style=\"COLOR: blue\">string</span> subject, <span style=\"COLOR: blue\">string</span> body);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Message</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//...</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> SendThrough(<span style=\"COLOR: #2b91af\">IMailService</span> mailService)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">string</span> subject = isReply ? <span style=\"COLOR: #a31515\">\"Re : \"</span> + title : title;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mailService.Send(sender, recipient, subject, GetMessageBody(content));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The entity is not tied to the service before needed. So no need for injection.</p>\r\n<p>&nbsp;</p>\r\n<h3>Is injection useless ?</h3>\r\n<p>There is no problem to inject services with other services, and itâs even easier since services have no state, they only need their dependencies in constructor, and to my opinion itâs the cleanest injection mode.</p>\r\n<p>Usually domain services will need infrastructure services dependencies, and in this case a dependency injection framework can make things easier.</p>\r\n<p>Following the preceding advice, youâll never need to use your dependency injection framework as a service locator, and youâll never have to perform buildups on your entities, <em>and youâll feel much better</em>.</p>\r\n<p>&nbsp;</p>\r\n<h3>Whatâs your way to deal with it ?</h3>\r\n<p>For now Iâve always find a way to get rid of services inside entities, but I really would like to hear cases where youâre stuck with it to see if another way is possible, or cases where you think there is really a good reason to go this way.</p>","<p><img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; MARGIN: 0 0 0 5px; DISPLAY: inline; FLOAT: right; BORDER-TOP: 0; BORDER-RIGHT: 0\" title=\"syringe\" alt=\"syringe\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Hownottoinjectservicesinentities_BF72_syringe_3.jpg\" width=\"170\" height=\"244\" />Iâve seen lot of people asking where and how to\ninject services in entities. The services in question are often repositories by\nthe wayâ¦</p>\n<p>The response is simple :</p>\n<p>Â <strong>- DO NOT inject services in entities !</strong></p>\n<p>- Ok I see, youâre against dependency injection</p>\n<p><strong>- NO, I'm not against dependency injection, I use it a\nlot.</strong></p>\n<p>- You can still use a static service locatorâ¦</p>\n<p><strong>- I avoid service locator when I can, especially when the service\nlocator must be staticâ¦</strong></p>\n<p><em>â So youâll get an anemic object model !</em></p>\n<p><strong>- I donât think so.</strong></p>\n<p>Â </p>\n<h3>Injecting services in entities is wrong</h3>\n<p>Youâll find me a bit presumptuous, but I say it again : <strong>Injecting\nservices in entities is wrong</strong>.</p>\n<p>Nesting objects is not a problem from an OO point of view, but weâre talking\nabout a special kind of objects, entities.</p>\n<p>Â </p>\n<p>Entities are all about their state management, and this state management can\nrequire several objects.</p>\n<ul>\n<li>Code infrastructure objects like lists or dictionary to handle collection\nof data,</li>\n<li>Object oriented constructs to leverage code maintenance techniques like\nstrategies.</li>\n</ul>\n<p>Entities donât have to be classes with public setters and gettersâ¦ you\nshould even avoid this to keep you entities in a consistent state.</p>\n<p>But there is no reason for an entity to keep a reference on a service, since\nitâs not part of its state.</p>\n<p>There are usually three situations in which people thinks they need it :</p>\n<ul>\n<li>Lazy loads</li>\n<li>Relations</li>\n<li>Behavior methods</li>\n</ul>\n<p>Letâs review each pointâ¦</p>\n<p>Â </p>\n<h4>Lazy loads</h4>\n<p>Sometimes, an entity property is heavy to load and is not required by all\ncode paths. In this case, loading it upfront can lead to performance\nproblems.</p>\n<p>The usual way to work it out is to hold a reference to a data access object\nor a repository and to load and cache the requested data on demand.</p>\n<p>Â </p>\n<p>Â <em>Using a data access layer object in the entity is clearly a break\nof persistence ignorance, but using a repository is not a better\noption.</em></p>\n<p>Â </p>\n<p>The repository is a way to abstract persistence in the model, but itâs still\na persistence concern even if modeled in terms of domain terms.</p>\n<p>Iâve already posted about ways to solve this problem in <a href=\"http://www.thinkbeforecoding.com/post/2009/02/07/Lazy-load-and-persistence-ignorance\">\nLazy load and persistence ignorance</a> and <a href=\"http://thinkbeforecoding.com/post/2009/02/08/Lazy-loads-and-persistence-ignorance-Part-2\">\npart 2</a>.</p>\n<p>Â </p>\n<h4>Relations</h4>\n<p>I was twitting yesterday with <a href=\"https://twitter.com/kbaley\">Kyle\nBaley</a> about the need to have an Event repository in the Users entity. He\nwanted to get the User Team for the current event. I think you donât need more\ncontext to understand the problem.</p>\n<p>The User did not know about the current event so it <em>needed</em> the\nEvent repository to find it and find the corresponding team.</p>\n<p>But why does the User entity expose a CurrentTeam property if it doesnât\nknow about Events ? Thereâs something missing here.</p>\n<p>The whole picture becomes clearer if you add a Participant entity that\nembodies the participation of a user to an Event, and no repository is needed\nanymore since you donât need a CurrentTeam property on User.</p>\n<p>Â <strong>Make relations clear instead of hiding it in\nrepositories.</strong></p>\n<p>Â </p>\n<h4>Behavior methods</h4>\n<p>If I have mail message entity and I want a Send method on it ?</p>\n<p>Tiding your entity to the service that will use it is not conceptually\nsatisfying. The server that will send the message is a medium and is not part\nof the entity itself.</p>\n<p>Itâs seems better to call server.Send(message).</p>\n<p>The problem is that you can end breaking the <strong>tell donât ask</strong>\nprinciple because the Send method will ask the message for each property value.\nAnd you can be tempted to put computations that should be in the message entity\ninside the Send method.</p>\n<p>Â </p>\n<p>Letâs call <strong>Double Dispatch</strong> to the rescue !</p>\n<ul>\n<li>Design a server interface presenting a Send method that take the parameters\nit need (title, recipients, message bodyâ¦)</li>\n<li>Add a SendThrough method to your entity that takes the server interface as\nparameter</li>\n<li>Implement SendTrhough so that it computes values to pass to the Send\nmethod</li>\n<li>Thatâs it.</li>\n</ul>\n<p>Â </p>\n<p>Here is a small sample implementation :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IMailService</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Send(<span style=\"COLOR: blue\">string</span> sender,\n<span style=\"COLOR: blue\">string</span> recipient, <span style=\"COLOR: blue\">string</span> subject, <span style=\"COLOR: blue\">string</span>\nbody);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Message</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//...</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nSendThrough(<span style=\"COLOR: #2b91af\">IMailService</span> mailService)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">string</span> subject = isReply ? <span style=\"COLOR: #a31515\">&quot;Re : &quot;</span> + title : title;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nmailService.Send(sender, recipient, subject, GetMessageBody(content));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The entity is not tied to the service before needed. So no need for\ninjection.</p>\n<p>Â </p>\n<h3>Is injection useless ?</h3>\n<p>There is no problem to inject services with other services, and itâs even\neasier since services have no state, they only need their dependencies in\nconstructor, and to my opinion itâs the cleanest injection mode.</p>\n<p>Usually domain services will need infrastructure services dependencies, and\nin this case a dependency injection framework can make things easier.</p>\n<p>Following the preceding advice, youâll never need to use your dependency\ninjection framework as a service locator, and youâll never have to perform\nbuildups on your entities, <em>and youâll feel much better</em>.</p>\n<p>Â </p>\n<h3>Whatâs your way to deal with it ?</h3>\n<p>For now Iâve always find a way to get rid of services inside entities, but I\nreally would like to hear cases where youâre stuck with it to see if another\nway is possible, or cases where you think there is really a good reason to go\nthis way.</p>","","how not inject services entities iâve seen lot people asking where and how inject services entities the services question are often repositories the wayâ¦ the response simple not inject services entities see youâre against dependency injection not against dependency injection use lot you can still use static service locatorâ¦ avoid service locator when can especially when the service locator must staticâ¦ youâll get anemic object model donât think injecting services entities wrong youâll find bit presumptuous but say again injecting services entities wrong nesting objects not problem from point view but weâre talking about special kind objects entities entities are all about their state management and this state management can require several objects code infrastructure objects like lists dictionary handle collection data object oriented constructs leverage code maintenance techniques like strategies entities donât have classes with public setters and gettersâ¦ you should even avoid this keep you entities consistent state but there reason for entity keep reference service since itâs not part its state there are usually three situations which people thinks they need lazy loads relations behavior methods letâs review each pointâ¦ lazy loads sometimes entity property heavy load and not required all code paths this case loading upfront can lead performance problems the usual way work out hold reference data access object repository and load and cache the requested data demand using data access layer object the entity clearly break persistence ignorance but using repository not better option the repository way abstract persistence the model but itâs still persistence concern even modeled terms domain terms iâve already posted about ways solve this problem lazy load and persistence ignorance and part relations was twitting yesterday with kyle baley about the need have event repository the users entity wanted get the user team for the current event think you donât need more context understand the problem the user did not know about the current event needed the event repository find and find the corresponding team but why does the user entity expose currentteam property doesnât know about events thereâs something missing here the whole picture becomes clearer you add participant entity that embodies the participation user event and repository needed anymore since you donât need currentteam property user make relations clear instead hiding repositories behavior methods have mail message entity and want send method tiding your entity the service that will use not conceptually satisfying the server that will send the message medium and not part the entity itself itâs seems better call server send message the problem that you can end breaking the tell donât ask principle because the send method will ask the message for each property value and you can tempted put computations that should the message entity inside the send method letâs call double dispatch the rescue design server interface presenting send method that take the parameters need title recipients message bodyâ¦ add sendthrough method your entity that takes the server interface parameter implement sendtrhough that computes values pass the send method thatâs here small sample implementation public interface imailservice void send string sender string recipient string subject string body public class message public void sendthrough imailservice mailservice string subject isreply quot quot title title mailservice send sender recipient subject getmessagebody content the entity not tied the service before needed need for injection injection useless there problem inject services with other services and itâs even easier since services have state they only need their dependencies constructor and opinion itâs the cleanest injection mode usually domain services will need infrastructure services dependencies and this case dependency injection framework can make things easier following the preceding advice youâll never need use your dependency injection framework service locator and youâll never have perform buildups your entities and youâll feel much better whatâs your way deal with for now iâve always find way get rid services inside entities but really would like hear cases where youâre stuck with see another way possible cases where you think there really good reason this way","a:1:{s:3:\"tag\";a:2:{i:0;s:10:\"Repository\";i:1;s:20:\"Domain Driven Design\";}}","1","1","1","1","25","0","0"
"336213","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-03-12 16:21:00","Europe/Paris","2009-03-12 15:21:23","2009-03-12 15:26:43","","post","xhtml","2009/03/12/QCon-London-2009","en","QCon London 2009","","","<p>Today, there's a full&nbsp;<a href=\"http://qconlondon.com/\">QCon London</a> track&nbsp;<a href=\"http://qconlondon.com/london-2009/tracks/show_track.jsp?trackOID=228\">dedicated to&nbsp;Domain Driven Design</a>.</p>\r\n<p>Eric Evans exposed this morning <em>what he's learned about DDD since the book</em>, and lots of interesting things.</p>\r\n<p>Gojko Adzic&nbsp;posted <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\">a report of Evans' talk</a>.</p>\r\n<p>The whole slides should be available on QCon site shortly.</p>\r\n<p>You can also follow in on twitter through&nbsp;<a href=\"https://twitter.com/rbanks54\">Richard Banks</a> reports.</p>\r\n<p>&nbsp;</p>","<p>Today, there's a fullÂ <a href=\"http://qconlondon.com/\">QCon London</a>\ntrackÂ <a href=\"http://qconlondon.com/london-2009/tracks/show_track.jsp?trackOID=228\">dedicated\ntoÂ Domain Driven Design</a>.</p>\n<p>Eric Evans exposed this morning <em>what he's learned about DDD since the\nbook</em>, and lots of interesting things.</p>\n<p>Gojko AdzicÂ posted <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\">\na report of Evans' talk</a>.</p>\n<p>The whole slides should be available on QCon site shortly.</p>\n<p>You can also follow in on twitter throughÂ <a href=\"https://twitter.com/rbanks54\">Richard Banks</a> reports.</p>\n<p>Â </p>","","qcon london 2009 today there full qcon london track dedicated domain driven design eric evans exposed this morning what learned about ddd since the book and lots interesting things gojko adzic posted report evans talk the whole slides should available qcon site shortly you can also follow twitter through richard banks reports","a:1:{s:3:\"tag\";a:3:{i:0;s:4:\"QCon\";i:1;s:5:\"Evans\";i:2;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","0","0"
"391703","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-04-08 14:10:00","Europe/Paris","2009-04-08 12:10:43","2009-05-19 13:39:59","","post","xhtml","2009/04/08/Back-on-Repositories-and-Paging-Introducing-reporting","en","Back on Repositories and Paging. Introducing reporting.","","","<p>I had quite a lot of comments on my previous post on <a href=\"http://www.thinkbeforecoding.com/post/2009/01/19/Repositories-and-IQueryable-the-paging-case\" target=\"_blank\">repositories and paging</a>, and thereâs a lot of people coming from google looking for answersâ¦ Itâs sign that thereâs no good response to this issue now.</p>\r\n<p><em>The problem was how paging (a presentation concern) fits into a repository that should have only domain concernsâ¦</em></p>\r\n<p>And the short answers isâ¦ <strong>It doesnât fit !</strong></p>\r\n<p>It doesnât mean you should forget everything I told you before but thereâs a vision change.</p>\r\n<h3>Thereâs something missing in DDD bookâ¦</h3>\r\n<p>but present in current discussion about DDD. The book provides good building blocks (entities, repositoryâ¦) but Evans says himself <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\" target=\"_blank\">it has been a bit over emphasized</a>. The book is mainly about maintaining and mutating your domain state, not about itâs presentation.</p>\r\n<h3>CQS to the rescue</h3>\r\n<p>The CQS (Command Query Separation) principle proposes to decouple Commands that change the state of the system, from Queries that ask the state of the system.</p>\r\n<p>The repository lies on the Command side, thatâs why :</p>\r\n<ul>\r\n<li>It should be specialized to express only mutations that are possible for the system</li>\r\n<li>It should not expose presentation concerns like paging</li>\r\n</ul>\r\n<p>But whatâs on the Query side ?</p>\r\n<p>The query side should be far more supple and provide tools to query the state of the domain. It can even be implemented with IQueryable interfaces to provide that flexibility. Asking for pages in this area is natural since you just want to query a part of the domain state.</p>\r\n<p>The goal of all this is to report the state of the system. So Reporting is a good name here.</p>\r\n<p>You can read <a href=\"http://codebetter.com/blogs/gregyoung/default.aspx\" target=\"_blank\">Greg Young</a>âs <a href=\"http://codebetter.com/blogs/gregyoung/archive/2008/04/09/dddd-1-when-to-message.aspx\" target=\"_blank\">DDDD posts</a> to see where CQS can lead : Write only domain model (Commands) and rich scalable distributed Query mechanisms using messaging.</p>\r\n<p>Thereâs no clear guidance yet in this field but Iâm still investigating. The flexibility of a reporting service in the domain layer is still a huge gain to understand where each concept fits.</p>","<p>I had quite a lot of comments on my previous post on <a href=\"http://www.thinkbeforecoding.com/post/2009/01/19/Repositories-and-IQueryable-the-paging-case\" target=\"_blank\">repositories and paging</a>, and thereâs a lot of people coming\nfrom google looking for answersâ¦ Itâs sign that thereâs no good response to\nthis issue now.</p>\n<p><em>The problem was how paging (a presentation concern) fits into a\nrepository that should have only domain concernsâ¦</em></p>\n<p>And the short answers isâ¦ <strong>It doesnât fit !</strong></p>\n<p>It doesnât mean you should forget everything I told you before but thereâs a\nvision change.</p>\n<h3>Thereâs something missing in DDD bookâ¦</h3>\n<p>but present in current discussion about DDD. The book provides good building\nblocks (entities, repositoryâ¦) but Evans says himself <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\" target=\"_blank\">it has been a bit over emphasized</a>. The book is mainly about\nmaintaining and mutating your domain state, not about itâs presentation.</p>\n<h3>CQS to the rescue</h3>\n<p>The CQS (Command Query Separation) principle proposes to decouple Commands\nthat change the state of the system, from Queries that ask the state of the\nsystem.</p>\n<p>The repository lies on the Command side, thatâs why :</p>\n<ul>\n<li>It should be specialized to express only mutations that are possible for\nthe system</li>\n<li>It should not expose presentation concerns like paging</li>\n</ul>\n<p>But whatâs on the Query side ?</p>\n<p>The query side should be far more supple and provide tools to query the\nstate of the domain. It can even be implemented with IQueryable interfaces to\nprovide that flexibility. Asking for pages in this area is natural since you\njust want to query a part of the domain state.</p>\n<p>The goal of all this is to report the state of the system. So Reporting is a\ngood name here.</p>\n<p>You can read <a href=\"http://codebetter.com/blogs/gregyoung/default.aspx\" target=\"_blank\">Greg Young</a>âs <a href=\"http://codebetter.com/blogs/gregyoung/archive/2008/04/09/dddd-1-when-to-message.aspx\" target=\"_blank\">DDDD posts</a> to see where CQS can lead : Write only domain\nmodel (Commands) and rich scalable distributed Query mechanisms using\nmessaging.</p>\n<p>Thereâs no clear guidance yet in this field but Iâm still investigating. The\nflexibility of a reporting service in the domain layer is still a huge gain to\nunderstand where each concept fits.</p>","","back repositories and paging introducing reporting had quite lot comments previous post repositories and paging and thereâs lot people coming from google looking for answersâ¦ itâs sign that thereâs good response this issue now the problem was how paging presentation concern fits into repository that should have only domain concernsâ¦ and the short answers isâ¦ doesnât fit doesnât mean you should forget everything told you before but thereâs vision change thereâs something missing ddd bookâ¦ but present current discussion about ddd the book provides good building blocks entities repositoryâ¦ but evans says himself has been bit over emphasized the book mainly about maintaining and mutating your domain state not about itâs presentation cqs the rescue the cqs command query separation principle proposes decouple commands that change the state the system from queries that ask the state the system the repository lies the command side thatâs why should specialized express only mutations that are possible for the system should not expose presentation concerns like paging but whatâs the query side the query side should far more supple and provide tools query the state the domain can even implemented with iqueryable interfaces provide that flexibility asking for pages this area natural since you just want query part the domain state the goal all this report the state the system reporting good name here you can read greg youngâs dddd posts see where cqs can lead write only domain model commands and rich scalable distributed query mechanisms using messaging thereâs clear guidance yet this field but iâm still investigating the flexibility reporting service the domain layer still huge gain understand where each concept fits","a:1:{s:3:\"tag\";a:5:{i:0;s:6:\"Paging\";i:1;s:9:\"Reporting\";i:2;s:10:\"Repository\";i:3;s:5:\"Evans\";i:4;s:20:\"Domain Driven Design\";}}","1","1","1","1","10","0","0"
"395293","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","33597","2009-04-18 10:22:00","Europe/Paris","2009-04-18 08:22:08","2009-04-18 08:24:31","","post","xhtml","2009/04/18/TDD-becomes-Design-By-Example","en","TDD becomes Design By Example","","","<p>Just have a look to <a href=\"http://bradwilson.typepad.com/blog/\" target=\"_blank\">Brad Wilson</a>âs post <a title=\"http://bradwilson.typepad.com/blog/2009/04/its-not-tdd-its-design-by-example.html\" href=\"http://bradwilson.typepad.com/blog/2009/04/its-not-tdd-its-design-by-example.html\" target=\"_blank\">It's Not TDD, It's Design By Example</a>.</p>\r\n<blockquote>\r\n<p>What the name Test Driven Development has going against it is that it doesnât properly express the purpose of TDD; namely, that it is a process designed to help you drive and iterate the design of your implementation at the unit level.</p>\r\n<p>[â¦]</p>\r\n<p>Frustrated by the misunderstanding of the purpose of TDD, my friends and I (<a href=\"http://www.peterprovost.org/\">Peter</a>, <a href=\"http://jamesnewkirk.typepad.com/\">Jim</a>, <a href=\"http://www.agileprogrammer.com/oneagilecoder/\">Brian</a>, <a href=\"http://scottdensmore.typepad.com/\">Scott</a>, and many others, all agile practitioners and coaches) decided to start calling it Test Driven Design. A small change, but it starts to focus on the fact that the process is about <em>design</em>. Unfortunately, that âtestâ word baggage is still in there, so our next iteration was then Example Driven Design. This worked well too, but âEDDâ and âTDDâ were still too close together and confusing.</p>\r\n<p>The final iteration ended up being Design By Example (DbE). Now when I talk about TDD, I always call it Design By Example, and explain why we like this name better than TDD. Where TDD(esign) or EDD failed to get traction, people really seem to resonate to Design By Example.</p>\r\n</blockquote>\r\n<p>I think we can all gain clarity by using Design by Example instead on TDD. I adopt it from now on.</p>\r\n<p>We still have to find disambiguation for highly overloaded terms like <em>Service</em> and <em>Repository</em>â¦&nbsp; </p>","<p>Just have a look to <a href=\"http://bradwilson.typepad.com/blog/\" target=\"_blank\">Brad Wilson</a>âs post <a title=\"http://bradwilson.typepad.com/blog/2009/04/its-not-tdd-its-design-by-example.html\" href=\"http://bradwilson.typepad.com/blog/2009/04/its-not-tdd-its-design-by-example.html\" target=\"_blank\">It's Not TDD, It's Design By Example</a>.</p>\n<blockquote>\n<p>What the name Test Driven Development has going against it is that it\ndoesnât properly express the purpose of TDD; namely, that it is a process\ndesigned to help you drive and iterate the design of your implementation at the\nunit level.</p>\n<p>[â¦]</p>\n<p>Frustrated by the misunderstanding of the purpose of TDD, my friends and I\n(<a href=\"http://www.peterprovost.org/\">Peter</a>, <a href=\"http://jamesnewkirk.typepad.com/\">Jim</a>, <a href=\"http://www.agileprogrammer.com/oneagilecoder/\">Brian</a>, <a href=\"http://scottdensmore.typepad.com/\">Scott</a>, and many others, all agile\npractitioners and coaches) decided to start calling it Test Driven Design. A\nsmall change, but it starts to focus on the fact that the process is about\n<em>design</em>. Unfortunately, that âtestâ word baggage is still in there, so\nour next iteration was then Example Driven Design. This worked well too, but\nâEDDâ and âTDDâ were still too close together and confusing.</p>\n<p>The final iteration ended up being Design By Example (DbE). Now when I talk\nabout TDD, I always call it Design By Example, and explain why we like this\nname better than TDD. Where TDD(esign) or EDD failed to get traction, people\nreally seem to resonate to Design By Example.</p>\n</blockquote>\n<p>I think we can all gain clarity by using Design by Example instead on TDD. I\nadopt it from now on.</p>\n<p>We still have to find disambiguation for highly overloaded terms like\n<em>Service</em> and <em>Repository</em>â¦Â </p>","","tdd becomes design example just have look brad wilsonâs post not tdd design example what the name test driven development has going against that doesnât properly express the purpose tdd namely that process designed help you drive and iterate the design your implementation the unit level frustrated the misunderstanding the purpose tdd friends and peter jim brian scott and many others all agile practitioners and coaches decided start calling test driven design small change but starts focus the fact that the process about design unfortunately that âtestâ word baggage still there our next iteration was then example driven design this worked well too but âeddâ and âtddâ were still too close together and confusing the final iteration ended being design example dbe now when talk about tdd always call design example and explain why like this name better than tdd where tdd esign edd failed get traction people really seem resonate design example think can all gain clarity using design example instead tdd adopt from now still have find disambiguation for highly overloaded terms like service and repositoryâ¦","a:1:{s:3:\"tag\";a:3:{i:0;s:5:\"Agile\";i:1;s:17:\"Design by Example\";i:2;s:3:\"TDD\";}}","1","0","1","1","0","0","0"
"398045","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","33883","2009-04-28 23:04:00","Europe/Paris","2009-04-28 21:04:53","2009-04-29 14:17:14","","post","xhtml","2009/04/28/Geek-balancehellip-or-not","en","Geek balance... or not !","","","<p>I moved to my new house recently, and I was working last week end on the new kitchen tiled splashback. Scott Hanselman would say itâs a good way to <a href=\"http://www.hanselman.com/blog/PaintFenceCutWoodPullWeedPlantTreeFindingGeekBalanceOutsideMyComfortZone.aspx\" target=\"_blank\">find geek balance outside my comfort zone</a>â¦</p>  <p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Geekbalanceornot_14486_DSC00061.jpg\"><img style=\"border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto\" title=\"DSC00061\" border=\"0\" alt=\"DSC00061\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Geekbalanceornot_14486_DSC00061_thumb.jpg\" width=\"537\" height=\"408\" /></a></p>  <p>But did I really put aside the geek in me ? Not really if you watch carefullyâ¦</p>  <p>Can you find why ?</p>  <p>Soon a picture of the full resultâ¦</p>","<p>I moved to my new house recently, and I was working last week end on the new\nkitchen tiled splashback. Scott Hanselman would say itâs a good way to <a href=\"http://www.hanselman.com/blog/PaintFenceCutWoodPullWeedPlantTreeFindingGeekBalanceOutsideMyComfortZone.aspx\" target=\"_blank\">find geek balance outside my comfort zone</a>â¦</p>\n<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Geekbalanceornot_14486_DSC00061.jpg\">\n<img style=\"border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto\" title=\"DSC00061\" border=\"0\" alt=\"DSC00061\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Geekbalanceornot_14486_DSC00061_thumb.jpg\" width=\"537\" height=\"408\" /></a></p>\n<p>But did I really put aside the geek in me ? Not really if you watch\ncarefullyâ¦</p>\n<p>Can you find why ?</p>\n<p>Soon a picture of the full resultâ¦</p>","","geek balance not moved new house recently and was working last week end the new kitchen tiled splashback scott hanselman would say itâs good way find geek balance outside comfort zoneâ¦ but did really put aside the geek not really you watch carefullyâ¦ can you find why soon picture the full resultâ¦","a:1:{s:3:\"tag\";a:2:{i:0;s:4:\"Geek\";i:1;s:8:\"Personal\";}}","1","0","1","1","2","0","0"
"398049","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-04-28 23:34:00","Europe/Paris","2009-04-28 21:34:37","2009-04-28 21:35:47","","post","xhtml","2009/04/28/Strategic-Design","en","Strategic Design","","","<p>I was looking yesterday at <a href=\"http://www.oredev.org/topmenu/video/ddd/ericevans.4.5a2d30d411ee6ffd28880002256.html\" target=\"_blank\">Eric Evansâ talk</a> at the Ãredev conference last November.</p>\r\n<p>You really should see it to understand better <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\" target=\"_blank\">one of the most important part of the DDD book</a> that is difficult to grasp on first reading.</p>\r\n<p>Iâm currently working on a small company that had a problem with scaling their system. The existing system was working correctly but was going to stall in both performance and evolution perspectives.</p>\r\n<p>When we arrived, the plan of the preceding head of development was :</p>\r\n<p><em>âWe need to restart from scratch, letâs specify everything, then code a clean version 2.0 in two years, and switch the legacy system off.â</em></p>\r\n<p>Of course it was expected to fail.</p>\r\n<p>And even if it succeeded, after two years, they would have got the same software that two years before. </p>\r\n<p>It could be cleaner, but who cares ?</p>\r\n<p>When youâve lost two precious evolution years, for a promising startup, <strong>count it as dog years</strong>.</p>\r\n<p>When we took control of the situation we planned the following :</p>\r\n<ul>\r\n<li>Extract the core business value of the software.</li>\r\n<li>Spot where you need new features.</li>\r\n<li>Develop new features as if it was in a clean environment.</li>\r\n<li>Develop anti corruption layers to hide the legacy system behind clean interfaces.</li>\r\n</ul>\r\n<p>This way <strong>you start to work on new business value now</strong>, you make the model cleaner over time, and you have benefits of the working legacy system instantly.</p>\r\n<p><strong>Donât waste your time recoding what is already working. </strong></p>\r\n<p><strong>Act to add value to your business.This is where your craft should go.</strong></p>","<p>I was looking yesterday at <a href=\"http://www.oredev.org/topmenu/video/ddd/ericevans.4.5a2d30d411ee6ffd28880002256.html\" target=\"_blank\">Eric Evansâ talk</a> at the Ãredev conference last\nNovember.</p>\n<p>You really should see it to understand better <a href=\"http://gojko.net/2009/03/12/qcon-london-2009-eric-evans-what-ive-learned-about-ddd-since-the-book/\" target=\"_blank\">one of the most important part of the DDD book</a> that is\ndifficult to grasp on first reading.</p>\n<p>Iâm currently working on a small company that had a problem with scaling\ntheir system. The existing system was working correctly but was going to stall\nin both performance and evolution perspectives.</p>\n<p>When we arrived, the plan of the preceding head of development was :</p>\n<p><em>âWe need to restart from scratch, letâs specify everything, then code a\nclean version 2.0 in two years, and switch the legacy system off.â</em></p>\n<p>Of course it was expected to fail.</p>\n<p>And even if it succeeded, after two years, they would have got the same\nsoftware that two years before.</p>\n<p>It could be cleaner, but who cares ?</p>\n<p>When youâve lost two precious evolution years, for a promising startup,\n<strong>count it as dog years</strong>.</p>\n<p>When we took control of the situation we planned the following :</p>\n<ul>\n<li>Extract the core business value of the software.</li>\n<li>Spot where you need new features.</li>\n<li>Develop new features as if it was in a clean environment.</li>\n<li>Develop anti corruption layers to hide the legacy system behind clean\ninterfaces.</li>\n</ul>\n<p>This way <strong>you start to work on new business value now</strong>, you\nmake the model cleaner over time, and you have benefits of the working legacy\nsystem instantly.</p>\n<p><strong>Donât waste your time recoding what is already working.</strong></p>\n<p><strong>Act to add value to your business.This is where your craft should\ngo.</strong></p>","","strategic design was looking yesterday eric evansâ talk the Ã¸redev conference last november you really should see understand better one the most important part the ddd book that difficult grasp first reading iâm currently working small company that had problem with scaling their system the existing system was working correctly but was going stall both performance and evolution perspectives when arrived the plan the preceding head development was âwe need restart from scratch letâs specify everything then code clean version two years and switch the legacy system off course was expected fail and even succeeded after two years they would have got the same software that two years before could cleaner but who cares when youâve lost two precious evolution years for promising startup count dog years when took control the situation planned the following extract the core business value the software spot where you need new features develop new features was clean environment develop anti corruption layers hide the legacy system behind clean interfaces this way you start work new business value now you make the model cleaner over time and you have benefits the working legacy system instantly donât waste your time recoding what already working act add value your business this where your craft should","a:1:{s:3:\"tag\";a:5:{i:0;s:16:\"Strategic Design\";i:1;s:7:\"Ãredev\";i:2;s:4:\"QCon\";i:3;s:5:\"Evans\";i:4;s:20:\"Domain Driven Design\";}}","1","0","1","1","0","1","0"
"400305","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2009-05-07 12:24:00","Europe/Paris","2009-05-07 10:24:17","2009-05-07 10:28:19","","post","xhtml","2009/05/07/Decimal-what-are-those-trailing-zeros","en","Decimal, what are those trailing zeros ?","","","<p>Yesterday, I stumbled on something I didnât expect at allâ¦</p>  <p>An exception appeared while testing my code that I had been carefully writing following <a href=\"http://thinkbeforecoding.com/post/2009/04/18/TDD-becomes-Design-By-Example\">Design By Example</a>..</p>  <p>Looking in my debugger my decimal two variables had value 4M.</p>  <p>But calling <strong>ToString</strong> on it led to different results : â4â and â4.00ââ¦</p>  <p>What the heck ?! How come ?</p>  <p>&#160;</p>  <h1></h1>  <h3>I should have known this</h3>  <p>Yes, <a href=\"http://msdn.microsoft.com/en-us/library/system.decimal.aspx\" target=\"_blank\">the MSDN state it explicitly</a> :</p>  <blockquote>   <p>The scaling factor also preserves any trailing zeroes in a Decimal number. Trailing zeroes do not affect the value of a Decimal number in arithmetic or comparison operations. However, trailing zeroes can be revealed by the <a href=\"http://msdn.microsoft.com/en-us/library/system.decimal.tostring.aspx\">ToString</a> method if an appropriate format string is applied.</p> </blockquote>  <p>And I did not know that, did you ?</p>  <p>&#160;</p>  <h3>Try it yourself</h3>  <p>you can try it yourself :</p>  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9992f2a4-f054-4b99-aa5a-2009cd1b5a2a\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">Console.WriteLine(1m);      // 1\nConsole.WriteLine(1.0m);    // 1.0\nConsole.WriteLine(1.00m);   // 1.00\n\nConsole.WriteLine(1m == 1.0m); // true\nConsole.WriteLine(1m.ToString() == 1.0m.ToString()); // false\n\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<p>The decimal.Parse function also preserve trailing zeros :</p>\n\n<p>\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c216e0d0-6df8-4c97-b5ae-6319623cc96b\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">Console.WriteLine(decimal.Parse(&quot;1.0&quot;, CultureInfo.InvariantCulture)); // 1.0\nConsole.WriteLine(decimal.Parse(&quot;1.000&quot;, CultureInfo.InvariantCulture)); // 1.000\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n</p>\n\n<p>&#160;</p>\n\n<p></p>\n\n<h3>The explanation</h3>\n\n<p>The decimal type internally represents values using an 96 bit integer and a negative power of 10 (between 0 and 28).</p>\n\n<p>Those values are simply internally stored like this :</p>\n\n<p>1.0 â&gt; 10 * 10^-1 \n  <br />1.000 â&gt; 1000 * 10^-3</p>\n\n<p>You can check it using the <strong>decimal.GetBits</strong> method.</p>\n\n<p>The trailing zeros are even maintained in arithmetical operations :</p>\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b6b85237-45bd-4d22-8129-3201466cd015\" class=\"wlWriterEditableSmartContent\"><pre style=\"background-color:#FFFFFF;white-space:-moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; word-wrap: break-word;overflow: auto;\"><span style=\"color: #000000;\">Console.WriteLine(</span><span style=\"color: #800080;\">2.0m</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">3.00m</span><span style=\"color: #000000;\">);  </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 6.000</span></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<p>But are handled correctly by the equality and comparison methods :</p>\n\n<p>\n  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:80af6e7a-9f58-4202-8550-8c720a8d78c2\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">Console.WriteLine(1m == 1.0m);  // true\nConsole.WriteLine(1m.GetHashCode() == 1.0m.GetHashCode()); // true\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n</p>\n\n<p>&#160;</p>\n\n<p></p>\n\n<h3>Do you know other secrets like this ?</h3>\n\n<p>Of course, my unit tests did not test case I didnât expect to happen !</p>\n\n<p>But, Hey ! <strong>If you knew it, you should have told me before</strong> !</p>\n\n<p><em>What secret feature/behavior in the .Net framework or in the C# language do you know ?</em></p>","<p>Yesterday, I stumbled on something I didnât expect at allâ¦</p>\n<p>An exception appeared while testing my code that I had been carefully\nwriting following <a href=\"http://thinkbeforecoding.com/post/2009/04/18/TDD-becomes-Design-By-Example\">Design\nBy Example</a>..</p>\n<p>Looking in my debugger my decimal two variables had value 4M.</p>\n<p>But calling <strong>ToString</strong> on it led to different results : â4â\nand â4.00ââ¦</p>\n<p>What the heck ?! How come ?</p>\n<p>Â </p>\n<h3>I should have known this</h3>\n<p>Yes, <a href=\"http://msdn.microsoft.com/en-us/library/system.decimal.aspx\" target=\"_blank\">the MSDN state it explicitly</a> :</p>\n<blockquote>\n<p>The scaling factor also preserves any trailing zeroes in a Decimal number.\nTrailing zeroes do not affect the value of a Decimal number in arithmetic or\ncomparison operations. However, trailing zeroes can be revealed by the <a href=\"http://msdn.microsoft.com/en-us/library/system.decimal.tostring.aspx\">ToString</a>\nmethod if an appropriate format string is applied.</p>\n</blockquote>\n<p>And I did not know that, did you ?</p>\n<p>Â </p>\n<h3>Try it yourself</h3>\n<p>you can try it yourself :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9992f2a4-f054-4b99-aa5a-2009cd1b5a2a\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\nConsole.WriteLine(1m);      // 1\nConsole.WriteLine(1.0m);    // 1.0\nConsole.WriteLine(1.00m);   // 1.00\n\nConsole.WriteLine(1m == 1.0m); // true\nConsole.WriteLine(1m.ToString() == 1.0m.ToString()); // false\n\n</pre>\n</div>\n<p>The decimal.Parse function also preserve trailing zeros :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c216e0d0-6df8-4c97-b5ae-6319623cc96b\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\nConsole.WriteLine(decimal.Parse(&quot;1.0&quot;, CultureInfo.InvariantCulture)); // 1.0\nConsole.WriteLine(decimal.Parse(&quot;1.000&quot;, CultureInfo.InvariantCulture)); // 1.000\n</pre>\n</div>\n<p>Â </p>\n<h3>The explanation</h3>\n<p>The decimal type internally represents values using an 96 bit integer and a\nnegative power of 10 (between 0 and 28).</p>\n<p>Those values are simply internally stored like this :</p>\n<p>1.0 â&gt; 10 * 10^-1<br />\n1.000 â&gt; 1000 * 10^-3</p>\n<p>You can check it using the <strong>decimal.GetBits</strong> method.</p>\n<p>The trailing zeros are even maintained in arithmetical operations :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b6b85237-45bd-4d22-8129-3201466cd015\" class=\"wlWriterEditableSmartContent\">\n<pre style=\"background-color:#FFFFFF;white-space:-moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; word-wrap: break-word;overflow: auto;\">\n\n<span style=\"color: #000000;\">Console.WriteLine(</span><span style=\"color: #800080;\">2.0m</span><span style=\"color: #000000;\"> </span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> </span><span style=\"color: #800080;\">3.00m</span><span style=\"color: #000000;\">);  </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 6.000</span>\n</pre>\n</div>\n<p>But are handled correctly by the equality and comparison methods :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:80af6e7a-9f58-4202-8550-8c720a8d78c2\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\nConsole.WriteLine(1m == 1.0m);  // true\nConsole.WriteLine(1m.GetHashCode() == 1.0m.GetHashCode()); // true\n</pre>\n</div>\n<p>Â </p>\n<h3>Do you know other secrets like this ?</h3>\n<p>Of course, my unit tests did not test case I didnât expect to happen !</p>\n<p>But, Hey ! <strong>If you knew it, you should have told me before</strong>\n!</p>\n<p><em>What secret feature/behavior in the .Net framework or in the C# language\ndo you know ?</em></p>","","decimal what are those trailing zeros yesterday stumbled something didnât expect allâ¦ exception appeared while testing code that had been carefully writing following design example looking debugger decimal two variables had value but calling tostring led different results â4â and 00ââ¦ what the heck how come should have known this yes the msdn state explicitly the scaling factor also preserves any trailing zeroes decimal number trailing zeroes not affect the value decimal number arithmetic comparison operations however trailing zeroes can revealed the tostring method appropriate format string applied and did not know that did you try yourself you can try yourself console writeline console writeline console writeline 00m console writeline true console writeline tostring tostring false the decimal parse function also preserve trailing zeros console writeline decimal parse quot quot cultureinfo invariantculture console writeline decimal parse quot 000 quot cultureinfo invariantculture 000 the explanation the decimal type internally represents values using bit integer and negative power between and those values are simply internally stored like this 000 1000 you can check using the decimal getbits method the trailing zeros are even maintained arithmetical operations console writeline 00m 000 but are handled correctly the equality and comparison methods console writeline true console writeline gethashcode gethashcode true you know other secrets like this course unit tests did not test case didnât expect happen but hey you knew you should have told before what secret feature behavior the net framework the language you know","a:1:{s:3:\"tag\";a:3:{i:0;s:4:\"Type\";i:1;s:7:\"decimal\";i:2;s:4:\".net\";}}","1","0","1","1","0","0","0"
"402298","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2009-05-15 12:10:00","Europe/Paris","2009-05-15 10:10:28","2009-05-20 12:59:55","","post","xhtml","2009/05/15/IOC-container-go-hide","en","IOC Container, Go Hide !","","","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_558287_49024807_1__2.jpg\"><img style=\"border-right-width: 0px; margin: 0px 0px 0px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"558287_49024807\" border=\"0\" alt=\"558287_49024807\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_558287_49024807_1__thumb.jpg\" width=\"244\" height=\"175\" /></a>While testing <a href=\"http://www.nservicebus.com/\" target=\"_blank\">NServiceBus</a> and <a href=\"http://code.google.com/p/masstransit/\" target=\"_blank\">MassTransit</a> â yes I need a service bus framework for my current project â Iâve seen that both library where relying on an IOC container, in two different ways.</p>  <p><em>Warning: This article is not to flame these two frameworks that seems of great quality. There are still few guidance on using IOC containers in libraries. This is the topic of this post.</em></p>  <h2>The NServiceBus way</h2>  <p>NServiceBus relies on <a href=\"http://www.springframework.net/\" target=\"_blank\">Spring</a> or <a href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle Windsor</a>.</p>  <p>You can notice it when instantiating the Bus :</p>  <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:af7e6cb5-1ac7-4cb7-9b47-7cad7beb05e8\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true;  highlight: 2 ;\">var bus = NServiceBus.Configure.With()\n                .SpringBuilder() // or .CastleWindsorBuilder()\n                .MsmqSubscriptionStorage()\n                .XmlSerializer()\n                .MsmqTransport()\n                    .IsTransactional(true)\n                    .PurgeOnStartup(false)\n                .UnicastBus()\n                    .ImpersonateSender(false)\n                .CreateBus()\n                .Start();</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<p>And when looking at the library with <a href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a> :</p>\n\n<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_2.png\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_thumb.png\" width=\"598\" height=\"701\" /></a></p>\n\n<p>and</p>\n\n<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_4.png\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_thumb_1.png\" width=\"581\" height=\"399\" /></a></p>\n\n<p>Yes, the Spring framework and the Castle.Windsor are <a href=\"http://research.microsoft.com/en-us/people/mbarnett/ilmerge.aspx\" target=\"_blank\">ILMerged</a> in the NServiceBus assembly.</p>\n\n<p>NServiceBus abstracts the container with the NServiceBus.ObjectBuilder.IBuilder interface :</p>\n\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5e322a55-a9c5-4d91-8917-4c1fa6f16614\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">public interface IBuilder\n{\n    // Methods\n    T Build&lt;T&gt;();\n    object Build(Type typeToBuild);\n    IEnumerable&lt;T&gt; BuildAll&lt;T&gt;();\n    IEnumerable&lt;object&gt; BuildAll(Type typeToBuild);\n    void BuildAndDispatch(Type typeToBuild, Action&lt;object&gt; action);\n}\n\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\n\n<p>&#160;</p>\n\n<h2>The MassTransit way</h2>\n\n<p>MassTransit adopts a slightly different strategy.</p>\n\n<p>The base is still the same.</p>\n\n<p>It uses the <a title=\"http://www.codeplex.com/CommonServiceLocator\" href=\"http://www.codeplex.com/CommonServiceLocator\" target=\"_blank\">CommonServiceLocator</a> to have a âstandardâ interface to hide the actual IOC container implementation.</p>\n\n<p>It provides implementations for the most common IOC frameworks (<a href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle.Windsor</a>, <a href=\"http://ninject.org/\" target=\"_blank\">NInject</a>, <a href=\"http://structuremap.sourceforge.net/Default.htm\" target=\"_blank\">StructureMap</a> and <a href=\"http://www.codeplex.com/unity\" target=\"_blank\">Unity</a> â but it doesnât work so wellâ¦) through additional dlls.</p>\n\n<p>The big difference is in the library configuration. You configure the container (through code or configuration). Then encapsulate the container in a Common Service Locator implementation that acts as an adapter. Finally give it to the library.</p>\n\n<p>&#160;</p>\n\n<h2>Whatâs the problem</h2>\n\n<p>In both case, the intent is good, but hell is paved with good intentions.</p>\n\n<p>In Mass Transit, the design is clearly made so that you can choose your container and integrate the library seamlessly with it. You can manage the configuration in your container the way you do it in your application.</p>\n\n<p><em>But wait ! What if I donât need an IOC container in my application ?</em></p>\n\n<p>The other problem is that Mass Transit relies on some advanced IOC capabilities like contextual configuration. The object instantiated for IEndPoint should not be the same depending on the parent object. This scenario is not handled by Unity for instance.</p>\n\n<p><em>Maybe Unity is not good enough, but how can I know which other specific feature Mass Transit relies on ? No clue.</em></p>\n\n<p>And providing a library configuration through a container doesnât seem a best practice to me. The API gives no clues of what I should provide to the library in order to run it.</p>\n\n<p><strong>The only way to know is to launch it, see where it throws an unresolved dependency exception, add the dependency and retry !</strong></p>\n\n<p>And Iâll probably never know about optional dependencies.</p>\n\n<p>On the other side, NServiceBus works with a NServiceBus specific configuration (code and app.config) that indicates&#160; clearly what I must provide to the library.</p>\n\n<p>But <a href=\"http://devlicio.us/blogs/casey/default.aspx\" target=\"_blank\">Jak Charlton</a> had a serious problem with NServiceBus. <strong>Heâs not using the same version of Castle.Windsor that the one merged in the NSB assembly</strong> ! And the assembly load fails.</p>\n\n<p>&#160;</p>\n\n<h2>Whatâs the solution then ?</h2>\n\n<p>I clearly prefer the specific configuration scheme of NServiceBus, but how can we solve the version problem ?</p>\n\n<p>I will answer with another question :</p>\n\n<p>Why does NServiceBus need <strong>two</strong> IOC container implementations ?</p>\n\n<p>For library creators, I will propose this way to go :</p>\n\n<ul>\n  <li>Choose the container that provides the features you need </li>\n\n  <li>Use it in your infrastructure </li>\n\n  <li>Create a clear configuration model that exposes the required and optional dependencies that should be provided by the library user </li>\n\n  <li>Consider creating a app.config specific configuration (there are good tools in the framework for that) </li>\n\n  <li><a href=\"http://www.clariusconsulting.net/blogs/kzu/archive/2009/02/23/LeveragingILMergetosimplifydeploymentandyourusersexperience.aspx\" target=\"_blank\">ILMerge your container framework as internal in your assembly</a>. </li>\n</ul>\n\n<p>The alternative to ILMerge is to fork your framework (if itâs open source) and put it as internal directly in your code.</p>\n\n<h2>The advantages</h2>\n\n<ul>\n  <li>No conflict with potential other versions of the container framework </li>\n\n  <li>A clear discoverable configuration </li>\n\n  <li>No need to use a IOC container to use the library. </li>\n</ul>\n\n<h2>What if the container needs to inject dependencies in the user objects ?</h2>\n\n<p>Both NServiceBus and MassTransit instantiate userâs objects on the fly.</p>\n\n<p>How can the user add itâs own dependencies if he has no access to the container ?</p>\n\n<p>Letâs step back a little and consider what we would do if there was no containerâ¦</p>\n\n<ul>\n  <li>We would use Activator.CreateInstance to create the object. </li>\n\n  <li>Then we would consider it would not let the library user enough options, so we would propose a hook so that the user can manage the instantiation himself. It could be a callback or an interface. </li>\n</ul>\n\n<p><strong>When instantiating user objects with the internal framework IOC container, you remove to your users the right to manage the instantiation themselves.</strong></p>\n\n<p>So come back to this good practice. If the user wants to use a IOC container to instantiate his objects with dependencies, let him do this his own way. And his container will not be loaded with all the framework internal dependencies, this will avoid other conflicts.</p>\n\n<h2>Conclusion</h2>\n\n<p>Hide your IOC container framework inside your library, itâs a private implementation detail of your framework and we donât wanna know !</p>\n\n<p>Choose the framework you like, hide it so that it cannot conflict with the one I want to use and we will be friends !</p>\n\n<p>It surely advocates for frameworks with a small footprint, but once again, itâs a private detail.</p>\n\n<p>&#160;</p>\n\n<p>Continued on <a href=\"http://thinkbeforecoding.com/post/2009/05/19/IOC-Container-Go-Hide-part-2\" target=\"_blank\">IOC Container, Go Hide (part 2)</a></p>","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_558287_49024807_1__2.jpg\">\n<img style=\"border-right-width: 0px; margin: 0px 0px 0px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"558287_49024807\" border=\"0\" alt=\"558287_49024807\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_558287_49024807_1__thumb.jpg\" width=\"244\" height=\"175\" /></a>While testing <a href=\"http://www.nservicebus.com/\" target=\"_blank\">NServiceBus</a> and <a href=\"http://code.google.com/p/masstransit/\" target=\"_blank\">MassTransit</a> â yes I\nneed a service bus framework for my current project â Iâve seen that both\nlibrary where relying on an IOC container, in two different ways.</p>\n<p><em>Warning: This article is not to flame these two frameworks that seems of\ngreat quality. There are still few guidance on using IOC containers in\nlibraries. This is the topic of this post.</em></p>\n<h2>The NServiceBus way</h2>\n<p>NServiceBus relies on <a href=\"http://www.springframework.net/\" target=\"_blank\">Spring</a> or <a href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle\nWindsor</a>.</p>\n<p>You can notice it when instantiating the Bus :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:af7e6cb5-1ac7-4cb7-9b47-7cad7beb05e8\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: true; first-line: 1; tab-size: 4; toolbar: true; highlight: 2 ;\">\n\nvar bus = NServiceBus.Configure.With()\n                .SpringBuilder() // or .CastleWindsorBuilder()\n                .MsmqSubscriptionStorage()\n                .XmlSerializer()\n                .MsmqTransport()\n                    .IsTransactional(true)\n                    .PurgeOnStartup(false)\n                .UnicastBus()\n                    .ImpersonateSender(false)\n                .CreateBus()\n                .Start();\n</pre>\n</div>\n<p>And when looking at the library with <a href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a>\n:</p>\n<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_2.png\">\n<img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_thumb.png\" width=\"598\" height=\"701\" /></a></p>\n<p>and</p>\n<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_4.png\">\n<img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_IOCcontainershouldIknowyou_8FB7_image_thumb_1.png\" width=\"581\" height=\"399\" /></a></p>\n<p>Yes, the Spring framework and the Castle.Windsor are <a href=\"http://research.microsoft.com/en-us/people/mbarnett/ilmerge.aspx\" target=\"_blank\">ILMerged</a> in the NServiceBus assembly.</p>\n<p>NServiceBus abstracts the container with the\nNServiceBus.ObjectBuilder.IBuilder interface :</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5e322a55-a9c5-4d91-8917-4c1fa6f16614\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\npublic interface IBuilder\n{\n    // Methods\n    T Build&lt;T&gt;();\n    object Build(Type typeToBuild);\n    IEnumerable&lt;T&gt; BuildAll&lt;T&gt;();\n    IEnumerable&lt;object&gt; BuildAll(Type typeToBuild);\n    void BuildAndDispatch(Type typeToBuild, Action&lt;object&gt; action);\n}\n\n</pre>\n</div>\n<p>Â </p>\n<h2>The MassTransit way</h2>\n<p>MassTransit adopts a slightly different strategy.</p>\n<p>The base is still the same.</p>\n<p>It uses the <a title=\"http://www.codeplex.com/CommonServiceLocator\" href=\"http://www.codeplex.com/CommonServiceLocator\" target=\"_blank\">CommonServiceLocator</a> to have a âstandardâ interface to hide the\nactual IOC container implementation.</p>\n<p>It provides implementations for the most common IOC frameworks (<a href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle.Windsor</a>, <a href=\"http://ninject.org/\" target=\"_blank\">NInject</a>, <a href=\"http://structuremap.sourceforge.net/Default.htm\" target=\"_blank\">StructureMap</a> and <a href=\"http://www.codeplex.com/unity\" target=\"_blank\">Unity</a> â but it doesnât work so wellâ¦) through additional\ndlls.</p>\n<p>The big difference is in the library configuration. You configure the\ncontainer (through code or configuration). Then encapsulate the container in a\nCommon Service Locator implementation that acts as an adapter. Finally give it\nto the library.</p>\n<p>Â </p>\n<h2>Whatâs the problem</h2>\n<p>In both case, the intent is good, but hell is paved with good\nintentions.</p>\n<p>In Mass Transit, the design is clearly made so that you can choose your\ncontainer and integrate the library seamlessly with it. You can manage the\nconfiguration in your container the way you do it in your application.</p>\n<p><em>But wait ! What if I donât need an IOC container in my application\n?</em></p>\n<p>The other problem is that Mass Transit relies on some advanced IOC\ncapabilities like contextual configuration. The object instantiated for\nIEndPoint should not be the same depending on the parent object. This scenario\nis not handled by Unity for instance.</p>\n<p><em>Maybe Unity is not good enough, but how can I know which other specific\nfeature Mass Transit relies on ? No clue.</em></p>\n<p>And providing a library configuration through a container doesnât seem a\nbest practice to me. The API gives no clues of what I should provide to the\nlibrary in order to run it.</p>\n<p><strong>The only way to know is to launch it, see where it throws an\nunresolved dependency exception, add the dependency and retry !</strong></p>\n<p>And Iâll probably never know about optional dependencies.</p>\n<p>On the other side, NServiceBus works with a NServiceBus specific\nconfiguration (code and app.config) that indicatesÂ  clearly what I must\nprovide to the library.</p>\n<p>But <a href=\"http://devlicio.us/blogs/casey/default.aspx\" target=\"_blank\">Jak Charlton</a> had a serious problem with NServiceBus. <strong>Heâs\nnot using the same version of Castle.Windsor that the one merged in the NSB\nassembly</strong> ! And the assembly load fails.</p>\n<p>Â </p>\n<h2>Whatâs the solution then ?</h2>\n<p>I clearly prefer the specific configuration scheme of NServiceBus, but how\ncan we solve the version problem ?</p>\n<p>I will answer with another question :</p>\n<p>Why does NServiceBus need <strong>two</strong> IOC container implementations\n?</p>\n<p>For library creators, I will propose this way to go :</p>\n<ul>\n<li>Choose the container that provides the features you need</li>\n<li>Use it in your infrastructure</li>\n<li>Create a clear configuration model that exposes the required and optional\ndependencies that should be provided by the library user</li>\n<li>Consider creating a app.config specific configuration (there are good tools\nin the framework for that)</li>\n<li><a href=\"http://www.clariusconsulting.net/blogs/kzu/archive/2009/02/23/LeveragingILMergetosimplifydeploymentandyourusersexperience.aspx\" target=\"_blank\">ILMerge your container framework as internal in your\nassembly</a>.</li>\n</ul>\n<p>The alternative to ILMerge is to fork your framework (if itâs open source)\nand put it as internal directly in your code.</p>\n<h2>The advantages</h2>\n<ul>\n<li>No conflict with potential other versions of the container framework</li>\n<li>A clear discoverable configuration</li>\n<li>No need to use a IOC container to use the library.</li>\n</ul>\n<h2>What if the container needs to inject dependencies in the user objects\n?</h2>\n<p>Both NServiceBus and MassTransit instantiate userâs objects on the fly.</p>\n<p>How can the user add itâs own dependencies if he has no access to the\ncontainer ?</p>\n<p>Letâs step back a little and consider what we would do if there was no\ncontainerâ¦</p>\n<ul>\n<li>We would use Activator.CreateInstance to create the object.</li>\n<li>Then we would consider it would not let the library user enough options, so\nwe would propose a hook so that the user can manage the instantiation himself.\nIt could be a callback or an interface.</li>\n</ul>\n<p><strong>When instantiating user objects with the internal framework IOC\ncontainer, you remove to your users the right to manage the instantiation\nthemselves.</strong></p>\n<p>So come back to this good practice. If the user wants to use a IOC container\nto instantiate his objects with dependencies, let him do this his own way. And\nhis container will not be loaded with all the framework internal dependencies,\nthis will avoid other conflicts.</p>\n<h2>Conclusion</h2>\n<p>Hide your IOC container framework inside your library, itâs a private\nimplementation detail of your framework and we donât wanna know !</p>\n<p>Choose the framework you like, hide it so that it cannot conflict with the\none I want to use and we will be friends !</p>\n<p>It surely advocates for frameworks with a small footprint, but once again,\nitâs a private detail.</p>\n<p>Â </p>\n<p>Continued on <a href=\"http://thinkbeforecoding.com/post/2009/05/19/IOC-Container-Go-Hide-part-2\" target=\"_blank\">IOC Container, Go Hide (part 2)</a></p>","","ioc container hide while testing nservicebus and masstransit yes need service bus framework for current project iâve seen that both library where relying ioc container two different ways warning this article not flame these two frameworks that seems great quality there are still few guidance using ioc containers libraries this the topic this post the nservicebus way nservicebus relies spring castle windsor you can notice when instantiating the bus var bus nservicebus configure with springbuilder castlewindsorbuilder msmqsubscriptionstorage xmlserializer msmqtransport istransactional true purgeonstartup false unicastbus impersonatesender false createbus start and when looking the library with reflector and yes the spring framework and the castle windsor are ilmerged the nservicebus assembly nservicebus abstracts the container with the nservicebus objectbuilder ibuilder interface public interface ibuilder methods build object build type typetobuild ienumerable buildall ienumerable object buildall type typetobuild void buildanddispatch type typetobuild action object action the masstransit way masstransit adopts slightly different strategy the base still the same uses the commonservicelocator have âstandardâ interface hide the actual ioc container implementation provides implementations for the most common ioc frameworks castle windsor ninject structuremap and unity but doesnât work wellâ¦ through additional dlls the big difference the library configuration you configure the container through code configuration then encapsulate the container common service locator implementation that acts adapter finally give the library whatâs the problem both case the intent good but hell paved with good intentions mass transit the design clearly made that you can choose your container and integrate the library seamlessly with you can manage the configuration your container the way you your application but wait what donât need ioc container application the other problem that mass transit relies some advanced ioc capabilities like contextual configuration the object instantiated for iendpoint should not the same depending the parent object this scenario not handled unity for instance maybe unity not good enough but how can know which other specific feature mass transit relies clue and providing library configuration through container doesnât seem best practice the api gives clues what should provide the library order run the only way know launch see where throws unresolved dependency exception add the dependency and retry and iâll probably never know about optional dependencies the other side nservicebus works with nservicebus specific configuration code and app config that indicates clearly what must provide the library but jak charlton had serious problem with nservicebus heâs not using the same version castle windsor that the one merged the nsb assembly and the assembly load fails whatâs the solution then clearly prefer the specific configuration scheme nservicebus but how can solve the version problem will answer with another question why does nservicebus need two ioc container implementations for library creators will propose this way choose the container that provides the features you need use your infrastructure create clear configuration model that exposes the required and optional dependencies that should provided the library user consider creating app config specific configuration there are good tools the framework for that ilmerge your container framework internal your assembly the alternative ilmerge fork your framework itâs open source and put internal directly your code the advantages conflict with potential other versions the container framework clear discoverable configuration need use ioc container use the library what the container needs inject dependencies the user objects both nservicebus and masstransit instantiate userâs objects the fly how can the user add itâs own dependencies has access the container letâs step back little and consider what would there was containerâ¦ would use activator createinstance create the object then would consider would not let the library user enough options would propose hook that the user can manage the instantiation himself could callback interface when instantiating user objects with the internal framework ioc container you remove your users the right manage the instantiation themselves come back this good practice the user wants use ioc container instantiate his objects with dependencies let him this his own way and his container will not loaded with all the framework internal dependencies this will avoid other conflicts conclusion hide your ioc container framework inside your library itâs private implementation detail your framework and donât wanna know choose the framework you like hide that cannot conflict with the one want use and will friends surely advocates for frameworks with small footprint but once again itâs private detail continued ioc container hide part","a:1:{s:3:\"tag\";a:3:{i:0;s:6:\"Design\";i:1;s:20:\"Dependency Injection\";i:2;s:3:\"IOC\";}}","1","1","1","1","4","0","0"
"403632","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2009-05-19 15:29:00","Europe/Paris","2009-05-19 13:29:11","2009-05-19 13:39:06","","post","xhtml","2009/05/19/IOC-Container-Go-Hide-part-2","en","IOC Container, Go Hide (part 2)","","","<p>Ok, there seem to be some misunderstanding with the suggestion from my <a href=\"http://thinkbeforecoding.com/post/2009/05/15/IOC-container-go-hide\" target=\"_blank\">previous post</a>.</p>\r\n<p>A framework manipulates two kind of objects :</p>\r\n<ul>\r\n<li>its objects</li>\r\n<li>your objects</li>\r\n</ul>\r\n<p>You donât care about its object, you care about yours.</p>\r\n<p>So you want to be able to take part in your objects instantiation so that you can do your own stuff (inject dependencies, handle differently based on runtime behaviorâ¦).</p>\r\n<h2>Without container</h2>\r\n<p>Look at Asp.net, when it needs to create an Http Handler, it calls a IHttpHandlerFactory.</p>\r\n<p>You can provide your own IHttpHandlerFactory, just implement its two methods (the second one can even be left empty in most cases) :</p>\r\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4c1e1e5b-18bf-4873-baf6-3d26d63b1af8\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">public interface IHttpHandlerFactory\r\n{\r\n// Methods\r\nIHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);\r\nvoid ReleaseHandler(IHttpHandler handler);\r\n}\r\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\r\n<p>In the GetHandler method, youâre free to use the container you want ! But you can also do this :</p>\r\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d67b366d-c548-4803-99a5-8c215ebdf019\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; \">return new CustomHttpHandler(theDependency);</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\r\n<p>Or make a call to another factory, orâ¦ orâ¦</p>\r\n<h2>With container</h2>\r\n<p>The framework ask to provide a container so that the it can simply run. Ok there is also a builtin container so I donât have to care.</p>\r\n<p>But if I want to do a custom instantiation I have now to implement the following interface :</p>\r\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c20991cb-e0a4-429c-b79b-3605e2e5a3c5\" class=\"wlWriterEditableSmartContent\"><pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; \">public interface IServiceLocator : IServiceProvider\r\n{\r\n// Methods\r\nIEnumerable&lt;TService&gt; GetAllInstances&lt;TService&gt;();\r\nIEnumerable&lt;object&gt; GetAllInstances(Type serviceType);\r\nTService GetInstance&lt;TService&gt;();\r\nTService GetInstance&lt;TService&gt;(string key);\r\nobject GetInstance(Type serviceType);\r\nobject GetInstance(Type serviceType, string key);\r\n}\r\n</pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>\r\n<p>This interface will be used when any instantiation will occur. If I mess internal framework instantiation. Wooch !</p>\r\n<p>And there is no clear meaning with this interface. It should be able to instantiate any object requested.</p>\r\n<p>It doesnât give a clean and clear API in my personal opinion !</p>\r\n<p><strong>Using an IOC container as an extension point is clearly an over abstraction !</strong></p>\r\n<h2>Provide clear, focused extensibility points</h2>\r\n<p>The framework doesnât need to be extended on every instantiation, especially when instantiation its own internal stuff. There are clear extension points, and a specific interface should be created for each.</p>\r\n<p><em>This is just a framework design good practice.</em></p>\r\n<p>Then, there is no need to show the container you use to the outside, and it resolves potential version conflicts.</p>","<p>Ok, there seem to be some misunderstanding with the suggestion from my\n<a href=\"http://thinkbeforecoding.com/post/2009/05/15/IOC-container-go-hide\" target=\"_blank\">previous post</a>.</p>\n<p>A framework manipulates two kind of objects :</p>\n<ul>\n<li>its objects</li>\n<li>your objects</li>\n</ul>\n<p>You donât care about its object, you care about yours.</p>\n<p>So you want to be able to take part in your objects instantiation so that\nyou can do your own stuff (inject dependencies, handle differently based on\nruntime behaviorâ¦).</p>\n<h2>Without container</h2>\n<p>Look at Asp.net, when it needs to create an Http Handler, it calls a\nIHttpHandlerFactory.</p>\n<p>You can provide your own IHttpHandlerFactory, just implement its two methods\n(the second one can even be left empty in most cases) :</p>\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4c1e1e5b-18bf-4873-baf6-3d26d63b1af8\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\npublic interface IHttpHandlerFactory\n{\n// Methods\nIHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);\nvoid ReleaseHandler(IHttpHandler handler);\n}\n</pre>\n</div>\n<p>In the GetHandler method, youâre free to use the container you want ! But\nyou can also do this :</p>\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d67b366d-c548-4803-99a5-8c215ebdf019\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: false;\">\nreturn new CustomHttpHandler(theDependency);\n</pre>\n</div>\n<p>Or make a call to another factory, orâ¦ orâ¦</p>\n<h2>With container</h2>\n<p>The framework ask to provide a container so that the it can simply run. Ok\nthere is also a builtin container so I donât have to care.</p>\n<p>But if I want to do a custom instantiation I have now to implement the\nfollowing interface :</p>\n<div style=\"PADDING-BOTTOM: 0; MARGIN: 0; PADDING-LEFT: 0; PADDING-RIGHT: 0; DISPLAY: inline; FLOAT: none; PADDING-TOP: 0\" id=\"scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c20991cb-e0a4-429c-b79b-3605e2e5a3c5\" class=\"wlWriterEditableSmartContent\">\n<pre class=\"brush: csharp; gutter: false; first-line: 1; tab-size: 4; toolbar: true;\">\npublic interface IServiceLocator : IServiceProvider\n{\n// Methods\nIEnumerable&lt;TService&gt; GetAllInstances&lt;TService&gt;();\nIEnumerable&lt;object&gt; GetAllInstances(Type serviceType);\nTService GetInstance&lt;TService&gt;();\nTService GetInstance&lt;TService&gt;(string key);\nobject GetInstance(Type serviceType);\nobject GetInstance(Type serviceType, string key);\n}\n</pre>\n</div>\n<p>This interface will be used when any instantiation will occur. If I mess\ninternal framework instantiation. Wooch !</p>\n<p>And there is no clear meaning with this interface. It should be able to\ninstantiate any object requested.</p>\n<p>It doesnât give a clean and clear API in my personal opinion !</p>\n<p><strong>Using an IOC container as an extension point is clearly an over\nabstraction !</strong></p>\n<h2>Provide clear, focused extensibility points</h2>\n<p>The framework doesnât need to be extended on every instantiation, especially\nwhen instantiation its own internal stuff. There are clear extension points,\nand a specific interface should be created for each.</p>\n<p><em>This is just a framework design good practice.</em></p>\n<p>Then, there is no need to show the container you use to the outside, and it\nresolves potential version conflicts.</p>","","ioc container hide part there seem some misunderstanding with the suggestion from previous post framework manipulates two kind objects its objects your objects you donât care about its object you care about yours you want able take part your objects instantiation that you can your own stuff inject dependencies handle differently based runtime behaviorâ¦ without container look asp net when needs create http handler calls ihttphandlerfactory you can provide your own ihttphandlerfactory just implement its two methods the second one can even left empty most cases public interface ihttphandlerfactory methods ihttphandler gethandler httpcontext context string requesttype string url string pathtranslated void releasehandler ihttphandler handler the gethandler method youâre free use the container you want but you can also this return new customhttphandler thedependency make call another factory orâ¦ orâ¦ with container the framework ask provide container that the can simply run there also builtin container donât have care but want custom instantiation have now implement the following interface public interface iservicelocator iserviceprovider methods ienumerable tservice getallinstances tservice ienumerable object getallinstances type servicetype tservice getinstance tservice tservice getinstance tservice string key object getinstance type servicetype object getinstance type servicetype string key this interface will used when any instantiation will occur mess internal framework instantiation wooch and there clear meaning with this interface should able instantiate any object requested doesnât give clean and clear api personal opinion using ioc container extension point clearly over abstraction provide clear focused extensibility points the framework doesnât need extended every instantiation especially when instantiation its own internal stuff there are clear extension points and specific interface should created for each this just framework design good practice then there need show the container you use the outside and resolves potential version conflicts","a:1:{s:3:\"tag\";a:4:{i:0;s:6:\"Design\";i:1;s:4:\".net\";i:2;s:3:\"IOC\";i:3;s:20:\"Dependency Injection\";}}","1","0","1","1","0","0","0"
"410719","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-16 23:58:00","Europe/Paris","2009-06-16 21:58:28","2009-06-16 22:33:37","","post","xhtml","2009/06/16/Met-Eric-Evans-at-ParisJug","en","Met Eric Evans at ParisJug","","","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_MetEricEvansatParisJug_1461B_IMAG0387_3.jpg\"><img style=\"border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 25px; display: inline; border-top: 0px; border-right: 0px\" title=\"IMAG0387\" border=\"0\" alt=\"IMAG0387\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_MetEricEvansatParisJug_1461B_IMAG0387_thumb.jpg\" width=\"244\" height=\"244\" /></a> The <a title=\"Yes I know this is a Java User Group, So What ?\" href=\"http://www.parisjug.org/\" target=\"_blank\">ParisJug</a> organized a DDD event yesterday in&#160; Paris presented by Eric Evans, the author of <a href=\"http://domaindrivendesign.org/books\" target=\"_blank\">Domain&#160; Driven Design</a> himself.</p>  <p>Heâd come in France ten years ago, but never made a presentation about Domain Driven Design here yet.</p>  <p>Thanks to Antonio and Nicolas and the others and who organized this presentation in <strong><a href=\"http://www.touilleur-express.fr/2009/06/16/eric-evans-domain-driven-design-au-paris-jug/\" target=\"_blank\">4 days</a></strong>. You can find a summary of the talk in French <a href=\"http://thecodersbreakfast.net/index.php?post/2009/06/16/Paris-JUG-%22Domain-driven-design%22-%3A-compte-rendu\" target=\"_blank\">here</a>.</p>  <h1>Putting the model to work</h1>  <p>It was the title of the talk. Iâll not make a full report since it was mainly whatâs in the book for those who had not grasped the concepts of DDD yet.</p>  <p>Iâll talk about important topics of the content in following posts.</p>  <h1>Diner with Eric Evans and Jug guys</h1>  <p>After the presentation, we moved to a restaurant with Eric Evans, the organizers and other attendees. I had the chance to be at the same table as Eric, so I had the opportunity to talk with him about a lot of things. </p>  <p>Heâs not at all the Pattern Guru kind. Very careful to let you understand heâs not found a solution to your problems, that youâll have to work, but that his experience and analysis can help to grasp things a bit more clearly. Heâs constantly working hard on several project to get more experience and set his knowledge and experimentation against different contexts.</p>  <p>Iâll also talk about part of our discussion in following posts.</p>","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_MetEricEvansatParisJug_1461B_IMAG0387_3.jpg\">\n<img style=\"border-bottom: 0px; border-left: 0px; margin: 0px 0px 5px 25px; display: inline; border-top: 0px; border-right: 0px\" title=\"IMAG0387\" border=\"0\" alt=\"IMAG0387\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_MetEricEvansatParisJug_1461B_IMAG0387_thumb.jpg\" width=\"244\" height=\"244\" /></a> The <a title=\"Yes I know this is a Java User Group, So What ?\" href=\"http://www.parisjug.org/\" target=\"_blank\">ParisJug</a> organized a DDD event\nyesterday inÂ  Paris presented by Eric Evans, the author of <a href=\"http://domaindrivendesign.org/books\" target=\"_blank\">DomainÂ  Driven\nDesign</a> himself.</p>\n<p>Heâd come in France ten years ago, but never made a presentation about\nDomain Driven Design here yet.</p>\n<p>Thanks to Antonio and Nicolas and the others and who organized this\npresentation in <strong><a href=\"http://www.touilleur-express.fr/2009/06/16/eric-evans-domain-driven-design-au-paris-jug/\" target=\"_blank\">4 days</a></strong>. You can find a summary of the talk in\nFrench <a href=\"http://thecodersbreakfast.net/index.php?post/2009/06/16/Paris-JUG-%22Domain-driven-design%22-%3A-compte-rendu\" target=\"_blank\">here</a>.</p>\n<h1>Putting the model to work</h1>\n<p>It was the title of the talk. Iâll not make a full report since it was\nmainly whatâs in the book for those who had not grasped the concepts of DDD\nyet.</p>\n<p>Iâll talk about important topics of the content in following posts.</p>\n<h1>Diner with Eric Evans and Jug guys</h1>\n<p>After the presentation, we moved to a restaurant with Eric Evans, the\norganizers and other attendees. I had the chance to be at the same table as\nEric, so I had the opportunity to talk with him about a lot of things.</p>\n<p>Heâs not at all the Pattern Guru kind. Very careful to let you understand\nheâs not found a solution to your problems, that youâll have to work, but that\nhis experience and analysis can help to grasp things a bit more clearly. Heâs\nconstantly working hard on several project to get more experience and set his\nknowledge and experimentation against different contexts.</p>\n<p>Iâll also talk about part of our discussion in following posts.</p>","","met eric evans parisjug the parisjug organized ddd event yesterday paris presented eric evans the author domain driven design himself heâd come france ten years ago but never made presentation about domain driven design here yet thanks antonio and nicolas and the others and who organized this presentation days you can find summary the talk french here putting the model work was the title the talk iâll not make full report since was mainly whatâs the book for those who had not grasped the concepts ddd yet iâll talk about important topics the content following posts diner with eric evans and jug guys after the presentation moved restaurant with eric evans the organizers and other attendees had the chance the same table eric had the opportunity talk with him about lot things heâs not all the pattern guru kind very careful let you understand heâs not found solution your problems that youâll have work but that his experience and analysis can help grasp things bit more clearly heâs constantly working hard several project get more experience and set his knowledge and experimentation against different contexts iâll also talk about part our discussion following posts","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"ParisJug\";i:1;s:5:\"Evans\";i:2;s:20:\"Dependency Injection\";i:3;s:6:\"Design\";}}","1","0","1","1","2","1","0"
"410723","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-17 00:11:00","Europe/Paris","2009-06-16 22:11:23","2009-06-16 23:06:40","","post","xhtml","2009/06/17/When-DDD-should-be-considered","en","When DDD should be considered ?","","","<p>This is a recurring question on the <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/\" target=\"_blank\">DDD yahoo group</a>. And there was a simple explanation during the <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">ParisJug talk</a>. </p>\r\n<p>DDD is not a silver bullet for all application development, it just helps to manage complexity when the complexity comes from the domain.</p>\r\n<p>No need for DDD when working on a technical application or a small application with few interactions.</p>\r\n<p>You could benefit from DDD when your application looks like the Cargo sample :</p>\r\n<ul>\r\n<li>Route containers based on transports availability </li>\r\n<li>Take cost and time into account </li>\r\n<li>Know where are the boats </li>\r\n<li>Organize loads and unloads </li>\r\n<li>Manage container storage (emit order of missions for employees on site) </li>\r\n<li>Provide container tracking and tracing to clients </li>\r\n<li>Transports can be late, manage it </li>\r\n<li>Transports can be canceled, manage it </li>\r\n<li>Contracts can be changed, destination can change </li>\r\n<li>Containers can be incorrectly routed even if emitted orders where correct, manage it. </li>\r\n<li>Manage taxes </li>\r\n<li>Manage time zones </li>\r\n<li>Manage currencies </li>\r\n<li>Manager constraints and local rules on dangerous containers contents </li>\r\n</ul>\r\n<p>In this kind of application, the complexity doesnât come from an Xml web service or a database schema. Even without taking account any technical concern, <strong>it is complex</strong> !</p>\r\n<p>So there is a simple rule of thumb to know if DDD could apply (independently from the size of the project) :</p>\r\n<blockquote>\r\n<p>Try DDD if Domain Complexity &gt;&gt; Technical Complexity</p>\r\n</blockquote>\r\n<p>In other case you can just go with your preferred classic architecture.</p>","<p>This is a recurring question on the <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/\" target=\"_blank\">DDD\nyahoo group</a>. And there was a simple explanation during the <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">ParisJug talk</a>.</p>\n<p>DDD is not a silver bullet for all application development, it just helps to\nmanage complexity when the complexity comes from the domain.</p>\n<p>No need for DDD when working on a technical application or a small\napplication with few interactions.</p>\n<p>You could benefit from DDD when your application looks like the Cargo sample\n:</p>\n<ul>\n<li>Route containers based on transports availability</li>\n<li>Take cost and time into account</li>\n<li>Know where are the boats</li>\n<li>Organize loads and unloads</li>\n<li>Manage container storage (emit order of missions for employees on\nsite)</li>\n<li>Provide container tracking and tracing to clients</li>\n<li>Transports can be late, manage it</li>\n<li>Transports can be canceled, manage it</li>\n<li>Contracts can be changed, destination can change</li>\n<li>Containers can be incorrectly routed even if emitted orders where correct,\nmanage it.</li>\n<li>Manage taxes</li>\n<li>Manage time zones</li>\n<li>Manage currencies</li>\n<li>Manager constraints and local rules on dangerous containers contents</li>\n</ul>\n<p>In this kind of application, the complexity doesnât come from an Xml web\nservice or a database schema. Even without taking account any technical\nconcern, <strong>it is complex</strong> !</p>\n<p>So there is a simple rule of thumb to know if DDD could apply (independently\nfrom the size of the project) :</p>\n<blockquote>\n<p>Try DDD if Domain Complexity &gt;&gt; Technical Complexity</p>\n</blockquote>\n<p>In other case you can just go with your preferred classic architecture.</p>","","when ddd should considered this recurring question the ddd yahoo group and there was simple explanation during the parisjug talk ddd not silver bullet for all application development just helps manage complexity when the complexity comes from the domain need for ddd when working technical application small application with few interactions you could benefit from ddd when your application looks like the cargo sample route containers based transports availability take cost and time into account know where are the boats organize loads and unloads manage container storage emit order missions for employees site provide container tracking and tracing clients transports can late manage transports can canceled manage contracts can changed destination can change containers can incorrectly routed even emitted orders where correct manage manage taxes manage time zones manage currencies manager constraints and local rules dangerous containers contents this kind application the complexity doesnât come from xml web service database schema even without taking account any technical concern complex there simple rule thumb know ddd could apply independently from the size the project try ddd domain complexity technical complexity other case you can just with your preferred classic architecture","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"ParisJug\";i:1;s:5:\"Evans\";i:2;s:20:\"Domain Driven Design\";i:3;s:6:\"Design\";}}","1","0","1","1","0","0","0"
"410849","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-17 15:56:00","Europe/Paris","2009-06-17 13:56:52","2009-06-17 14:07:02","","post","xhtml","2009/06/17/Which-model-is-best-Thats-not-the-question","en","Which model is best ? Thats not the question.","","","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Whatsthebestdesign_D516_Mercator_1569_1__2.png\"><img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; MARGIN: 0 0 5px 15px; DISPLAY: inline; BORDER-TOP: 0; BORDER-RIGHT: 0\" title=\"Mercator_1569\"[1] border=\"0\" alt=\"Mercator_1569\"[1] align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Whatsthebestdesign_D516_Mercator_1569_1__thumb.png\" width=\"244\" height=\"156\" /></a>Those who already read the book should already know this. Itâs still interesting for newcomers and you can&nbsp; send comments if you want !</p>\r\n<p>During his <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">Talk at ParisJug</a>, Eric Evans presented two possible models for Cargo itinerary. </p>\r\n<p>The first one was around the notion of Stops (at a Stop, you unload, then you load), and the second one was around the notion of Legs(you load at the start of a Leg, and unload at the end). An itinerary could be seen as a list of stops or a list of legs.</p>\r\n<p>The question was, <em>which model is best</em> ?</p>\r\n<p>Of course, there is no answer to this question.</p>\r\n<p>The same question was translated to a comparison of maps. First an map of China from the 16th century, and a Mercator projection map. </p>\r\n<p>We should be inclined to say that the second one is best. But the first one was largely enough for the need at that time. And if you inspect the Mercator projection, you can notice that it is not that accurate for some tasks. For example, the Greenland seems abnormally large.</p>\r\n<p>Why do we use Mercator projection then ? </p>\r\n<p><a href=\"http://en.wikipedia.org/wiki/Mercator_projection\" target=\"_blank\">It became the standard map projection for nautical purposes because of its ability to represent lines of constant course, known as rhumb lines or loxodromes, as straight segments</a>.</p>\r\n<p>If you want a map to compare country areas, use a <a href=\"http://en.wikipedia.org/wiki/Gall-Peters_projection\" target=\"_blank\">Gall-Petters projection</a> or a&nbsp; <a href=\"http://en.wikipedia.org/wiki/Goode_homolosine_projection\" target=\"_blank\">Goode homolosine projection</a>â¦</p>\r\n<p>So the question becomes :</p>\r\n<blockquote>\r\n<p>Which model is more useful ?</p>\r\n</blockquote>\r\n<p>And for the question to be complete :</p>\r\n<blockquote>\r\n<p>Which model is more useful for what ?</p>\r\n</blockquote>\r\n<p>To come back to the cargo application, Stops will be useful to produce orders to unload and reload containers from cargos, but legs will be useful if you need to track transport location or change routing during transport.</p>\r\n<p>Youâll have noticed :</p>\r\n<blockquote>\r\n<p>It depends on the context</p>\r\n</blockquote>","<p><a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Whatsthebestdesign_D516_Mercator_1569_1__2.png\">\n<img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; MARGIN: 0 0 5px 15px; DISPLAY: inline; BORDER-TOP: 0; BORDER-RIGHT: 0\" title=\"Mercator_1569\" border=\"0\" alt=\"Mercator_1569\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_Whatsthebestdesign_D516_Mercator_1569_1__thumb.png\" width=\"244\" height=\"156\" /></a>Those who already read the book should already\nknow this. Itâs still interesting for newcomers and you canÂ  send comments\nif you want !</p>\n<p>During his <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">Talk at ParisJug</a>, Eric Evans presented two possible models\nfor Cargo itinerary.</p>\n<p>The first one was around the notion of Stops (at a Stop, you unload, then\nyou load), and the second one was around the notion of Legs(you load at the\nstart of a Leg, and unload at the end). An itinerary could be seen as a list of\nstops or a list of legs.</p>\n<p>The question was, <em>which model is best</em> ?</p>\n<p>Of course, there is no answer to this question.</p>\n<p>The same question was translated to a comparison of maps. First an map of\nChina from the 16th century, and a Mercator projection map.</p>\n<p>We should be inclined to say that the second one is best. But the first one\nwas largely enough for the need at that time. And if you inspect the Mercator\nprojection, you can notice that it is not that accurate for some tasks. For\nexample, the Greenland seems abnormally large.</p>\n<p>Why do we use Mercator projection then ?</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Mercator_projection\" target=\"_blank\">It became the standard map projection for nautical purposes because of\nits ability to represent lines of constant course, known as rhumb lines or\nloxodromes, as straight segments</a>.</p>\n<p>If you want a map to compare country areas, use a <a href=\"http://en.wikipedia.org/wiki/Gall-Peters_projection\" target=\"_blank\">Gall-Petters projection</a> or aÂ  <a href=\"http://en.wikipedia.org/wiki/Goode_homolosine_projection\" target=\"_blank\">Goode homolosine projection</a>â¦</p>\n<p>So the question becomes :</p>\n<blockquote>\n<p>Which model is more useful ?</p>\n</blockquote>\n<p>And for the question to be complete :</p>\n<blockquote>\n<p>Which model is more useful for what ?</p>\n</blockquote>\n<p>To come back to the cargo application, Stops will be useful to produce\norders to unload and reload containers from cargos, but legs will be useful if\nyou need to track transport location or change routing during transport.</p>\n<p>Youâll have noticed :</p>\n<blockquote>\n<p>It depends on the context</p>\n</blockquote>","","which model best thats not the question those who already read the book should already know this itâs still interesting for newcomers and you can send comments you want during his talk parisjug eric evans presented two possible models for cargo itinerary the first one was around the notion stops stop you unload then you load and the second one was around the notion legs you load the start leg and unload the end itinerary could seen list stops list legs the question was which model best course there answer this question the same question was translated comparison maps first map china from the 16th century and mercator projection map should inclined say that the second one best but the first one was largely enough for the need that time and you inspect the mercator projection you can notice that not that accurate for some tasks for example the greenland seems abnormally large why use mercator projection then became the standard map projection for nautical purposes because its ability represent lines constant course known rhumb lines loxodromes straight segments you want map compare country areas use gall petters projection goode homolosine projectionâ¦ the question becomes which model more useful and for the question complete which model more useful for what come back the cargo application stops will useful produce orders unload and reload containers from cargos but legs will useful you need track transport location change routing during transport youâll have noticed depends the context","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"ParisJug\";i:1;s:5:\"Evans\";i:2;s:20:\"Domain Driven Design\";i:3;s:6:\"Design\";}}","1","0","1","1","0","0","0"
"411792","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-19 14:05:00","Europe/Paris","2009-06-19 12:05:27","2009-06-19 12:07:05","","post","xhtml","2009/06/19/Strategic-Design-at-DDD-Exchange","en","Strategic Design at DDD Exchange","","","<p>Gojko Adzik has a post about Eric Evansâ talk at <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange\" target=\"_blank\">DDD Exchange</a> :</p>\r\n<p><a href=\"http://gojko.net/2009/06/19/eric-evans-why-do-efforts-to-replace-legacy-systems-fail/\" target=\"_blank\">Why do efforts to replace legacy system fail ?</a></p>\r\n<p>You can also read <a href=\"http://thinkbeforecoding.com/post/2009/04/28/Strategic-Design\" target=\"_blank\">my previous post about strategic design</a>.</p>\r\n<p>Iâm currently working on evolving a large legacy system, and my experience tell me itâs the right way to deal with it !</p>\r\n<p>Donât try to switch off legacy system. Go along with it using anticorruption layers to protect you elegant core domain.</p>","<p>Gojko Adzik has a post about Eric Evansâ talk at <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange\" target=\"_blank\">DDD Exchange</a> :</p>\n<p><a href=\"http://gojko.net/2009/06/19/eric-evans-why-do-efforts-to-replace-legacy-systems-fail/\" target=\"_blank\">Why do efforts to replace legacy system fail ?</a></p>\n<p>You can also read <a href=\"http://thinkbeforecoding.com/post/2009/04/28/Strategic-Design\" target=\"_blank\">my previous post about strategic design</a>.</p>\n<p>Iâm currently working on evolving a large legacy system, and my experience\ntell me itâs the right way to deal with it !</p>\n<p>Donât try to switch off legacy system. Go along with it using anticorruption\nlayers to protect you elegant core domain.</p>","","strategic design ddd exchange gojko adzik has post about eric evansâ talk ddd exchange why efforts replace legacy system fail you can also read previous post about strategic design iâm currently working evolving large legacy system and experience tell itâs the right way deal with donât try switch off legacy system along with using anticorruption layers protect you elegant core domain","a:1:{s:3:\"tag\";a:5:{i:0;s:16:\"Strategic Design\";i:1;s:5:\"Evans\";i:2;s:20:\"Domain Driven Design\";i:3;s:6:\"Design\";i:4;s:12:\"DDD Exchange\";}}","1","0","1","1","0","0","0"
"412806","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-23 14:20:00","Europe/Paris","2009-06-23 12:20:11","2009-06-23 12:21:03","","post","xhtml","2009/06/23/Where-are-my-Entities-and-my-Repositories","en","Where are my Entities and my Repositories ?","","","<p>During <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">Evansâ talk at ParisJug</a>, some attendees where surprised that there was no mention of <a href=\"http://dddstepbystep.com/wikis/ddd/entity.aspx\" target=\"_blank\">Entities</a> or <a href=\"http://dddstepbystep.com/wikis/ddd/repository.aspx\" target=\"_blank\">Repositories</a>â¦</p>\r\n<p>Quite a lot of people where introduced to Domain Driven Design by these aspects and see these as the main advance of DDD.</p>\r\n<p>In contrast, Eric Evans explained to me he had some regrets he placed these patterns so early in the book. Many readers think they know the most important at this point and stop reading after chapter 6.</p>\r\n<p>Actually those patterns are only object model patterns that enable Separation of Concerns and Persistence Ignorance, but can also be used in context that are not Domain Driven at all like CRUD.</p>\r\n<p>Of course, if you want to implement a domain independent of all infrastructure concerns, good OO practices will be required, but those practices wonât make your application Domain Driven (donât understand that not following DDD would make your design a bad designâ¦ you apply DDD if you want and if you need to, but achieving persistence ignorance wonât mean you practice DDD.)</p>\r\n<p>But youâve more to learn from Strategic Design, Bounded Contexts and distillation of the Core Domain etc.</p>","<p>During <a href=\"http://thinkbeforecoding.com/post/2009/06/16/Met-Eric-Evans-at-ParisJug\" target=\"_blank\">Evansâ talk at ParisJug</a>, some attendees where surprised\nthat there was no mention of <a href=\"http://dddstepbystep.com/wikis/ddd/entity.aspx\" target=\"_blank\">Entities</a>\nor <a href=\"http://dddstepbystep.com/wikis/ddd/repository.aspx\" target=\"_blank\">Repositories</a>â¦</p>\n<p>Quite a lot of people where introduced to Domain Driven Design by these\naspects and see these as the main advance of DDD.</p>\n<p>In contrast, Eric Evans explained to me he had some regrets he placed these\npatterns so early in the book. Many readers think they know the most important\nat this point and stop reading after chapter 6.</p>\n<p>Actually those patterns are only object model patterns that enable\nSeparation of Concerns and Persistence Ignorance, but can also be used in\ncontext that are not Domain Driven at all like CRUD.</p>\n<p>Of course, if you want to implement a domain independent of all\ninfrastructure concerns, good OO practices will be required, but those\npractices wonât make your application Domain Driven (donât understand that not\nfollowing DDD would make your design a bad designâ¦ you apply DDD if you want\nand if you need to, but achieving persistence ignorance wonât mean you practice\nDDD.)</p>\n<p>But youâve more to learn from Strategic Design, Bounded Contexts and\ndistillation of the Core Domain etc.</p>","","where are entities and repositories during evansâ talk parisjug some attendees where surprised that there was mention entities repositoriesâ¦ quite lot people where introduced domain driven design these aspects and see these the main advance ddd contrast eric evans explained had some regrets placed these patterns early the book many readers think they know the most important this point and stop reading after chapter actually those patterns are only object model patterns that enable separation concerns and persistence ignorance but can also used context that are not domain driven all like crud course you want implement domain independent all infrastructure concerns good practices will required but those practices wonât make your application domain driven donât understand that not following ddd would make your design bad designâ¦ you apply ddd you want and you need but achieving persistence ignorance wonât mean you practice ddd but youâve more learn from strategic design bounded contexts and distillation the core domain etc","","1","0","1","1","0","1","0"
"412868","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-06-23 16:59:00","Europe/Paris","2009-06-23 14:59:07","2009-06-23 15:00:53","","post","xhtml","2009/06/23/Distributed-Domain-Driven-Design-and-Aggregates","en","Distributed Domain Driven Design and Aggregates","","","<p>Once again, Gojko Adzic comes with an excellent post : <a href=\"http://gojko.net/2009/06/23/improving-performance-and-scalability-with-ddd/\" target=\"_blank\">Improving performance and scalability with DDD</a>.</p>\r\n<p>Aggregates are often a bit underused in DDD because theyâre difficult to grasp. Theyâre often seen as a solution to a technical problem. Gojko shows here how to understand them at a domain level. This post gives a clear vision of the role of Aggregates in DDD by placing it in the context of distributed environments. </p>\r\n<p>You should read it !</p>","<p>Once again, Gojko Adzic comes with an excellent post : <a href=\"http://gojko.net/2009/06/23/improving-performance-and-scalability-with-ddd/\" target=\"_blank\">Improving performance and scalability with DDD</a>.</p>\n<p>Aggregates are often a bit underused in DDD because theyâre difficult to\ngrasp. Theyâre often seen as a solution to a technical problem. Gojko shows\nhere how to understand them at a domain level. This post gives a clear vision\nof the role of Aggregates in DDD by placing it in the context of distributed\nenvironments.</p>\n<p>You should read it !</p>","","distributed domain driven design and aggregates once again gojko adzic comes with excellent post improving performance and scalability with ddd aggregates are often bit underused ddd because theyâre difficult grasp theyâre often seen solution technical problem gojko shows here how understand them domain level this post gives clear vision the role aggregates ddd placing the context distributed environments you should read","a:1:{s:3:\"tag\";a:4:{i:0;s:12:\"DDD Exchange\";i:1;s:32:\"Distributed Domain Driven Design\";i:2;s:20:\"Domain Driven Design\";i:3;s:6:\"Design\";}}","1","0","1","1","0","0","0"
"420748","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-07-24 16:34:00","Europe/Paris","2009-07-24 14:34:22","2009-10-29 10:09:38","","post","xhtml","2009/07/24/DDD-and-Code-ReUse","en","DDD and Code ReUse","","","<p>I read several discussions against Code ReUse and layered architectures recently :<a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_DDDandCodeReuse_E89E_recycle-logo_2.jpg\"><img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; DISPLAY: inline; MARGIN-LEFT: 0; BORDER-TOP: 0; MARGIN-RIGHT: 0; BORDER-RIGHT: 0\" title=\"recycle-logo\" border=\"0\" alt=\"recycle-logo\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_DDDandCodeReuse_E89E_recycle-logo_thumb.jpg\" width=\"195\" height=\"253\" /></a></p>\r\n<ul>\r\n<li><a href=\"http://www.udidahan.com/2009/06/07/the-fallacy-of-reuse/\" target=\"_blank\">The Fallacy Of ReUse</a> (Udi Dahan)&nbsp; </li>\r\n<li><a href=\"http://www.vimeo.com/5022174\" target=\"_blank\">WebCast on SOA in the E-VAN</a> (Udi Dahan) </li>\r\n<li><a title=\"http://ayende.com/Blog/archive/2009/07/23/feature-by-feature.aspx\" href=\"http://ayende.com/Blog/archive/2009/07/23/feature-by-feature.aspx\" target=\"_blank\">Feature by Feature</a> (Oren Eini) </li>\r\n</ul>\r\n<h3>Different kinds of Code ReUse</h3>\r\n<p>You can split your code with different concern :</p>\r\n<ul>\r\n<li>Object model extensions </li>\r\n<li>Technical Infrastructure </li>\r\n<li>Application code </li>\r\n</ul>\r\n<p>The first two are good candidates for Code ReUse.</p>\r\n<p>By Object model extensions Iâm talking about things that make your code writing less tedious at language level or object model level.</p>\r\n<p>Example of such code are :</p>\r\n<ul>\r\n<li>IEnumerable and Enumerable </li>\r\n<li>Collections </li>\r\n<li>Reflection helpers </li>\r\n<li>Dependency Injection framework </li>\r\n</ul>\r\n<p>By Technical Infrastructure I mean things that make your code run in its environment :</p>\r\n<ul>\r\n<li>Generic Service Host, </li>\r\n<li>ORM, Data Layer </li>\r\n<li>Format serializers / deserializers </li>\r\n<li>Configuration helpers </li>\r\n<li>Communication frameworks (WCF, Service Buses) </li>\r\n<li>UI frameworks (MVC, WPF) </li>\r\n</ul>\r\n<p>The last part is Application code, and here, things are really different.</p>\r\n<h3>Application Code ReUse</h3>\r\n<p>For long Iâve been writing business code in libraries. I began then to notice problems concerning code and data locality.</p>\r\n<p>When you have a single application (process), no problem.</p>\r\n<p>But if two applications need to modify the same entities, the solution would be to use the same library in both applications so that there is no code duplication. It seems good practice but you quickly stumble on several problems â Iâm sure you already experienced it :</p>\r\n<ul>\r\n<li>Synchronization : the same data will be accessed in the same db from two application, how do you manage conflicts</li>\r\n<li>Deployment : when you fix bugs or add features, you must redeploy every application that has a dependency on the library. It slows down the release cycle and make it more risky, changes have more impact.</li>\r\n<li>Code locality : when a problem arises, you have to find which application it comes from.</li>\r\n</ul>\r\n<p>Letâs examine DDD patterns to see how they fit with reuse :</p>\r\n<h4>Services</h4>\r\n<p>Letâs start easy. Services are stateless, they should deliver simple action. But to preserve encapsulation the better is to put services as true services in their own process (web service, windows service, service on a service bus..).</p>\r\n<p>This way, synchronization is managed in process, deployment is a breeze, and no problem with code locality â code executes in one place.</p>\r\n<h4>Entities</h4>\r\n<p>Entities are retrieved through a Repository Service, hence, they should follow the same rules as Services.</p>\r\n<p>This way, the implementation of a repository that access the database is truly an implementation details. Anyone who wants to talk to an entity sends a command to it, a handler service get the entity from the repository, and pass the command to the entity. The configuration to access the database is local the to the process.</p>\r\n<p>Here again, same benefits.</p>\r\n<p>Moreover entities should always have different meanings in different bounded contexts, the should have different implementations, so there is no real reason for reuse.</p>\r\n<h4>Value Objects</h4>\r\n<p>Value objects are a bit different.</p>\r\n<p>Some object are very specific to a bounded context and donât need to be reuse outside.</p>\r\n<p>Some other can be a good way to encapsulate some shared concepts. Money is usually a good example, but there can also be concepts more specific to the domain (you will find them as words that come in the Ubiquitous Language of different Bounded Contexts).</p>\r\n<p>They can be shared among different contexts, but rarely between different domains. There are exceptions for very very generic concept like money, but even money often needs to be tweaked a bit for each domainâ¦</p>\r\n<p>&nbsp;</p>\r\n<h3>Service Bus to the rescue</h3>\r\n<p>Once each bounded context is split, you need to organize communications between parts. Here comes the Service Bus and Messages, but now, the only shared parts in the application are :</p>\r\n<ul>\r\n<li>Object model extensions (to code faster and cleaner)</li>\r\n<li>Technical infrastructure (so that each process is fully equipped, and thereâs not much technical fuss in the application code)</li>\r\n<li>General use Value Objects (to manipulate domain concepts instead of int and decimal)</li>\r\n<li>Messages (to communicate between contexts)</li>\r\n</ul>\r\n<p>You could also use web services, but it makes the overall structure less fault tolerant, harder to deploy, and more tightly coupled.</p>\r\n<p>Once youâve decoupled bounded context using messages, the rest is just an internal implementation detail, why would you want to reuse it !</p>","<p>I read several discussions against Code ReUse and layered architectures\nrecently :<a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_DDDandCodeReuse_E89E_recycle-logo_2.jpg\"><img style=\"BORDER-BOTTOM: 0; BORDER-LEFT: 0; DISPLAY: inline; MARGIN-LEFT: 0; BORDER-TOP: 0; MARGIN-RIGHT: 0; BORDER-RIGHT: 0\" title=\"recycle-logo\" border=\"0\" alt=\"recycle-logo\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter_DDDandCodeReuse_E89E_recycle-logo_thumb.jpg\" width=\"195\" height=\"253\" /></a></p>\n<ul>\n<li><a href=\"http://www.udidahan.com/2009/06/07/the-fallacy-of-reuse/\" target=\"_blank\">The Fallacy Of ReUse</a> (Udi Dahan)Â </li>\n<li><a href=\"http://www.vimeo.com/5022174\" target=\"_blank\">WebCast on SOA in\nthe E-VAN</a> (Udi Dahan)</li>\n<li><a title=\"http://ayende.com/Blog/archive/2009/07/23/feature-by-feature.aspx\" href=\"http://ayende.com/Blog/archive/2009/07/23/feature-by-feature.aspx\" target=\"_blank\">Feature by Feature</a> (Oren Eini)</li>\n</ul>\n<h3>Different kinds of Code ReUse</h3>\n<p>You can split your code with different concern :</p>\n<ul>\n<li>Object model extensions</li>\n<li>Technical Infrastructure</li>\n<li>Application code</li>\n</ul>\n<p>The first two are good candidates for Code ReUse.</p>\n<p>By Object model extensions Iâm talking about things that make your code\nwriting less tedious at language level or object model level.</p>\n<p>Example of such code are :</p>\n<ul>\n<li>IEnumerable and Enumerable</li>\n<li>Collections</li>\n<li>Reflection helpers</li>\n<li>Dependency Injection framework</li>\n</ul>\n<p>By Technical Infrastructure I mean things that make your code run in its\nenvironment :</p>\n<ul>\n<li>Generic Service Host,</li>\n<li>ORM, Data Layer</li>\n<li>Format serializers / deserializers</li>\n<li>Configuration helpers</li>\n<li>Communication frameworks (WCF, Service Buses)</li>\n<li>UI frameworks (MVC, WPF)</li>\n</ul>\n<p>The last part is Application code, and here, things are really\ndifferent.</p>\n<h3>Application Code ReUse</h3>\n<p>For long Iâve been writing business code in libraries. I began then to\nnotice problems concerning code and data locality.</p>\n<p>When you have a single application (process), no problem.</p>\n<p>But if two applications need to modify the same entities, the solution would\nbe to use the same library in both applications so that there is no code\nduplication. It seems good practice but you quickly stumble on several problems\nâ Iâm sure you already experienced it :</p>\n<ul>\n<li>Synchronization : the same data will be accessed in the same db from two\napplication, how do you manage conflicts</li>\n<li>Deployment : when you fix bugs or add features, you must redeploy every\napplication that has a dependency on the library. It slows down the release\ncycle and make it more risky, changes have more impact.</li>\n<li>Code locality : when a problem arises, you have to find which application\nit comes from.</li>\n</ul>\n<p>Letâs examine DDD patterns to see how they fit with reuse :</p>\n<h4>Services</h4>\n<p>Letâs start easy. Services are stateless, they should deliver simple action.\nBut to preserve encapsulation the better is to put services as true services in\ntheir own process (web service, windows service, service on a service\nbus..).</p>\n<p>This way, synchronization is managed in process, deployment is a breeze, and\nno problem with code locality â code executes in one place.</p>\n<h4>Entities</h4>\n<p>Entities are retrieved through a Repository Service, hence, they should\nfollow the same rules as Services.</p>\n<p>This way, the implementation of a repository that access the database is\ntruly an implementation details. Anyone who wants to talk to an entity sends a\ncommand to it, a handler service get the entity from the repository, and pass\nthe command to the entity. The configuration to access the database is local\nthe to the process.</p>\n<p>Here again, same benefits.</p>\n<p>Moreover entities should always have different meanings in different bounded\ncontexts, the should have different implementations, so there is no real reason\nfor reuse.</p>\n<h4>Value Objects</h4>\n<p>Value objects are a bit different.</p>\n<p>Some object are very specific to a bounded context and donât need to be\nreuse outside.</p>\n<p>Some other can be a good way to encapsulate some shared concepts. Money is\nusually a good example, but there can also be concepts more specific to the\ndomain (you will find them as words that come in the Ubiquitous Language of\ndifferent Bounded Contexts).</p>\n<p>They can be shared among different contexts, but rarely between different\ndomains. There are exceptions for very very generic concept like money, but\neven money often needs to be tweaked a bit for each domainâ¦</p>\n<p>Â </p>\n<h3>Service Bus to the rescue</h3>\n<p>Once each bounded context is split, you need to organize communications\nbetween parts. Here comes the Service Bus and Messages, but now, the only\nshared parts in the application are :</p>\n<ul>\n<li>Object model extensions (to code faster and cleaner)</li>\n<li>Technical infrastructure (so that each process is fully equipped, and\nthereâs not much technical fuss in the application code)</li>\n<li>General use Value Objects (to manipulate domain concepts instead of int and\ndecimal)</li>\n<li>Messages (to communicate between contexts)</li>\n</ul>\n<p>You could also use web services, but it makes the overall structure less\nfault tolerant, harder to deploy, and more tightly coupled.</p>\n<p>Once youâve decoupled bounded context using messages, the rest is just an\ninternal implementation detail, why would you want to reuse it !</p>","","ddd and code reuse read several discussions against code reuse and layered architectures recently the fallacy reuse udi dahan webcast soa the van udi dahan feature feature oren eini different kinds code reuse you can split your code with different concern object model extensions technical infrastructure application code the first two are good candidates for code reuse object model extensions iâm talking about things that make your code writing less tedious language level object model level example such code are ienumerable and enumerable collections reflection helpers dependency injection framework technical infrastructure mean things that make your code run its environment generic service host orm data layer format serializers deserializers configuration helpers communication frameworks wcf service buses frameworks mvc wpf the last part application code and here things are really different application code reuse for long iâve been writing business code libraries began then notice problems concerning code and data locality when you have single application process problem but two applications need modify the same entities the solution would use the same library both applications that there code duplication seems good practice but you quickly stumble several problems iâm sure you already experienced synchronization the same data will accessed the same from two application how you manage conflicts deployment when you fix bugs add features you must redeploy every application that has dependency the library slows down the release cycle and make more risky changes have more impact code locality when problem arises you have find which application comes from letâs examine ddd patterns see how they fit with reuse services letâs start easy services are stateless they should deliver simple action but preserve encapsulation the better put services true services their own process web service windows service service service bus this way synchronization managed process deployment breeze and problem with code locality code executes one place entities entities are retrieved through repository service hence they should follow the same rules services this way the implementation repository that access the database truly implementation details anyone who wants talk entity sends command handler service get the entity from the repository and pass the command the entity the configuration access the database local the the process here again same benefits moreover entities should always have different meanings different bounded contexts the should have different implementations there real reason for reuse value objects value objects are bit different some object are very specific bounded context and donât need reuse outside some other can good way encapsulate some shared concepts money usually good example but there can also concepts more specific the domain you will find them words that come the ubiquitous language different bounded contexts they can shared among different contexts but rarely between different domains there are exceptions for very very generic concept like money but even money often needs tweaked bit for each domainâ¦ service bus the rescue once each bounded context split you need organize communications between parts here comes the service bus and messages but now the only shared parts the application are object model extensions code faster and cleaner technical infrastructure that each process fully equipped and thereâs not much technical fuss the application code general use value objects manipulate domain concepts instead int and decimal messages communicate between contexts you could also use web services but makes the overall structure less fault tolerant harder deploy and more tightly coupled once youâve decoupled bounded context using messages the rest just internal implementation detail why would you want reuse","a:1:{s:3:\"tag\";a:4:{i:0;s:32:\"Distributed Domain Driven Design\";i:1;s:11:\"Service Bus\";i:2;s:20:\"Domain Driven Design\";i:3;s:6:\"Design\";}}","1","0","1","1","0","1","0"
"453105","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2009-10-21 14:46:00","Europe/Paris","2009-10-21 12:46:26","2013-04-04 12:30:11","","post","xhtml","2009/10/21/CSharp-Static-interfaces","en","C# Static interfaces","","","<p>Read the latest post on the subject:</p>\r\n<p><a href=\"/post/2013/04/04/C-Static-interfaces-Take-3\">C# Static Interfaces - Take 3</a></p>\r\n<p>No DDD today, letâs talk a bit about our favorite language after a short night (I should really tell my neighbors that 3am is not the good time to move their furniture all around the flat).</p>\r\n<p>You can find requests for static methods in interfaces <a href=\"http://dotnet.org.za/codingsanity/archive/2007/02/11/static-methods-on-interfaces.aspx\" target=\"_blank\">all</a> <a href=\"http://discuss.joelonsoftware.com/default.asp?dotnet.12.305680.12\" target=\"_blank\">over</a> <a href=\"http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/1942d6ac-045f-42fc-8840-d83ef5d65bc7\" target=\"_blank\">the</a> <a href=\"http://p2p.wrox.com/c/18454-how-achieve-static-method-interface.html\" target=\"_blank\">internet</a>..</p>\r\n<p>But there are good <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/14/calling-static-methods-on-type-variables-is-illegal-part-one.aspx\" target=\"_blank\">reasons</a> <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/18/calling-static-methods-on-type-variables-is-illegal-part-two.aspx\" target=\"_blank\">not</a> <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/21/calling-static-methods-on-type-variables-is-illegal-part-three.aspx\" target=\"_blank\">to</a>.</p>\r\n<p>According to <a href=\"http://blogs.msdn.com/ericlippert\" target=\"_blank\">Eric Lippert</a>, the main reasons is the difference in inheritance between static methods and instance method du to the absence of shared slots between static methods.</p>\r\n<p>Mixing both static methods and instance methods in interfaces would lead to a real nightmare when you try to understand what really happens.</p>\r\n<p>But why does this question arise so often then ? Whatâs really needed ?</p>\r\n<h2>Static classes as type instances</h2>\r\n<p>Letâs take a simple class with both static and instance members :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// static part</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> count;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// instance part</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> name;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Sample(<span style=\"COLOR: blue\">string</span> name) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Total count {0} incremented by {1}\"</span>, count, name);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Here, Count is a static Property. Static part is different from instance part in that static part exist only once per type.</p>\r\n<p>But we could see static part as being an object with reference is type name.</p>\r\n<p>Why would these object not have interfaces ?</p>\r\n<p>Let refactor this a bit :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample2</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">sealed</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample2Class</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">int</span> count;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Sample2Class</span> Class = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Sample2Class</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> name;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Sample2(<span style=\"COLOR: blue\">string</span> name)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.name = name;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.count++;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Total count {0} incremented by {1}\"</span>, Class.count, name);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Here, the only static member is Class, that acts as a singleton for the type. Note that I had to change the count modifier to internal. The behavior is <strong>not</strong> the same, but itâs conceptually equivalent.</p>\r\n<p>We can make something less extreme :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample3</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> count;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> name;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Sample3Class</span> Class = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Sample3Class</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">sealed</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample3Class</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: #2b91af\">Sample3</span>.Count; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Sample3(<span style=\"COLOR: blue\">string</span> name) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Total count {0} incremented by {1}\"</span>, count, name);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Here, we added only a proxy of public methods and properties on the singleton class.</p>\r\n<p>We could define an interface that would be implemented by Sample3Class that would provide the missing <em>slot</em> concept that Eric Lipperts talk about.</p>\r\n<p>We can also see here that there is no point mixing static and instance method in interface since inheritance rules differs.</p>\r\n<h2>Static Interface</h2>\r\n<p>Imagination at work. Letâs define static interface as we can define static classes :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ICountable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>and implement it on our sample :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample4</span> : ICountable</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> count;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> name;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Sample4(<span style=\"COLOR: blue\">string</span> name) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Total count {0} incremented by {1}\"</span>, count, name);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The C# compiler would be responsible for creating a singleton stub in the class. Since the goal is to provide a function table, this could also be handled at a lower level by the CLI.</p>\r\n<p>Now, we can have interesting language extensions.</p>\r\n<h2>Static member access in generics</h2>\r\n<p>Let see it in action :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>&nbsp;<span style=\"COLOR: blue\">bool</span> IsInstanciated&lt;T&gt;() <span style=\"COLOR: blue\">where</span> T: ICountable</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> T.Count != 0;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>There is no ambiguity when using this method since values of parameter T are known at compilation time. The C# compiler could replace the static call with a interface call on the proxy. On a CLI version, the JIT compiler could resolve it once and for all and emit a static call. Use of a child type whose parent type implements the interface should not be allowed, the compiler could report this.</p>\r\n<p>This could be combined with an extension method syntax to provide extension methods on types :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>&nbsp;<span style=\"COLOR: blue\">bool</span> IsInstanciated(<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">ICountable</span> type)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> type.Count != <span style=\"COLOR: blue\">0</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>This one is a bit twisted, and I would gracefully admit changes in the syntax, but the point is that it would enable on type/classes the same kind of thing that Linq offers with interfaces : put the minimum set of methods in interface, then add lots of features around interface with extension methods.</p>\r\n<h2>Back to reality</h2>\r\n<p>Ok, I should sleep at night, but who knows, itâs perhaps useful.</p>\r\n<p>If anyone sees other applicationsâ¦ just drop a comment.</p>","<p>Read the latest post on the subject:</p>\n<p><a href=\"/post/2013/04/04/C-Static-interfaces-Take-3\">C# Static Interfaces -\nTake 3</a></p>\n<p>No DDD today, letâs talk a bit about our favorite language after a short\nnight (I should really tell my neighbors that 3am is not the good time to move\ntheir furniture all around the flat).</p>\n<p>You can find requests for static methods in interfaces <a href=\"http://dotnet.org.za/codingsanity/archive/2007/02/11/static-methods-on-interfaces.aspx\" target=\"_blank\">all</a> <a href=\"http://discuss.joelonsoftware.com/default.asp?dotnet.12.305680.12\" target=\"_blank\">over</a> <a href=\"http://social.msdn.microsoft.com/Forums/en-US/csharplanguage/thread/1942d6ac-045f-42fc-8840-d83ef5d65bc7\" target=\"_blank\">the</a> <a href=\"http://p2p.wrox.com/c/18454-how-achieve-static-method-interface.html\" target=\"_blank\">internet</a>..</p>\n<p>But there are good <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/14/calling-static-methods-on-type-variables-is-illegal-part-one.aspx\" target=\"_blank\">reasons</a> <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/18/calling-static-methods-on-type-variables-is-illegal-part-two.aspx\" target=\"_blank\">not</a> <a href=\"http://blogs.msdn.com/ericlippert/archive/2007/06/21/calling-static-methods-on-type-variables-is-illegal-part-three.aspx\" target=\"_blank\">to</a>.</p>\n<p>According to <a href=\"http://blogs.msdn.com/ericlippert\" target=\"_blank\">Eric Lippert</a>, the main reasons is the difference in inheritance\nbetween static methods and instance method du to the absence of shared slots\nbetween static methods.</p>\n<p>Mixing both static methods and instance methods in interfaces would lead to\na real nightmare when you try to understand what really happens.</p>\n<p>But why does this question arise so often then ? Whatâs really needed ?</p>\n<h2>Static classes as type instances</h2>\n<p>Letâs take a simple class with both static and instance members :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Sample</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">// static part</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> count;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; }\n}</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">// instance part</span></p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> name;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Sample(<span style=\"COLOR: blue\">string</span>\nname) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  count++;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Total\ncount {0} incremented by {1}&quot;</span>, count, name);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Here, Count is a static Property. Static part is different from instance\npart in that static part exist only once per type.</p>\n<p>But we could see static part as being an object with reference is type\nname.</p>\n<p>Why would these object not have interfaces ?</p>\n<p>Let refactor this a bit :</p>\n<p>Â </p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample2</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">sealed</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample2Class</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">int</span> count;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">int</span> Count {\n<span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\ncount; } }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Sample2Class</span> Class = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Sample2Class</span>();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> name;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Sample2(<span style=\"COLOR: blue\">string</span>\nname)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.name = name;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nClass.count++;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Total\ncount {0} incremented by {1}&quot;</span>, Class.count, name);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Here, the only static member is Class, that acts as a singleton for the\ntype. Note that I had to change the count modifier to internal. The behavior is\n<strong>not</strong> the same, but itâs conceptually equivalent.</p>\n<p>We can make something less extreme :</p>\n<p>Â </p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample3</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> count;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; }\n}</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> name;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Sample3Class</span> Class = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Sample3Class</span>();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">sealed</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample3Class</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">int</span> Count {\n<span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\n<span style=\"COLOR: #2b91af\">Sample3</span>.Count; } }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Sample3(<span style=\"COLOR: blue\">string</span>\nname) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  count++;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Total\ncount {0} incremented by {1}&quot;</span>, count, name);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>Here, we added only a proxy of public methods and properties on the\nsingleton class.</p>\n<p>We could define an interface that would be implemented by Sample3Class that\nwould provide the missing <em>slot</em> concept that Eric Lipperts talk\nabout.</p>\n<p>We can also see here that there is no point mixing static and instance\nmethod in interface since inheritance rules differs.</p>\n<h2>Static Interface</h2>\n<p>Imagination at work. Letâs define static interface as we can define static\nclasses :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ICountable</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">int</span> Count {\n<span style=\"COLOR: blue\">get</span>; }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>and implement it on our sample :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Sample4</span> : ICountable</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> count;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">int</span> Count { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> count; }\n}</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> name;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Sample4(<span style=\"COLOR: blue\">string</span>\nname) { <span style=\"COLOR: blue\">this</span>.name = name; }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Method()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  count++;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Total\ncount {0} incremented by {1}&quot;</span>, count, name);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The C# compiler would be responsible for creating a singleton stub in the\nclass. Since the goal is to provide a function table, this could also be\nhandled at a lower level by the CLI.</p>\n<p>Now, we can have interesting language extensions.</p>\n<h2>Static member access in generics</h2>\n<p>Let see it in action :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>Â <span style=\"COLOR: blue\">bool</span>\nIsInstanciated&lt;T&gt;() <span style=\"COLOR: blue\">where</span> T:\nICountable</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> T.Count != 0;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n</div>\n<p>There is no ambiguity when using this method since values of parameter T are\nknown at compilation time. The C# compiler could replace the static call with a\ninterface call on the proxy. On a CLI version, the JIT compiler could resolve\nit once and for all and emit a static call. Use of a child type whose parent\ntype implements the interface should not be allowed, the compiler could report\nthis.</p>\n<p>This could be combined with an extension method syntax to provide extension\nmethods on types :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>Â <span style=\"COLOR: blue\">bool</span>\nIsInstanciated(<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">ICountable</span> type)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> type.Count != <span style=\"COLOR: blue\">0</span>;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n</div>\n<p>This one is a bit twisted, and I would gracefully admit changes in the\nsyntax, but the point is that it would enable on type/classes the same kind of\nthing that Linq offers with interfaces : put the minimum set of methods in\ninterface, then add lots of features around interface with extension\nmethods.</p>\n<h2>Back to reality</h2>\n<p>Ok, I should sleep at night, but who knows, itâs perhaps useful.</p>\n<p>If anyone sees other applicationsâ¦ just drop a comment.</p>","","static interfaces read the latest post the subject static interfaces take ddd today letâs talk bit about our favorite language after short night should really tell neighbors that 3am not the good time move their furniture all around the flat you can find requests for static methods interfaces all over the internet but there are good reasons not according eric lippert the main reasons the difference inheritance between static methods and instance method the absence shared slots between static methods mixing both static methods and instance methods interfaces would lead real nightmare when you try understand what really happens but why does this question arise often then whatâs really needed static classes type instances letâs take simple class with both static and instance members class sample static part private static int count public static int count get return count instance part private readonly string name public sample string name this name name public void method count console writeline quot total count incremented quot count name here count static property static part different from instance part that static part exist only once per type but could see static part being object with reference type name why would these object not have interfaces let refactor this bit public class sample2 public sealed class sample2class internal int count public int count get return count public static readonly sample2class class new sample2class private readonly string name public sample2 string name this name name public void method class count console writeline quot total count incremented quot class count name here the only static member class that acts singleton for the type note that had change the count modifier internal the behavior not the same but itâs conceptually equivalent can make something less extreme public class sample3 private static int count public static int count get return count private readonly string name public static readonly sample3class class new sample3class public sealed class sample3class public int count get return sample3 count public sample3 string name this name name public void method count console writeline quot total count incremented quot count name here added only proxy public methods and properties the singleton class could define interface that would implemented sample3class that would provide the missing slot concept that eric lipperts talk about can also see here that there point mixing static and instance method interface since inheritance rules differs static interface imagination work letâs define static interface can define static classes public static interface icountable static int count get and implement our sample public class sample4 icountable private static int count public static int count get return count private readonly string name public sample4 string name this name name public void method count console writeline quot total count incremented quot count name the compiler would responsible for creating singleton stub the class since the goal provide function table this could also handled lower level the cli now can have interesting language extensions static member access generics let see action public static bool isinstanciated where icountable return count there ambiguity when using this method since values parameter are known compilation time the compiler could replace the static call with interface call the proxy cli version the jit compiler could resolve once and for all and emit static call use child type whose parent type implements the interface should not allowed the compiler could report this this could combined with extension method syntax provide extension methods types public static bool isinstanciated static icountable type return type count this one bit twisted and would gracefully admit changes the syntax but the point that would enable type classes the same kind thing that linq offers with interfaces put the minimum set methods interface then add lots features around interface with extension methods back reality should sleep night but who knows itâs perhaps useful anyone sees other applicationsâ¦ just drop comment","a:1:{s:3:\"tag\";a:3:{i:0;s:10:\"Interfaces\";i:1;s:6:\"CSharp\";i:2;s:4:\".net\";}}","1","0","1","1","13","1","0"
"453399","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2009-10-22 15:11:00","Europe/Paris","2009-10-22 13:11:07","2009-10-22 13:13:01","","post","xhtml","2009/10/22/CSharp-Static-interfaces-Take-2","en","C# Static interfaces - Take 2","","","<p>As <a title=\"Codingly.com\" href=\"http://codingly.com/\" target=\"_blank\">Romain</a> was pointing in the comments, I totally missed to tell where I wanted to go <a href=\"http://thinkbeforecoding.com/post/2009/10/21/C-Static-interfaces\" target=\"_blank\">with this static interface things</a>. Need more sleep these daysâ¦</p>\r\n<p>So here it is.</p>\r\n<h2>No I donât want to do this</h2>\r\n<p>The point was not to enable something like this :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp; int</span> value = <span style=\"COLOR: #2b91af\">ICountable</span>.Count;</p>\r\n</div>\r\n<p>Static interfaces have no implementation exactly like interfaces.</p>\r\n<p>With interfaces, you need an instance (usually in a variable or member) to find the actual implementation and call it. With static interfaces, you need a type.</p>\r\n<p>There are two ways to specify a type:</p>\r\n<ul>\r\n<li>with its type name (Sample4.Count)</li>\r\n<li>with a generic type parameter (T.Count)</li>\r\n</ul>\r\n<p>I was also proposing a way to specify a type for extension methods.</p>\r\n<h2>Where it would be useful - operators</h2>\r\n<p>The reason why everybody is asking for static members in interfaces is ultimately to have <strong>operators</strong> in interfaces.</p>\r\n<p>Imagine :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IArithmetic</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> +(T x, T y);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> -(T x, T y);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> *(T x, T y);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> /(T x, T y);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Now you can write generic code like :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> T Power&lt;T&gt;(<span style=\"COLOR: blue\">this</span> T value, <span style=\"COLOR: blue\">int</span> count) <span style=\"COLOR: blue\">where</span> T : IArithmetic&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> result = T.Identity;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">for</span> (<span style=\"COLOR: blue\">int</span> i=0;i&lt;count;i++)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = result*value;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> result;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Cool !</p>\r\n<p>This way, no need for the 20 overloads of Enumerable.Sum, it would work for any type presenting the expected static interface.</p>","<p>As <a title=\"Codingly.com\" href=\"http://codingly.com/\" target=\"_blank\">Romain</a> was pointing in the comments, I totally missed to tell\nwhere I wanted to go <a href=\"http://thinkbeforecoding.com/post/2009/10/21/C-Static-interfaces\" target=\"_blank\">with this static interface things</a>. Need more sleep these daysâ¦</p>\n<p>So here it is.</p>\n<h2>No I donât want to do this</h2>\n<p>The point was not to enable something like this :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â  int</span> value =\n<span style=\"COLOR: #2b91af\">ICountable</span>.Count;</p>\n</div>\n<p>Static interfaces have no implementation exactly like interfaces.</p>\n<p>With interfaces, you need an instance (usually in a variable or member) to\nfind the actual implementation and call it. With static interfaces, you need a\ntype.</p>\n<p>There are two ways to specify a type:</p>\n<ul>\n<li>with its type name (Sample4.Count)</li>\n<li>with a generic type parameter (T.Count)</li>\n</ul>\n<p>I was also proposing a way to specify a type for extension methods.</p>\n<h2>Where it would be useful - operators</h2>\n<p>The reason why everybody is asking for static members in interfaces is\nultimately to have <strong>operators</strong> in interfaces.</p>\n<p>Imagine :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IArithmetic</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> +(T x,\nT y);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> -(T x,\nT y);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> *(T x,\nT y);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> T <span style=\"COLOR: blue\">operator</span> /(T x,\nT y);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Now you can write generic code like :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> T\nPower&lt;T&gt;(<span style=\"COLOR: blue\">this</span> T value, <span style=\"COLOR: blue\">int</span> count) <span style=\"COLOR: blue\">where</span> T :\nIArithmetic&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> result = T.Identity;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">for</span> (<span style=\"COLOR: blue\">int</span>\ni=0;i&lt;count;i++)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nresult = result*value;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> result;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n</div>\n<p>Cool !</p>\n<p>This way, no need for the 20 overloads of Enumerable.Sum, it would work for\nany type presenting the expected static interface.</p>","","static interfaces take romain was pointing the comments totally missed tell where wanted with this static interface things need more sleep these daysâ¦ here donât want this the point was not enable something like this int value icountable count static interfaces have implementation exactly like interfaces with interfaces you need instance usually variable member find the actual implementation and call with static interfaces you need type there are two ways specify type with its type name sample4 count with generic type parameter count was also proposing way specify type for extension methods where would useful operators the reason why everybody asking for static members interfaces ultimately have operators interfaces imagine public static interface iarithmetic static operator static operator static operator static operator now you can write generic code like public static power this value int count where iarithmetic var result identity for int count result result value return result cool this way need for the overloads enumerable sum would work for any type presenting the expected static interface","a:1:{s:3:\"tag\";a:3:{i:0;s:10:\"Interfaces\";i:1;s:6:\"CSharp\";i:2;s:4:\".net\";}}","1","0","1","1","8","1","0"
"455931","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-10-28 15:05:00","Europe/Paris","2009-10-28 14:05:36","2009-10-28 14:06:58","","post","xhtml","2009/10/28/Uniqueness-validation-in-CQRS-Architecture","en","Uniqueness validation in CQRS Architecture","","","<p>This is a short follow up on <a href=\"http://bjarte.com/post/224749430/set-based-validation-in-the-cqrs-architecture\" target=\"_blank\">Bjarteâs Post</a>.</p>\r\n<p>Thereâs an important thing to consider when needing set validation : <strong>why</strong> ?</p>\r\n<p>Why do these things need to be considered together and cannot just be handled separately ?</p>\r\n<p>We can distinct two different parameters in uniqueness, Cardinality and Scope.</p>\r\n<h2>Cardinality</h2>\r\n<p>There are mainly two types of cardinality :</p>\r\n<h3>1 Cardinality</h3>\r\n<blockquote>\r\n<p>Only one employee can be the boss.</p>\r\n</blockquote>\r\n<p>The model could provide a IsBoss property on every employeeâ¦ But constancy would be very hard to achieve, especially in a CQRS architecture. </p>\r\n<p>We should read the preceding rule as :</p>\r\n<blockquote>\r\n<p>The company has only one boss. The boss is an employee.</p>\r\n</blockquote>\r\n<p>Now, we can model a Boss property on the Company Aggregate Root that will reference the employee that is the boss. Changing the boss can now be an atomic and consistent operation.</p>\r\n<p>We can see that we had to introduce a upper level to manage it (weâll se it in the Scope section).</p>\r\n<h3>n Cardinality</h3>\r\n<blockquote>\r\n<p>Employee should have different user names.</p>\r\n</blockquote>\r\n<p>We can clearly see here that user names must be different because theyâll act as identifiers. This is the goal of almost any uniqueness constraint. The property will be used as a key in a lookup. </p>\r\n<p>The 1 (or 2 or 3) cardinality also act this way. Itâs a way to tag an entity. You can ask âwho is the boss ?â and get the answer by a simple lookup at the Boss property that acts like a bucket in a hash table.</p>\r\n<h3>Scope</h3>\r\n<h3>There is no such thing as global scope</h3>\r\n<p>Even when we say, âEmployee should have different user namesâ, there is a implicit scope, the Company.</p>\r\n<p>Even when we say, âYou Id Card number should be uniqueâ, understand, âat the Country scopeâ.</p>\r\n<p>Even when we say, âYour DNA should be uniqueâ, understand, âAt our life understanding scopeâ.</p>\r\n<p>Find the scope and see the volume of data whose uniqueness should be enforced. </p>\r\n<p>As we said, properties that have a uniqueness constraint are usually used as lookup values to find those entities. As such they rarely take part in the child entity domain logic.</p>\r\n<p>Instead of having a UserName property on the Employee entity, why not have a UserNames key/value collection on the Company that will give the Employee for a given user name ?</p>\r\n<p>If the expected Employee count is expected to be in a limited range, this is the most appropriate solution.</p>\r\n<p>If the number can grow, loading it in memory on each Company hydratation is a bit heavy, so keep the directory on disk (using a table with a unique key in a RDBMS as suggested by Bjarte) or any other way that provide the expected performance.</p>\r\n<h2>Conclusion</h2>\r\n<p>In every case, when a uniqueness constraint appear on a property, the property does not belong the the entity itself but should be viewed as a key to access the entity from the upper level scope.</p>\r\n<p>Do you have examples that cannot be solved this way ?</p>","<p>This is a short follow up on <a href=\"http://bjarte.com/post/224749430/set-based-validation-in-the-cqrs-architecture\" target=\"_blank\">Bjarteâs Post</a>.</p>\n<p>Thereâs an important thing to consider when needing set validation :\n<strong>why</strong> ?</p>\n<p>Why do these things need to be considered together and cannot just be\nhandled separately ?</p>\n<p>We can distinct two different parameters in uniqueness, Cardinality and\nScope.</p>\n<h2>Cardinality</h2>\n<p>There are mainly two types of cardinality :</p>\n<h3>1 Cardinality</h3>\n<blockquote>\n<p>Only one employee can be the boss.</p>\n</blockquote>\n<p>The model could provide a IsBoss property on every employeeâ¦ But constancy\nwould be very hard to achieve, especially in a CQRS architecture.</p>\n<p>We should read the preceding rule as :</p>\n<blockquote>\n<p>The company has only one boss. The boss is an employee.</p>\n</blockquote>\n<p>Now, we can model a Boss property on the Company Aggregate Root that will\nreference the employee that is the boss. Changing the boss can now be an atomic\nand consistent operation.</p>\n<p>We can see that we had to introduce a upper level to manage it (weâll se it\nin the Scope section).</p>\n<h3>n Cardinality</h3>\n<blockquote>\n<p>Employee should have different user names.</p>\n</blockquote>\n<p>We can clearly see here that user names must be different because theyâll\nact as identifiers. This is the goal of almost any uniqueness constraint. The\nproperty will be used as a key in a lookup.</p>\n<p>The 1 (or 2 or 3) cardinality also act this way. Itâs a way to tag an\nentity. You can ask âwho is the boss ?â and get the answer by a simple lookup\nat the Boss property that acts like a bucket in a hash table.</p>\n<h3>Scope</h3>\n<h3>There is no such thing as global scope</h3>\n<p>Even when we say, âEmployee should have different user namesâ, there is a\nimplicit scope, the Company.</p>\n<p>Even when we say, âYou Id Card number should be uniqueâ, understand, âat the\nCountry scopeâ.</p>\n<p>Even when we say, âYour DNA should be uniqueâ, understand, âAt our life\nunderstanding scopeâ.</p>\n<p>Find the scope and see the volume of data whose uniqueness should be\nenforced.</p>\n<p>As we said, properties that have a uniqueness constraint are usually used as\nlookup values to find those entities. As such they rarely take part in the\nchild entity domain logic.</p>\n<p>Instead of having a UserName property on the Employee entity, why not have a\nUserNames key/value collection on the Company that will give the Employee for a\ngiven user name ?</p>\n<p>If the expected Employee count is expected to be in a limited range, this is\nthe most appropriate solution.</p>\n<p>If the number can grow, loading it in memory on each Company hydratation is\na bit heavy, so keep the directory on disk (using a table with a unique key in\na RDBMS as suggested by Bjarte) or any other way that provide the expected\nperformance.</p>\n<h2>Conclusion</h2>\n<p>In every case, when a uniqueness constraint appear on a property, the\nproperty does not belong the the entity itself but should be viewed as a key to\naccess the entity from the upper level scope.</p>\n<p>Do you have examples that cannot be solved this way ?</p>","","uniqueness validation cqrs architecture this short follow bjarteâs post thereâs important thing consider when needing set validation why why these things need considered together and cannot just handled separately can distinct two different parameters uniqueness cardinality and scope cardinality there are mainly two types cardinality cardinality only one employee can the boss the model could provide isboss property every employeeâ¦ but constancy would very hard achieve especially cqrs architecture should read the preceding rule the company has only one boss the boss employee now can model boss property the company aggregate root that will reference the employee that the boss changing the boss can now atomic and consistent operation can see that had introduce upper level manage weâll the scope section cardinality employee should have different user names can clearly see here that user names must different because theyâll act identifiers this the goal almost any uniqueness constraint the property will used key lookup the cardinality also act this way itâs way tag entity you can ask âwho the boss and get the answer simple lookup the boss property that acts like bucket hash table scope there such thing global scope even when say âemployee should have different user namesâ there implicit scope the company even when say âyou card number should uniqueâ understand âat the country scopeâ even when say âyour dna should uniqueâ understand âat our life understanding scopeâ find the scope and see the volume data whose uniqueness should enforced said properties that have uniqueness constraint are usually used lookup values find those entities such they rarely take part the child entity domain logic instead having username property the employee entity why not have usernames key value collection the company that will give the employee for given user name the expected employee count expected limited range this the most appropriate solution the number can grow loading memory each company hydratation bit heavy keep the directory disk using table with unique key rdbms suggested bjarte any other way that provide the expected performance conclusion every case when uniqueness constraint appear property the property does not belong the the entity itself but should viewed key access the entity from the upper level scope you have examples that cannot solved this way","a:1:{s:3:\"tag\";a:4:{i:0;s:4:\"CQRS\";i:1;s:20:\"Domain Driven Design\";i:2;s:32:\"Distributed Domain Driven Design\";i:3;s:6:\"Design\";}}","1","0","1","1","7","0","0"
"456396","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-10-30 15:53:00","Europe/Paris","2009-10-30 14:53:50","2009-11-03 20:46:39","","post","xhtml","2009/10/30/Event-Sourcing-and-CQRS-Now","en","Event Sourcing and CQRS, Now !","","","<p>Enough talking, Action !</p>\r\n<p>Today, we will build a basic event sourcing infrastructure. Get the beta 2 of Visual Studio 2010, weâll be using C# dynamic features to go straight to our goal.</p>\r\n<h2>Then Event Storage</h2>\r\n<p>Letâs hide the ugly details of the event storage behind two simple interfaces :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEventStorage</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt; GetAggregateRootStore&lt;TAggregateRoot, TId&gt;()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">where</span> TAggregateRoot : AggregateRoot&lt;TId&gt;;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;<span style=\"COLOR: blue\">in</span> TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Append(TId id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: blue\">this</span>[TId id] { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>And we start with a minimal in memory implementation, the event storage first :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventStorage</span> : <span style=\"COLOR: #2b91af\">IEventStorage</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: blue\">dynamic</span>&gt; stores = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: blue\">dynamic</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt; GetAggregateRootStorage&lt;TAggregateRoot, TId&gt;() </p>\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; where</span> TAggregateRoot : AggregateRoot&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">dynamic</span> store;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (!stores.TryGetValue(<span style=\"COLOR: blue\">typeof</span>(TAggregateRoot), <span style=\"COLOR: blue\">out</span> store))</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; store = <span style=\"COLOR: blue\">new</span> AggregateRootStorage&lt;TId&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stores.Add(<span style=\"COLOR: blue\">typeof</span> (TAggregateRoot), store);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> store;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stores.Clear();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Here I could replace dynamic by object, and cast to requested type on return. I use dynamic because this kind of code is not compile time safe anyway. Thereâs a specific storage for each Aggregate Root type, especially depending on identifier type, for type safety.</p>\r\n<p>Then the AggregateRootStorage :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; class</span> <span style=\"COLOR: #2b91af\">AggregateRootStorage</span>&lt;TId&gt; : <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt; store = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Append(TId id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; aggregateRootEvents;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (!store.TryGetValue(id, <span style=\"COLOR: blue\">out</span> aggregateRootEvents))</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregateRootEvents = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; store.Add(id, aggregateRootEvents);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregateRootEvents.AddRange(events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: blue\">this</span>[TId id]</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> store[id]; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>It simply stores list of events associated with aggregate root identifier.</p>\r\n<h2>The Aggregate Root</h2>\r\n<p>Aggregate roots manage uncommitted events :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">bool</span> HasEvents { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Commit();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The interface can indicates whether there are events, returns the events, and clears the uncommitted events by committing.</p>\r\n<p>Quick implementation :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span> : <span style=\"COLOR: #2b91af\">IUncommittedEvents</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Append(<span style=\"COLOR: blue\">object</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; events.Add(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;.GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> events.GetEnumerator();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span> HasEvents</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> events.Count != 0; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> <span style=\"COLOR: #2b91af\">IUncommittedEvents</span>.Commit()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; events.Clear();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> events.GetEnumerator();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Nothing tricky here neither.</p>\r\n<p>Now, the IAggregateRoot interface used by the repository gives access to the uncommitted events:</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;<span style=\"COLOR: blue\">out</span> TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TId Id { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> UncommittedEvents { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The AggregateRoot class will maintain the uncommitted events :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt; : <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> Replay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic me = <span style=\"COLOR: blue\">this</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event <span style=\"COLOR: blue\">in</span> events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; me.Apply(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> Append(<span style=\"COLOR: blue\">object</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uncommittedEvents.Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> TId Id { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;.UncommittedEvents</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> uncommittedEvents; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The Append method will be use by child class to append events after they are applied.</p>\r\n<p>The Replay method is used in the child class constructor to rebuild the Aggregate Root state from events.</p>\r\n<p>Here I use a dynamic me variable to dispatch events on specific child class Apply methods. A .Net 2 or 3.5 implementation would use reflection to dispatch events on Apply methods.</p>\r\n<p>The UncommittedEvents property is implemented explicitly so that it does not appear in standard class use.</p>\r\n<h2>The Repository</h2>\r\n<p>The repository is just very slightly longer. I added a session concept so that several repositories can submit changes in a single transaction :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ISessionItem</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Repository</span>&lt;TId, TAggregateRoot&gt; : ISessionItem</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">where</span> TAggregateRoot : <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, TAggregateRoot&gt; users = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, TAggregateRoot&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt; aggregateRootStorage;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> Repository()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregateRootStorage = Session.Enlist(<span style=\"COLOR: blue\">this</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Add(TAggregateRoot user)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; users.Add(user.Id, user);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> TAggregateRoot <span style=\"COLOR: blue\">this</span>[TId id]</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> Find(id) ?? Load(id); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> TAggregateRoot Find(TId id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAggregateRoot user;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> users.TryGetValue(id, <span style=\"COLOR: blue\">out</span> user) ? user : <span style=\"COLOR: blue\">null</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> TAggregateRoot Load(TId id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> events = aggregateRootStorage[id];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> user = CreateInstance(id, events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; users.Add(id, user);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> user;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">abstract</span> TAggregateRoot CreateInstance(TId id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> SubmitChanges()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt; user <span style=\"COLOR: blue\">in</span> users.Values)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> uncomitedEvents = user.UncommittedEvents;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (uncomitedEvents.HasEvents)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aggregateRootStorage.Append(user.Id, uncomitedEvents);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PublishEvents(uncomitedEvents);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uncomitedEvents.Commit();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; users.Clear();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> PublishEvents(<span style=\"COLOR: #2b91af\">IUncommittedEvents</span> uncommittedEvents)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (dynamic @event <span style=\"COLOR: blue\">in</span> uncommittedEvents)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DomainEvents.Raise(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The constructor enlist the repository in current session.</p>\r\n<p>The Add method registers the aggregate root in the repository, its events will be persisted in SubmitChanges()</p>\r\n<p>The indexer finds an entity already in memory or loads it from the event store. The abstract CreateInstance method implementation will be responsible for instantiation.</p>\r\n<p>Submit changes does what is expected, and also publish committed events. Will see the trick with dynamic @events when we analyze domain events.</p>\r\n<h2>The Session and its Factory</h2>\r\n<p>Just to group the SubmitChanges on several repositories :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ISessionFactory</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">ISession</span> OpenSession();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">SessionFactory</span> : <span style=\"COLOR: #2b91af\">ISessionFactory</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> SessionFactory(<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.eventStorage = eventStorage;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">ISession</span> OpenSession()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Session</span>(eventStorage);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventStorage.Dispose();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ISession</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Session</span> : <span style=\"COLOR: #2b91af\">ISession</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">HashSet</span>&lt;<span style=\"COLOR: #2b91af\">ISessionItem</span>&gt; enlistedItems = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">HashSet</span>&lt;<span style=\"COLOR: #2b91af\">ISessionItem</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style=\"COLOR: #2b91af\">ThreadStatic</span>] <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">Session</span> current;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> Session(<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.eventStorage = eventStorage;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (current != <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">\"Cannot nest unit of work\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; current = <span style=\"COLOR: blue\">this</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">Session</span> Current</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> current; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> SubmitChanges()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> enlisted <span style=\"COLOR: blue\">in</span> enlistedItems)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enlisted.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enlistedItems.Clear();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; current = <span style=\"COLOR: blue\">null</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt; Enlist&lt;TId, TAggregateRoot&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<span style=\"COLOR: #2b91af\">Repository</span>&lt;TId, TAggregateRoot&gt; repository) </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">where</span> TAggregateRoot : <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> unitOfWork = Current;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unitOfWork.enlistedItems.Add(repository);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> unitOfWork.eventStorage.GetAggregateRootStorage&lt;TAggregateRoot, TId&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Ok almost everything is here. The last part, for events to be used by other parts of the system, needed to go CQRS.</p>\r\n<h2>Domain Events</h2>\r\n<p>Here, I made a minor variation on <a href=\"http://www.udidahan.com/2009/06/14/domain-events-salvation/\" target=\"_blank\">Udi Dahanâs DomainEvents</a> implementation :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">DomainEvents</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style=\"COLOR: #2b91af\">ThreadStatic</span>] <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Delegate</span>&gt; actions;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Handler</span>&gt; handlers;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span> Register&lt;T&gt;(<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt; callback) </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (actions == <span style=\"COLOR: blue\">null</span>) actions = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Delegate</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actions.Add(callback);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span> RegisterHanlder&lt;T&gt;(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (handlers == <span style=\"COLOR: blue\">null</span>) handlers = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Handler</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers.Add(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Handler</span>&lt;T&gt;(factory));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">//Raises the given domain event&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span> Raise&lt;T&gt;(T @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (actions != <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: #2b91af\">Delegate</span> action <span style=\"COLOR: blue\">in</span> actions) </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (action <span style=\"COLOR: blue\">is</span> <span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;) </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;) action)(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (handlers != <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> h <span style=\"COLOR: blue\">in</span> handlers)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (h.Handles&lt;T&gt;())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> handler= h.CreateInstance&lt;T&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler.Handle(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Handler</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">bool</span> Handles&lt;E&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt; CreateInstance&lt;E&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Handler</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">Handler</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Handler(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.factory = factory;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: blue\">bool</span> Handles&lt;E&gt;()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">typeof</span> (Handles&lt;E&gt;)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .IsAssignableFrom(<span style=\"COLOR: blue\">typeof</span> (T));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt; CreateInstance&lt;E&gt;()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt;)factory();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">Handles</span>&lt;<span style=\"COLOR: blue\">in</span> T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Handle(T @event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p><em>Edit : Changed the Handles&lt;E&gt;, T should be casted as Handles&lt;E&gt;, not as E, of course.</em></p>\r\n<p>Event handlers can be registerd as Action&lt;T&gt; delegates or as class that implements once or more Handles&lt;T&gt;.</p>\r\n<p>The private Handler and Handler&lt;T&gt; classes are used to find handlers that handles a specific message and dispatch it, without using a Dependency Injection Container like Udiâs implementation.</p>\r\n<p>The simple dynamic-fu in the repository was to call DomainEvents.Raise&lt;T&gt; using a dynamic dispatch. This way, Raise is always called with the actual event type in T. No tricky reflection is needed for the dispatch. inside Raise&lt;T&gt;, we can the rely on T as being the actual event type. Funky !</p>\r\n<h2>Next Timeâ¦</h2>\r\n<p>Thereâs already a lot of code for a single post, every thing is in place at infrastructure level. You can already try it for yourself if you can figure how to.</p>\r\n<p>The sample will come in the next post, stay tuned.</p>","<p>Enough talking, Action !</p>\n<p>Today, we will build a basic event sourcing infrastructure. Get the beta 2\nof Visual Studio 2010, weâll be using C# dynamic features to go straight to our\ngoal.</p>\n<h2>Then Event Storage</h2>\n<p>Letâs hide the ugly details of the event storage behind two simple\ninterfaces :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEventStorage</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;\nGetAggregateRootStore&lt;TAggregateRoot, TId&gt;()</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">where</span> TAggregateRoot : AggregateRoot&lt;TId&gt;;</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;<span style=\"COLOR: blue\">in</span> TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Append(TId id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: blue\">this</span>[TId id] {\n<span style=\"COLOR: blue\">get</span>; }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>And we start with a minimal in memory implementation, the event storage\nfirst :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventStorage</span> : <span style=\"COLOR: #2b91af\">IEventStorage</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: blue\">dynamic</span>&gt;\nstores = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>,\n<span style=\"COLOR: blue\">dynamic</span>&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;\nGetAggregateRootStorage&lt;TAggregateRoot, TId&gt;()</p>\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â Â Â Â Â Â Â Â \nwhere</span> TAggregateRoot : AggregateRoot&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">dynamic</span> store;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (!stores.TryGetValue(<span style=\"COLOR: blue\">typeof</span>(TAggregateRoot), <span style=\"COLOR: blue\">out</span> store))</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nstore = <span style=\"COLOR: blue\">new</span>\nAggregateRootStorage&lt;TId&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nstores.Add(<span style=\"COLOR: blue\">typeof</span> (TAggregateRoot),\nstore);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> store;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstores.Clear();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Here I could replace dynamic by object, and cast to requested type on\nreturn. I use dynamic because this kind of code is not compile time safe\nanyway. Thereâs a specific storage for each Aggregate Root type, especially\ndepending on identifier type, for type safety.</p>\n<p>Then the AggregateRootStorage :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  class</span>\n<span style=\"COLOR: #2b91af\">AggregateRootStorage</span>&lt;TId&gt; :\n<span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt;\nstore = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Append(TId\nid, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;\naggregateRootEvents;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (!store.TryGetValue(id, <span style=\"COLOR: blue\">out</span> aggregateRootEvents))</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \naggregateRootEvents = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nstore.Add(id, aggregateRootEvents);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \naggregateRootEvents.AddRange(events);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: blue\">this</span>[TId\nid]</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> store[id];\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>It simply stores list of events associated with aggregate root\nidentifier.</p>\n<h2>The Aggregate Root</h2>\n<p>Aggregate roots manage uncommitted events :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> : <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">bool</span> HasEvents { <span style=\"COLOR: blue\">get</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Commit();</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The interface can indicates whether there are events, returns the events,\nand clears the uncommitted events by committing.</p>\n<p>Quick implementation :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">UncommittedEvents</span> : <span style=\"COLOR: #2b91af\">IUncommittedEvents</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events = <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nAppend(<span style=\"COLOR: blue\">object</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nevents.Add(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerator</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;.GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> events.GetEnumerator();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span> HasEvents</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> events.Count\n!= 0; }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> <span style=\"COLOR: #2b91af\">IUncommittedEvents</span>.Commit()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nevents.Clear();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerator</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>.GetEnumerator()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> events.GetEnumerator();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Nothing tricky here neither.</p>\n<p>Now, the IAggregateRoot interface used by the repository gives access to the\nuncommitted events:</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;<span style=\"COLOR: blue\">out</span>\nTId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  TId Id {\n<span style=\"COLOR: blue\">get</span>; }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> UncommittedEvents { <span style=\"COLOR: blue\">get</span>; }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The AggregateRoot class will maintain the uncommitted events :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt; : <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents =\n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span>();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nReplay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  dynamic me =\n<span style=\"COLOR: blue\">this</span>;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event\n<span style=\"COLOR: blue\">in</span> events)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nme.Apply(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nAppend(<span style=\"COLOR: blue\">object</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nuncommittedEvents.Append(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> TId Id {\n<span style=\"COLOR: blue\">get</span>; }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IUncommittedEvents</span> <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;.UncommittedEvents</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span>\nuncommittedEvents; }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The Append method will be use by child class to append events after they are\napplied.</p>\n<p>The Replay method is used in the child class constructor to rebuild the\nAggregate Root state from events.</p>\n<p>Here I use a dynamic me variable to dispatch events on specific child class\nApply methods. A .Net 2 or 3.5 implementation would use reflection to dispatch\nevents on Apply methods.</p>\n<p>The UncommittedEvents property is implemented explicitly so that it does not\nappear in standard class use.</p>\n<h2>The Repository</h2>\n<p>The repository is just very slightly longer. I added a session concept so\nthat several repositories can submit changes in a single transaction :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span>\n<span style=\"COLOR: #2b91af\">ISessionItem</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> SubmitChanges();</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Repository</span>&lt;TId, TAggregateRoot&gt; :\nISessionItem</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">where</span> TAggregateRoot : <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, TAggregateRoot&gt; users\n= <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;TId, TAggregateRoot&gt;();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;\naggregateRootStorage;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> Repository()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \naggregateRootStorage = Session.Enlist(<span style=\"COLOR: blue\">this</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nAdd(TAggregateRoot user)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nusers.Add(user.Id, user);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> TAggregateRoot <span style=\"COLOR: blue\">this</span>[TId id]</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> Find(id) ??\nLoad(id); }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> TAggregateRoot Find(TId id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nTAggregateRoot user;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> users.TryGetValue(id, <span style=\"COLOR: blue\">out</span> user) ? user : <span style=\"COLOR: blue\">null</span>;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> TAggregateRoot Load(TId id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> events = aggregateRootStorage[id];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> user = CreateInstance(id, events);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nusers.Add(id, user);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> user;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">abstract</span>\nTAggregateRoot CreateInstance(TId id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nSubmitChanges()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt; user <span style=\"COLOR: blue\">in</span> users.Values)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> uncomitedEvents =\nuser.UncommittedEvents;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (uncomitedEvents.HasEvents)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n{</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \naggregateRootStorage.Append(user.Id, uncomitedEvents);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nPublishEvents(uncomitedEvents);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nuncomitedEvents.Commit();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n}</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nusers.Clear();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nPublishEvents(<span style=\"COLOR: #2b91af\">IUncommittedEvents</span>\nuncommittedEvents)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (dynamic @event <span style=\"COLOR: blue\">in</span> uncommittedEvents)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nDomainEvents.Raise(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The constructor enlist the repository in current session.</p>\n<p>The Add method registers the aggregate root in the repository, its events\nwill be persisted in SubmitChanges()</p>\n<p>The indexer finds an entity already in memory or loads it from the event\nstore. The abstract CreateInstance method implementation will be responsible\nfor instantiation.</p>\n<p>Submit changes does what is expected, and also publish committed events.\nWill see the trick with dynamic @events when we analyze domain events.</p>\n<h2>The Session and its Factory</h2>\n<p>Just to group the SubmitChanges on several repositories :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ISessionFactory</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">ISession</span> OpenSession();</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">SessionFactory</span> : <span style=\"COLOR: #2b91af\">ISessionFactory</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> SessionFactory(<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.eventStorage = eventStorage;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">ISession</span>\nOpenSession()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Session</span>(eventStorage);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \neventStorage.Dispose();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">ISession</span> : <span style=\"COLOR: #2b91af\">IDisposable</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> SubmitChanges();</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Session</span> : <span style=\"COLOR: #2b91af\">ISession</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">HashSet</span>&lt;<span style=\"COLOR: #2b91af\">ISessionItem</span>&gt; enlistedItems = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">HashSet</span>&lt;<span style=\"COLOR: #2b91af\">ISessionItem</span>&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  [<span style=\"COLOR: #2b91af\">ThreadStatic</span>] <span style=\"COLOR: blue\">private</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">Session</span> current;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">internal</span> Session(<span style=\"COLOR: #2b91af\">IEventStorage</span> eventStorage)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.eventStorage = eventStorage;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (current != <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">&quot;Cannot nest unit of work&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  current =\n<span style=\"COLOR: blue\">this</span>;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">Session</span> Current</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> current;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nSubmitChanges()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> enlisted\n<span style=\"COLOR: blue\">in</span> enlistedItems)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nenlisted.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nenlistedItems.Clear();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispose()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  current =\n<span style=\"COLOR: blue\">null</span>;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">IAggregateRootStorage</span>&lt;TId&gt;\nEnlist&lt;TId, TAggregateRoot&gt;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n(<span style=\"COLOR: #2b91af\">Repository</span>&lt;TId, TAggregateRoot&gt;\nrepository)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">where</span> TAggregateRoot : <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> unitOfWork = Current;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nunitOfWork.enlistedItems.Add(repository);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span>\nunitOfWork.eventStorage.GetAggregateRootStorage&lt;TAggregateRoot,\nTId&gt;();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Ok almost everything is here. The last part, for events to be used by other\nparts of the system, needed to go CQRS.</p>\n<h2>Domain Events</h2>\n<p>Here, I made a minor variation on <a href=\"http://www.udidahan.com/2009/06/14/domain-events-salvation/\" target=\"_blank\">Udi Dahanâs DomainEvents</a> implementation :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">DomainEvents</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  [<span style=\"COLOR: #2b91af\">ThreadStatic</span>] <span style=\"COLOR: blue\">private</span>\n<span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Delegate</span>&gt; actions;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Handler</span>&gt; handlers;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">void</span> Register&lt;T&gt;(<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt; callback)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (actions == <span style=\"COLOR: blue\">null</span>)\nactions = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Delegate</span>&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nactions.Add(callback);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">void</span> RegisterHanlder&lt;T&gt;(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (handlers == <span style=\"COLOR: blue\">null</span>)\nhandlers = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">List</span>&lt;<span style=\"COLOR: #2b91af\">Handler</span>&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nhandlers.Add(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Handler</span>&lt;T&gt;(factory));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">//Raises the given domain\neventÂ Â Â Â Â Â </span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">void</span> Raise&lt;T&gt;(T @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (actions != <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: #2b91af\">Delegate</span> action <span style=\"COLOR: blue\">in</span>\nactions)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (action <span style=\"COLOR: blue\">is</span>\n<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n((<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;) action)(@event);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (handlers != <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span>\nh <span style=\"COLOR: blue\">in</span> handlers)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n{</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (h.Handles&lt;T&gt;())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n{</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> handler= h.CreateInstance&lt;T&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nhandler.Handle(@event);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n}</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">abstract</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Handler</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span>\n<span style=\"COLOR: blue\">bool</span> Handles&lt;E&gt;();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span>\n<span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt;\nCreateInstance&lt;E&gt;();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">Handler</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">Handler</span></p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Handler(<span style=\"COLOR: #2b91af\">Func</span>&lt;T&gt; factory)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">this</span>.factory = factory;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: blue\">bool</span> Handles&lt;E&gt;()</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">typeof</span>\n(Handles&lt;E&gt;)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n.IsAssignableFrom(<span style=\"COLOR: blue\">typeof</span> (T));</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt;\nCreateInstance&lt;E&gt;()</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">Handles</span>&lt;E&gt;)factory();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">Handles</span>&lt;<span style=\"COLOR: blue\">in</span>\nT&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Handle(T @event);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p><em>Edit : Changed the Handles&lt;E&gt;, T should be casted as\nHandles&lt;E&gt;, not as E, of course.</em></p>\n<p>Event handlers can be registerd as Action&lt;T&gt; delegates or as class\nthat implements once or more Handles&lt;T&gt;.</p>\n<p>The private Handler and Handler&lt;T&gt; classes are used to find handlers\nthat handles a specific message and dispatch it, without using a Dependency\nInjection Container like Udiâs implementation.</p>\n<p>The simple dynamic-fu in the repository was to call\nDomainEvents.Raise&lt;T&gt; using a dynamic dispatch. This way, Raise is always\ncalled with the actual event type in T. No tricky reflection is needed for the\ndispatch. inside Raise&lt;T&gt;, we can the rely on T as being the actual event\ntype. Funky !</p>\n<h2>Next Timeâ¦</h2>\n<p>Thereâs already a lot of code for a single post, every thing is in place at\ninfrastructure level. You can already try it for yourself if you can figure how\nto.</p>\n<p>The sample will come in the next post, stay tuned.</p>","","event sourcing and cqrs now enough talking action today will build basic event sourcing infrastructure get the beta visual studio 2010 weâll using dynamic features straight our goal then event storage letâs hide the ugly details the event storage behind two simple interfaces public interface ieventstorage idisposable iaggregaterootstorage tid getaggregaterootstore taggregateroot tid where taggregateroot aggregateroot tid public interface iaggregaterootstorage tid void append tid ienumerable object events ienumerable object this tid get and start with minimal memory implementation the event storage first public class eventstorage ieventstorage private readonly dictionary type dynamic stores new dictionary type dynamic public iaggregaterootstorage tid getaggregaterootstorage taggregateroot tid where taggregateroot aggregateroot tid dynamic store stores trygetvalue typeof taggregateroot out store store new aggregaterootstorage tid stores add typeof taggregateroot store return store public void dispose stores clear here could replace dynamic object and cast requested type return use dynamic because this kind code not compile time safe anyway thereâs specific storage for each aggregate root type especially depending identifier type for type safety then the aggregaterootstorage class aggregaterootstorage tid iaggregaterootstorage tid private readonly dictionary tid list object store new dictionary tid list object public void append tid ienumerable object events list object aggregaterootevents store trygetvalue out aggregaterootevents aggregaterootevents new list object store add aggregaterootevents aggregaterootevents addrange events public ienumerable object this tid get return store simply stores list events associated with aggregate root identifier the aggregate root aggregate roots manage uncommitted events public interface iuncommittedevents ienumerable object bool hasevents get void commit the interface can indicates whether there are events returns the events and clears the uncommitted events committing quick implementation internal class uncommittedevents iuncommittedevents private readonly list object events new list object public void append object event events add event ienumerator object ienumerable object getenumerator return events getenumerator public bool hasevents get return events count void iuncommittedevents commit events clear ienumerator ienumerable getenumerator return events getenumerator nothing tricky here neither now the iaggregateroot interface used the repository gives access the uncommitted events public interface iaggregateroot out tid tid get iuncommittedevents uncommittedevents get the aggregateroot class will maintain the uncommitted events public abstract class aggregateroot tid iaggregateroot tid private readonly uncommittedevents uncommittedevents new uncommittedevents protected void replay ienumerable object events dynamic this foreach var event events apply event protected void append object event uncommittedevents append event public abstract tid get iuncommittedevents iaggregateroot tid uncommittedevents get return uncommittedevents the append method will use child class append events after they are applied the replay method used the child class constructor rebuild the aggregate root state from events here use dynamic variable dispatch events specific child class apply methods net implementation would use reflection dispatch events apply methods the uncommittedevents property implemented explicitly that does not appear standard class use the repository the repository just very slightly longer added session concept that several repositories can submit changes single transaction internal interface isessionitem void submitchanges public abstract class repository tid taggregateroot isessionitem where taggregateroot aggregateroot tid private readonly dictionary tid taggregateroot users new dictionary tid taggregateroot private readonly iaggregaterootstorage tid aggregaterootstorage protected repository aggregaterootstorage session enlist this public void add taggregateroot user users add user user public taggregateroot this tid get return find load private taggregateroot find tid taggregateroot user return users trygetvalue out user user null private taggregateroot load tid var events aggregaterootstorage var user createinstance events users add user return user protected abstract taggregateroot createinstance tid ienumerable object events public void submitchanges foreach iaggregateroot tid user users values var uncomitedevents user uncommittedevents uncomitedevents hasevents aggregaterootstorage append user uncomitedevents publishevents uncomitedevents uncomitedevents commit users clear protected void publishevents iuncommittedevents uncommittedevents foreach dynamic event uncommittedevents domainevents raise event the constructor enlist the repository current session the add method registers the aggregate root the repository its events will persisted submitchanges the indexer finds entity already memory loads from the event store the abstract createinstance method implementation will responsible for instantiation submit changes does what expected and also publish committed events will see the trick with dynamic events when analyze domain events the session and its factory just group the submitchanges several repositories public interface isessionfactory idisposable isession opensession public class sessionfactory isessionfactory private readonly ieventstorage eventstorage public sessionfactory ieventstorage eventstorage this eventstorage eventstorage public isession opensession return new session eventstorage public void dispose eventstorage dispose public interface isession idisposable void submitchanges public class session isession private readonly ieventstorage eventstorage private readonly hashset isessionitem enlisteditems new hashset isessionitem threadstatic private static session current internal session ieventstorage eventstorage this eventstorage eventstorage current null throw new invalidoperationexception quot cannot nest unit work quot current this private static session current get return current public void submitchanges foreach var enlisted enlisteditems enlisted submitchanges enlisteditems clear public void dispose current null internal static iaggregaterootstorage tid enlist tid taggregateroot repository tid taggregateroot repository where taggregateroot aggregateroot tid var unitofwork current unitofwork enlisteditems add repository return unitofwork eventstorage getaggregaterootstorage taggregateroot tid almost everything here the last part for events used other parts the system needed cqrs domain events here made minor variation udi dahanâs domainevents implementation public static class domainevents threadstatic private static list delegate actions private static list handler handlers public static void register action callback actions null actions new list delegate actions add callback public static void registerhanlder func factory handlers null handlers new list handler handlers add new handler factory raises the given domain event public static void raise event actions null foreach delegate action actions action action action action event handlers null foreach var handlers handles var handler createinstance handler handle event private abstract class handler public abstract bool handles public abstract handles createinstance private class handler handler private readonly func factory public handler func factory this factory factory public override bool handles return typeof handles isassignablefrom typeof public override handles createinstance return handles factory public interface handles void handle event edit changed the handles should casted handles not course event handlers can registerd action delegates class that implements once more handles the private handler and handler classes are used find handlers that handles specific message and dispatch without using dependency injection container like udiâs implementation the simple dynamic the repository was call domainevents raise using dynamic dispatch this way raise always called with the actual event type tricky reflection needed for the dispatch inside raise can the rely being the actual event type funky next timeâ¦ thereâs already lot code for single post every thing place infrastructure level you can already try for yourself you can figure how the sample will come the next post stay tuned","a:1:{s:3:\"tag\";a:4:{i:0;s:10:\"Repository\";i:1;s:20:\"Domain Driven Design\";i:2;s:32:\"Distributed Domain Driven Design\";i:3;s:4:\"CQRS\";}}","1","1","1","1","12","1","0"
"457100","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-11-02 15:45:00","Europe/Paris","2009-11-02 14:45:16","2009-11-03 20:45:44","","post","xhtml","2009/11/02/Event-Sourcing-and-CQRS-Lets-use-it","en","Event Sourcing and CQRS, Let's use it.","","","<p><a href=\"http://thinkbeforecoding.com/post/2009/10/30/Event-Sourcing-and-CQRS%2C-Now-%21\" target=\"_blank\">Last time</a>, we started a very basic Event Sourcing/Domain Events/CQRS framework. <em>Be careful, I made an edit in the nested DomainEvents+Handler&lt;T&gt;.Handles&lt;E&gt;() method, the AggregateRoot.Replay method will not work as is, but we wonât need it.</em></p>\r\n<p>Weâll build an equally simplistic application for personal library management.</p>\r\n<p>The Ubiquitous Language will be minimal.</p>\r\n<p>A <strong>Book</strong> can be <strong>Registered</strong> with a <strong>Title</strong> and an <strong>ISBN</strong>.</p>\r\n<p>A <strong>Book</strong> can be <strong>Lent</strong> to a <strong>Borrower</strong> at some <strong>Date</strong> for an <strong>Expected Time Span</strong>.</p>\r\n<p>A <strong>Book</strong> can then be <strong>Returned</strong>. If it is <strong>Returned</strong> after <strong>Expected Time Span</strong>, the return is <strong>Late</strong>.</p>\r\n<p>Thatâs enough for our first try.</p>\r\n<h2>The Command Context</h2>\r\n<h3>The State Change Events</h3>\r\n<p>Here is the code for the three events that we found in the Ubiquitous language:</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookRegistered</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> Title;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> Isbn;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> BookRegistered(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> title, <span style=\"COLOR: blue\">string</span> isbn)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Title = title;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Isbn = isbn;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookLent</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> Borrower;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">DateTime</span> Date;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">TimeSpan</span> ExpectedDuration;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> BookLent(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> borrower, <span style=\"COLOR: #2b91af\">DateTime</span> date, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">TimeSpan</span> expectedDuration)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Borrower = borrower;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date = date;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpectedDuration = expectedDuration;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookReturned</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">string</span> By;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">TimeSpan</span> After;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">bool</span> Late;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> BookReturned(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> @by, <span style=\"COLOR: #2b91af\">TimeSpan</span> after, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">bool</span> late)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; By = by;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; After = after;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Late = late;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>These events will usually be serialized to the event storage and on a service bus, but here everything runs in memory.</p>\r\n<h3>The Book Aggregate Root</h3>\r\n<p>The book will need to be referenced by an identity in our system. Weâll hide a Guid behind a BookId struct :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">BookId</span> : <span style=\"COLOR: #2b91af\">IEquatable</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> BookId(<span style=\"COLOR: #2b91af\">Guid</span> id) { <span style=\"COLOR: blue\">this</span>.id = id; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">BookId</span> NewBookId() { <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookId</span>(<span style=\"COLOR: #2b91af\">Guid</span>.NewGuid()); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span> Equals(<span style=\"COLOR: #2b91af\">BookId</span> other) { <span style=\"COLOR: blue\">return</span> other.id.Equals(id); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: blue\">bool</span> Equals(<span style=\"COLOR: blue\">object</span> obj)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (ReferenceEquals(<span style=\"COLOR: blue\">null</span>, obj)) <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">false</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (obj.GetType() != <span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">BookId</span>)) <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">false</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> Equals((<span style=\"COLOR: #2b91af\">BookId</span>)obj);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: blue\">int</span> GetHashCode() { <span style=\"COLOR: blue\">return</span> id.GetHashCode(); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Now, the Book class itself :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp; public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Book</span> : AggregateRoot&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">BookId</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span> title;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span> isbn;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span> borrower;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">DateTime</span> date;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">TimeSpan</span> expectedDuration;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">dynamic</span> @event <span style=\"COLOR: blue\">in</span> events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Apply(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> title, <span style=\"COLOR: blue\">string</span> isbn)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookRegistered(id, title, isbn);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Apply(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: #2b91af\">BookId</span> Id { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> id; } }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Lend(<span style=\"COLOR: blue\">string</span> borrower, <span style=\"COLOR: #2b91af\">DateTime</span> date, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">TimeSpan</span> expectedDuration)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (<span style=\"COLOR: blue\">this</span>.borrower != <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">\"The book is already lent.\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> BookLent(id, borrower, date, expectedDuration);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Apply(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Return(<span style=\"COLOR: #2b91af\">DateTime</span> returnDate)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (borrower == <span style=\"COLOR: blue\">null</span>)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">\"The book has not been lent.\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (returnDate &lt; date)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">ArgumentException</span>(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #a31515\">\"The book cannot be returned before being lent.\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> actualDuration = returnDate - date;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookReturned(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; borrower, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actualDuration,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actualDuration &gt; expectedDuration);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Apply(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> Apply(BookRegistered @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title = @event.Title;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isbn = @event.Isbn;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> Apply(BookLent @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; borrower = @event.Borrower;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; date = @event.Date;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expectedDuration = @event.ExpectedDuration;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> Apply(BookReturned @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; borrower = <span style=\"COLOR: blue\">null</span>;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp; }</p>\r\n</div>\r\n<p>The class implements AggregateRoot&lt;BookId&gt; and so provides an explicitly implemented UncommittedEvents property.</p>\r\n<p>The first .ctor is used to load the Aggregate Root, the second one is used to build a new Aggregate Root.</p>\r\n<p>The public methods (Lend and Return) are the commands on the Aggregate Root as defined in the Ubiquitous Language.</p>\r\n<p>The structure is always the same :</p>\r\n<ol>\r\n<li>Validate arguments and state </li>\r\n<li>Prepare state transition using domain logic </li>\r\n<li>Apply state transition (no domain logic should happen here) </li>\r\n<li>Append state transition to uncommitted events </li>\r\n</ol>\r\n<p>The first .ctor uses dynamic to dispatch each event object on the corresponding specific Apply method. In case you implement the pattern is previous C# version, it is advised to provide a Replay method in the base class that will perform the dynamic dispatch based on reflection.</p>\r\n<p>Thatâs all for the entity. No ORM, no mappingâ¦ easy.</p>\r\n<h3>The Repository</h3>\r\n<p>It is often clearer to provide a specific repository interface that exposes only available methods. With event sourcing, itâs not that usefulâ¦ weâll write it anyway in case youâd like to use dependency injection. The interface is part of the domain and should be in the same assembly as the entity and the events.</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IBookRepository</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Add(<span style=\"COLOR: #2b91af\">Book</span> book);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Book</span> <span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">BookId</span> id] { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The implementation will simply derive from the Repository base class, it can be in the application assembly.</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookRepository</span> : </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Repository&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">Book</span>&gt;,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IBookRepository</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">override</span> <span style=\"COLOR: #2b91af\">Book</span> CreateInstance(<span style=\"COLOR: #2b91af\">BookId</span> id, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Book</span>(id, events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Add and the indexer are implemented by the base class. The only thing to provide is a way to instantiate the class with expected parameters.</p>\r\n<p>We could use Activator.CreateInstance or reflection to provide a generic implementation. I choose to make it simpler to read.</p>\r\n<h2>The Query context</h2>\r\n<h3>The Report Database</h3>\r\n<p>Weâll mimic a reporting table of book lent state :</p>\r\n<p>This would be the data returned from table rows :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookState</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">BookId</span> Id { <span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">string</span> Title { <span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span> Lent { <span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>And this will hide the data table implementation :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IBookStateQuery</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetBookStates();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">BookState</span> GetBookState(<span style=\"COLOR: #2b91af\">BookId</span> id);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetLentBooks();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> AddBookState(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> title);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> SetLent(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">bool</span> lent);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>We can simply query data to report in the UI, and update data state.</p>\r\n<p>Implementation will be in memory for now :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; class</span> <span style=\"COLOR: #2b91af\">BookStateQuery</span> : <span style=\"COLOR: #2b91af\">IBookStateQuery</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">BookState</span>&gt; states = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">BookState</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetBookStates()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> states.Values;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">BookState</span> GetBookState(<span style=\"COLOR: #2b91af\">BookId</span> id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> states[id];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetLentBooks()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> states.Values.Where(b =&gt; b.Lent);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> AddBookState(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> title)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> state = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookState</span> { Id = id, Title = title };</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; states.Add(id, state);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> SetLent(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">bool</span> lent)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; states[id].Lent = lent;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The important point here is that no domain logic occurs.</p>\r\n<p>A RDBMS implementation could use an ORM or simply build DTOs from a DataReader.</p>\r\n<h2>The event handlers</h2>\r\n<p>We can now denormalize domain states to the reporting database using an event handler :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; class</span> <span style=\"COLOR: #2b91af\">BookStateHandler</span> :</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; Handles&lt;<span style=\"COLOR: #2b91af\">BookRegistered</span>&gt;,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; Handles&lt;<span style=\"COLOR: #2b91af\">BookLent</span>&gt;,</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; Handles&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">IBookStateQuery</span> stateQuery;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> BookStateHandler(<span style=\"COLOR: #2b91af\">IBookStateQuery</span> stateQuery)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.stateQuery = stateQuery;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Handle(<span style=\"COLOR: #2b91af\">BookRegistered</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stateQuery.AddBookState(@event.Id, @event.Title);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Handle(<span style=\"COLOR: #2b91af\">BookLent</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Book lent to {0}\"</span>, @event.Borrower);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stateQuery.SetLent(@event.Id, <span style=\"COLOR: blue\">true</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Handle(<span style=\"COLOR: #2b91af\">BookReturned</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"Book returned by {0}\"</span>, @event.By);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stateQuery.SetLent(@event.Id, <span style=\"COLOR: blue\">false</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The Console.WriteLine are here to view when things happen, you would usually not use it in your production code. Logging this would not provide much benefits since all the events are already stored in the EventStorage.</p>\r\n<p>Using this handler, the IBookStateQuery will be up to date with current Command Context state. In an asynchronous environment, this is where eventual consistency is introduced.</p>\r\n<p>We will also add a service that will notify when a user returned a book too late :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">LateReturnNotifier</span> :</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; Handles&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Handle(<span style=\"COLOR: #2b91af\">BookReturned</span> @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (@event.Late)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"{0} was late\"</span>, @event.By);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Here again, no domain logic, we just do the infrastructure stuff, usually sending an email or a SMS.</p>\r\n<h2>View it in Action</h2>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">&nbsp;&nbsp;&nbsp; class</span> <span style=\"COLOR: #2b91af\">Program</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span> Main(<span style=\"COLOR: blue\">string</span>[] args)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ISessionFactory factory = <span style=\"COLOR: blue\">new</span> SessionFactory(<span style=\"COLOR: blue\">new</span> EventStorage());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IBookStateQuery</span> query = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookStateQuery</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DomainEvents.RegisterHanlder(() =&gt; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookStateHandler</span>(query));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DomainEvents.RegisterHanlder(() =&gt; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">LateReturnNotifier</span>());</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> bookId = <span style=\"COLOR: #2b91af\">BookId</span>.NewBookId();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session = factory.OpenSession())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; books.Add(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Book</span>(bookId, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #a31515\">\"The Lord of the Rings\"</span>, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #a31515\">\"0-618-15396-9\"</span>));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowBooks(query);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session = factory.OpenSession())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; book.Lend(<span style=\"COLOR: #a31515\">\"Alice\"</span>, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 2), </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">TimeSpan</span>.FromDays(14));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowBooks(query);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session = factory.OpenSession())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; book.Return(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 8));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowBooks(query);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session = factory.OpenSession())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; book.Lend(<span style=\"COLOR: #a31515\">\"Bob\"</span>, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 9), </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">TimeSpan</span>.FromDays(14));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowBooks(query);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session = factory.OpenSession())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; book.Return(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2010, 03, 1));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.SubmitChanges();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowBooks(query);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span> ShowBooks(<span style=\"COLOR: #2b91af\">IBookStateQuery</span> query)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> state <span style=\"COLOR: blue\">in</span> query.GetBookStates())</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">\"{0} is {1}.\"</span>, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state.Title, </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state.Lent ? <span style=\"COLOR: #a31515\">\"lent\"</span> : <span style=\"COLOR: #a31515\">\"home\"</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>We start by instantiating storage for the command context (the ISessionFactory) and the query context (the <span style=\"COLOR: #2b91af\">IBookStateQuery</span>). In production youâll use persistent storages (a persistent event storage and a RDBMS). I highly recommend using a Dependency Injection Container for real size projects.</p>\r\n<p>Then we wire the handlers on domain events.</p>\r\n<p>The application can start.</p>\r\n<ul>\r\n<li>We register a book in the library.</li>\r\n<li>We lend it to Alice on 2009-11-02 for 14 days</li>\r\n<li>She returns it on 2009-11-08, sheâs on time</li>\r\n<li>We lend it to Bob on 2009-11-09 for 14 days,</li>\r\n<li>He returns it on 2010-03-01, heâs late</li>\r\n</ul>\r\n<p>The output is the following :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span> home.&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written from state</span></p>\r\n<p style=\"MARGIN: 0\">Book lent to Alice&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written by the book state handler</span></p>\r\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span> lent.&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written from state</span></p>\r\n<p style=\"MARGIN: 0\">Book returned by Alice&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written by the book state handler</span></p>\r\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span> home.&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written from state</span></p>\r\n<p style=\"MARGIN: 0\">Book lent to Bob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written by the book state handler</span></p>\r\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span> lent.&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written from state</span></p>\r\n<p style=\"MARGIN: 0\">Book returned by Bob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written by the book state handler</span></p>\r\n<p style=\"MARGIN: 0\">Bob was late&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written by the late return notifier</span></p>\r\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span> home.&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// written from state</span></p>\r\n</div>\r\n<p>We have here a clear separation between Command that handles the domain logic and Query that handles presentation logic.</p>\r\n<p>Have fun. Questions and remarks expected !</p>","<p><a href=\"http://thinkbeforecoding.com/post/2009/10/30/Event-Sourcing-and-CQRS%2C-Now-%21\" target=\"_blank\">Last time</a>, we started a very basic Event Sourcing/Domain\nEvents/CQRS framework. <em>Be careful, I made an edit in the nested\nDomainEvents+Handler&lt;T&gt;.Handles&lt;E&gt;() method, the\nAggregateRoot.Replay method will not work as is, but we wonât need it.</em></p>\n<p>Weâll build an equally simplistic application for personal library\nmanagement.</p>\n<p>The Ubiquitous Language will be minimal.</p>\n<p>A <strong>Book</strong> can be <strong>Registered</strong> with a\n<strong>Title</strong> and an <strong>ISBN</strong>.</p>\n<p>A <strong>Book</strong> can be <strong>Lent</strong> to a\n<strong>Borrower</strong> at some <strong>Date</strong> for an <strong>Expected\nTime Span</strong>.</p>\n<p>A <strong>Book</strong> can then be <strong>Returned</strong>. If it is\n<strong>Returned</strong> after <strong>Expected Time Span</strong>, the return\nis <strong>Late</strong>.</p>\n<p>Thatâs enough for our first try.</p>\n<h2>The Command Context</h2>\n<h3>The State Change Events</h3>\n<p>Here is the code for the three events that we found in the Ubiquitous\nlanguage:</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookRegistered</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> Title;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> Isbn;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> BookRegistered(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span>\ntitle, <span style=\"COLOR: blue\">string</span> isbn)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Title =\ntitle;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Isbn =\nisbn;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookLent</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> Borrower;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">DateTime</span> Date;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">TimeSpan</span> ExpectedDuration;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> BookLent(<span style=\"COLOR: #2b91af\">BookId</span>\nid, <span style=\"COLOR: blue\">string</span> borrower, <span style=\"COLOR: #2b91af\">DateTime</span> date,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">TimeSpan</span> expectedDuration)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Borrower =\nborrower;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Date =\ndate;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nExpectedDuration = expectedDuration;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookReturned</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">BookId</span> Id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">string</span> By;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">TimeSpan</span> After;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: blue\">bool</span> Late;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> BookReturned(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> @by,\n<span style=\"COLOR: #2b91af\">TimeSpan</span> after,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">bool</span> late)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  By = by;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  After =\nafter;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  Late =\nlate;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>These events will usually be serialized to the event storage and on a\nservice bus, but here everything runs in memory.</p>\n<h3>The Book Aggregate Root</h3>\n<p>The book will need to be referenced by an identity in our system. Weâll hide\na Guid behind a BookId struct :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">BookId</span> : <span style=\"COLOR: #2b91af\">IEquatable</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">Guid</span> id;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> BookId(<span style=\"COLOR: #2b91af\">Guid</span>\nid) { <span style=\"COLOR: blue\">this</span>.id = id; }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">BookId</span> NewBookId() { <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookId</span>(<span style=\"COLOR: #2b91af\">Guid</span>.NewGuid()); }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span>\nEquals(<span style=\"COLOR: #2b91af\">BookId</span> other) { <span style=\"COLOR: blue\">return</span> other.id.Equals(id); }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: blue\">bool</span> Equals(<span style=\"COLOR: blue\">object</span> obj)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (ReferenceEquals(<span style=\"COLOR: blue\">null</span>,\nobj)) <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">false</span>;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (obj.GetType() != <span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">BookId</span>))\n<span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">false</span>;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> Equals((<span style=\"COLOR: #2b91af\">BookId</span>)obj);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: blue\">int</span> GetHashCode() { <span style=\"COLOR: blue\">return</span> id.GetHashCode(); }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Now, the Book class itself :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â  public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Book</span>\n: AggregateRoot&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">BookId</span> id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span> title;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span> isbn;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">string</span>\nborrower;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">DateTime</span>\ndate;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">TimeSpan</span>\nexpectedDuration;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id,\n<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">dynamic</span> @event <span style=\"COLOR: blue\">in</span>\nevents)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \nApply(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id,\n<span style=\"COLOR: blue\">string</span> title, <span style=\"COLOR: blue\">string</span> isbn)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookRegistered(id, title, isbn);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nApply(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nAppend(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: #2b91af\">BookId</span> Id { <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> id; } }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nLend(<span style=\"COLOR: blue\">string</span> borrower, <span style=\"COLOR: #2b91af\">DateTime</span> date,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">TimeSpan</span> expectedDuration)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (<span style=\"COLOR: blue\">this</span>.borrower != <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">&quot;The book is already lent.&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> @event =</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> BookLent(id, borrower, date,\nexpectedDuration);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nApply(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nAppend(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nReturn(<span style=\"COLOR: #2b91af\">DateTime</span> returnDate)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (borrower == <span style=\"COLOR: blue\">null</span>)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">InvalidOperationException</span>(<span style=\"COLOR: #a31515\">&quot;The book has not been lent.&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (returnDate &lt; date)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">throw</span> <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">ArgumentException</span>(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #a31515\">&quot;The book cannot be returned before being\nlent.&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> actualDuration = returnDate - date;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookReturned(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nid,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nborrower,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nactualDuration,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nactualDuration &gt; expectedDuration);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nApply(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nAppend(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nApply(BookRegistered @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \ntitle = @event.Title;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nisbn = @event.Isbn;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nApply(BookLent @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nborrower = @event.Borrower;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \ndate = @event.Date;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nexpectedDuration = @event.ExpectedDuration;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nApply(BookReturned @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â Â Â \nborrower = <span style=\"COLOR: blue\">null</span>;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â  }</p>\n</div>\n<p>The class implements AggregateRoot&lt;BookId&gt; and so provides an\nexplicitly implemented UncommittedEvents property.</p>\n<p>The first .ctor is used to load the Aggregate Root, the second one is used\nto build a new Aggregate Root.</p>\n<p>The public methods (Lend and Return) are the commands on the Aggregate Root\nas defined in the Ubiquitous Language.</p>\n<p>The structure is always the same :</p>\n<ol>\n<li>Validate arguments and state</li>\n<li>Prepare state transition using domain logic</li>\n<li>Apply state transition (no domain logic should happen here)</li>\n<li>Append state transition to uncommitted events</li>\n</ol>\n<p>The first .ctor uses dynamic to dispatch each event object on the\ncorresponding specific Apply method. In case you implement the pattern is\nprevious C# version, it is advised to provide a Replay method in the base class\nthat will perform the dynamic dispatch based on reflection.</p>\n<p>Thatâs all for the entity. No ORM, no mappingâ¦ easy.</p>\n<h3>The Repository</h3>\n<p>It is often clearer to provide a specific repository interface that exposes\nonly available methods. With event sourcing, itâs not that usefulâ¦ weâll write\nit anyway in case youâd like to use dependency injection. The interface is part\nof the domain and should be in the same assembly as the entity and the\nevents.</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IBookRepository</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Add(<span style=\"COLOR: #2b91af\">Book</span>\nbook);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Book</span> <span style=\"COLOR: blue\">this</span>[<span style=\"COLOR: #2b91af\">BookId</span> id] { <span style=\"COLOR: blue\">get</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The implementation will simply derive from the Repository base class, it can\nbe in the application assembly.</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">BookRepository</span> :</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â \nRepository&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">Book</span>&gt;,</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IBookRepository</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">override</span>\n<span style=\"COLOR: #2b91af\">Book</span> CreateInstance(<span style=\"COLOR: #2b91af\">BookId</span> id,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Book</span>(id, events);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Add and the indexer are implemented by the base class. The only thing to\nprovide is a way to instantiate the class with expected parameters.</p>\n<p>We could use Activator.CreateInstance or reflection to provide a generic\nimplementation. I choose to make it simpler to read.</p>\n<h2>The Query context</h2>\n<h3>The Report Database</h3>\n<p>Weâll mimic a reporting table of book lent state :</p>\n<p>This would be the data returned from table rows :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">BookState</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">BookId</span> Id {\n<span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">string</span> Title {\n<span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">bool</span> Lent {\n<span style=\"COLOR: blue\">get</span>; <span style=\"COLOR: blue\">set</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>And this will hide the data table implementation :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IBookStateQuery</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetBookStates();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">BookState</span> GetBookState(<span style=\"COLOR: #2b91af\">BookId</span> id);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetLentBooks();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> AddBookState(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span>\ntitle);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> SetLent(<span style=\"COLOR: #2b91af\">BookId</span>\nid, <span style=\"COLOR: blue\">bool</span> lent);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>We can simply query data to report in the UI, and update data state.</p>\n<p>Implementation will be in memory for now :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  class</span>\n<span style=\"COLOR: #2b91af\">BookStateQuery</span> : <span style=\"COLOR: #2b91af\">IBookStateQuery</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">BookState</span>&gt; states =</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>, <span style=\"COLOR: #2b91af\">BookState</span>&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetBookStates()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> states.Values;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">BookState</span>\nGetBookState(<span style=\"COLOR: #2b91af\">BookId</span> id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> states[id];</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: #2b91af\">BookState</span>&gt; GetLentBooks()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> states.Values.Where(b =&gt; b.Lent);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nAddBookState(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">string</span> title)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> state = <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">BookState</span> { Id = id, Title = title };</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstates.Add(id, state);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nSetLent(<span style=\"COLOR: #2b91af\">BookId</span> id, <span style=\"COLOR: blue\">bool</span> lent)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstates[id].Lent = lent;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The important point here is that no domain logic occurs.</p>\n<p>A RDBMS implementation could use an ORM or simply build DTOs from a\nDataReader.</p>\n<h2>The event handlers</h2>\n<p>We can now denormalize domain states to the reporting database using an\nevent handler :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  class</span>\n<span style=\"COLOR: #2b91af\">BookStateHandler</span> :</p>\n<p style=\"MARGIN: 0\">Â Â Â  Handles&lt;<span style=\"COLOR: #2b91af\">BookRegistered</span>&gt;,</p>\n<p style=\"MARGIN: 0\">Â Â Â  Handles&lt;<span style=\"COLOR: #2b91af\">BookLent</span>&gt;,</p>\n<p style=\"MARGIN: 0\">Â Â Â  Handles&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">IBookStateQuery</span> stateQuery;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> BookStateHandler(<span style=\"COLOR: #2b91af\">IBookStateQuery</span> stateQuery)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.stateQuery = stateQuery;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nHandle(<span style=\"COLOR: #2b91af\">BookRegistered</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstateQuery.AddBookState(@event.Id, @event.Title);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nHandle(<span style=\"COLOR: #2b91af\">BookLent</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Book\nlent to {0}&quot;</span>, @event.Borrower);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstateQuery.SetLent(@event.Id, <span style=\"COLOR: blue\">true</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nHandle(<span style=\"COLOR: #2b91af\">BookReturned</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;Book\nreturned by {0}&quot;</span>, @event.By);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nstateQuery.SetLent(@event.Id, <span style=\"COLOR: blue\">false</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The Console.WriteLine are here to view when things happen, you would usually\nnot use it in your production code. Logging this would not provide much\nbenefits since all the events are already stored in the EventStorage.</p>\n<p>Using this handler, the IBookStateQuery will be up to date with current\nCommand Context state. In an asynchronous environment, this is where eventual\nconsistency is introduced.</p>\n<p>We will also add a service that will notify when a user returned a book too\nlate :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">LateReturnNotifier</span> :</p>\n<p style=\"MARGIN: 0\">Â Â Â  Handles&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nHandle(<span style=\"COLOR: #2b91af\">BookReturned</span> @event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">if</span> (@event.Late)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;{0} was late&quot;</span>, @event.By);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Here again, no domain logic, we just do the infrastructure stuff, usually\nsending an email or a SMS.</p>\n<h2>View it in Action</h2>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\"><span style=\"COLOR: blue\">Â Â Â  class</span>\n<span style=\"COLOR: #2b91af\">Program</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">void</span>\nMain(<span style=\"COLOR: blue\">string</span>[] args)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nISessionFactory factory = <span style=\"COLOR: blue\">new</span>\nSessionFactory(<span style=\"COLOR: blue\">new</span>\nEventStorage());Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">IBookStateQuery</span> query = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookStateQuery</span>();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nDomainEvents.RegisterHanlder(() =&gt; <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">BookStateHandler</span>(query));</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nDomainEvents.RegisterHanlder(() =&gt; <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">LateReturnNotifier</span>());</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> bookId = <span style=\"COLOR: #2b91af\">BookId</span>.NewBookId();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session =\nfactory.OpenSession())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nbooks.Add(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Book</span>(bookId,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #a31515\">&quot;The Lord of the Rings&quot;</span>,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #a31515\">&quot;0-618-15396-9&quot;</span>));</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsession.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nShowBooks(query);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session =\nfactory.OpenSession())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nbook.Lend(<span style=\"COLOR: #a31515\">&quot;Alice&quot;</span>,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 2),</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">TimeSpan</span>.FromDays(14));</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsession.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nShowBooks(query);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session =\nfactory.OpenSession())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nbook.Return(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 8));</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsession.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nShowBooks(query);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session =\nfactory.OpenSession())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nbook.Lend(<span style=\"COLOR: #a31515\">&quot;Bob&quot;</span>,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2009, 11, 9),</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">TimeSpan</span>.FromDays(14));</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsession.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nShowBooks(query);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">using</span> (<span style=\"COLOR: blue\">var</span> session =\nfactory.OpenSession())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> books = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRepository</span>();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> book = books[bookId];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nbook.Return(<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">DateTime</span>(2010, 03, 1));</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nsession.SubmitChanges();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nShowBooks(query);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">void</span> ShowBooks(<span style=\"COLOR: #2b91af\">IBookStateQuery</span> query)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> state\n<span style=\"COLOR: blue\">in</span> query.GetBookStates())</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: #2b91af\">Console</span>.WriteLine(<span style=\"COLOR: #a31515\">&quot;{0} is {1}.&quot;</span>,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nstate.Title,</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nstate.Lent ? <span style=\"COLOR: #a31515\">&quot;lent&quot;</span> : <span style=\"COLOR: #a31515\">&quot;home&quot;</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>We start by instantiating storage for the command context (the\nISessionFactory) and the query context (the <span style=\"COLOR: #2b91af\">IBookStateQuery</span>). In production youâll use persistent\nstorages (a persistent event storage and a RDBMS). I highly recommend using a\nDependency Injection Container for real size projects.</p>\n<p>Then we wire the handlers on domain events.</p>\n<p>The application can start.</p>\n<ul>\n<li>We register a book in the library.</li>\n<li>We lend it to Alice on 2009-11-02 for 14 days</li>\n<li>She returns it on 2009-11-08, sheâs on time</li>\n<li>We lend it to Bob on 2009-11-09 for 14 days,</li>\n<li>He returns it on 2010-03-01, heâs late</li>\n</ul>\n<p>The output is the following :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span>\nhome.Â Â Â  <span style=\"COLOR: green\">// written from\nstate</span></p>\n<p style=\"MARGIN: 0\">Book lent to\nAliceÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: green\">// written by the book state handler</span></p>\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span>\nlent.Â Â Â  <span style=\"COLOR: green\">// written from\nstate</span></p>\n<p style=\"MARGIN: 0\">Book returned by\nAliceÂ Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: green\">// written by the book state handler</span></p>\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span>\nhome.Â Â Â  <span style=\"COLOR: green\">// written from\nstate</span></p>\n<p style=\"MARGIN: 0\">Book lent to\nBobÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: green\">// written by the book state handler</span></p>\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span>\nlent.Â Â Â  <span style=\"COLOR: green\">// written from\nstate</span></p>\n<p style=\"MARGIN: 0\">Book returned by\nBobÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: green\">// written by the book state handler</span></p>\n<p style=\"MARGIN: 0\">Bob was\nlateÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: green\">// written by the late return notifier</span></p>\n<p style=\"MARGIN: 0\">The Lord of the Rings <span style=\"COLOR: blue\">is</span>\nhome.Â Â Â  <span style=\"COLOR: green\">// written from\nstate</span></p>\n</div>\n<p>We have here a clear separation between Command that handles the domain\nlogic and Query that handles presentation logic.</p>\n<p>Have fun. Questions and remarks expected !</p>","","event sourcing and cqrs let use last time started very basic event sourcing domain events cqrs framework careful made edit the nested domainevents handler handles method the aggregateroot replay method will not work but wonât need weâll build equally simplistic application for personal library management the ubiquitous language will minimal book can registered with title and isbn book can lent borrower some date for expected time span book can then returned returned after expected time span the return late thatâs enough for our first try the command context the state change events here the code for the three events that found the ubiquitous language public class bookregistered public readonly bookid public readonly string title public readonly string isbn public bookregistered bookid string title string isbn title title isbn isbn public class booklent public readonly bookid public readonly string borrower public readonly datetime date public readonly timespan expectedduration public booklent bookid string borrower datetime date timespan expectedduration borrower borrower date date expectedduration expectedduration public class bookreturned public readonly bookid public readonly string public readonly timespan after public readonly bool late public bookreturned bookid string timespan after bool late after after late late these events will usually serialized the event storage and service bus but here everything runs memory the book aggregate root the book will need referenced identity our system weâll hide guid behind bookid struct public struct bookid iequatable bookid private guid private bookid guid this public static bookid newbookid return new bookid guid newguid public bool equals bookid other return other equals public override bool equals object obj referenceequals null obj return false obj gettype typeof bookid return false return equals bookid obj public override int gethashcode return gethashcode now the book class itself public class book aggregateroot bookid private readonly bookid private string title private string isbn private string borrower private datetime date private timespan expectedduration public book bookid ienumerable object events this foreach dynamic event events apply event public book bookid string title string isbn this var event new bookregistered title isbn apply event append event public override bookid get return public void lend string borrower datetime date timespan expectedduration this borrower null throw new invalidoperationexception quot the book already lent quot var event new booklent borrower date expectedduration apply event append event public void return datetime returndate borrower null throw new invalidoperationexception quot the book has not been lent quot returndate date throw new argumentexception quot the book cannot returned before being lent quot var actualduration returndate date var event new bookreturned borrower actualduration actualduration expectedduration apply event append event private void apply bookregistered event title event title isbn event isbn private void apply booklent event borrower event borrower date event date expectedduration event expectedduration private void apply bookreturned event borrower null the class implements aggregateroot bookid and provides explicitly implemented uncommittedevents property the first ctor used load the aggregate root the second one used build new aggregate root the public methods lend and return are the commands the aggregate root defined the ubiquitous language the structure always the same validate arguments and state prepare state transition using domain logic apply state transition domain logic should happen here append state transition uncommitted events the first ctor uses dynamic dispatch each event object the corresponding specific apply method case you implement the pattern previous version advised provide replay method the base class that will perform the dynamic dispatch based reflection thatâs all for the entity orm mappingâ¦ easy the repository often clearer provide specific repository interface that exposes only available methods with event sourcing itâs not that usefulâ¦ weâll write anyway case youâd like use dependency injection the interface part the domain and should the same assembly the entity and the events public interface ibookrepository void add book book book this bookid get the implementation will simply derive from the repository base class can the application assembly internal class bookrepository repository bookid book ibookrepository protected override book createinstance bookid ienumerable object events return new book events add and the indexer are implemented the base class the only thing provide way instantiate the class with expected parameters could use activator createinstance reflection provide generic implementation choose make simpler read the query context the report database weâll mimic reporting table book lent state this would the data returned from table rows public class bookstate public bookid get set public string title get set public bool lent get set and this will hide the data table implementation public interface ibookstatequery ienumerable bookstate getbookstates bookstate getbookstate bookid ienumerable bookstate getlentbooks void addbookstate bookid string title void setlent bookid bool lent can simply query data report the and update data state implementation will memory for now class bookstatequery ibookstatequery private readonly dictionary bookid bookstate states new dictionary bookid bookstate public ienumerable bookstate getbookstates return states values public bookstate getbookstate bookid return states public ienumerable bookstate getlentbooks return states values where lent public void addbookstate bookid string title var state new bookstate title title states add state public void setlent bookid bool lent states lent lent the important point here that domain logic occurs rdbms implementation could use orm simply build dtos from datareader the event handlers can now denormalize domain states the reporting database using event handler class bookstatehandler handles bookregistered handles booklent handles bookreturned private readonly ibookstatequery statequery public bookstatehandler ibookstatequery statequery this statequery statequery public void handle bookregistered event statequery addbookstate event event title public void handle booklent event console writeline quot book lent quot event borrower statequery setlent event true public void handle bookreturned event console writeline quot book returned quot event statequery setlent event false the console writeline are here view when things happen you would usually not use your production code logging this would not provide much benefits since all the events are already stored the eventstorage using this handler the ibookstatequery will date with current command context state asynchronous environment this where eventual consistency introduced will also add service that will notify when user returned book too late class latereturnnotifier handles bookreturned public void handle bookreturned event event late console writeline quot was late quot event here again domain logic just the infrastructure stuff usually sending email sms view action class program static void main string args isessionfactory factory new sessionfactory new eventstorage ibookstatequery query new bookstatequery domainevents registerhanlder new bookstatehandler query domainevents registerhanlder new latereturnnotifier var bookid bookid newbookid using var session factory opensession var books new bookrepository books add new book bookid quot the lord the rings quot quot 618 15396 quot session submitchanges showbooks query using var session factory opensession var books new bookrepository var book books bookid book lend quot alice quot new datetime 2009 timespan fromdays session submitchanges showbooks query using var session factory opensession var books new bookrepository var book books bookid book return new datetime 2009 session submitchanges showbooks query using var session factory opensession var books new bookrepository var book books bookid book lend quot bob quot new datetime 2009 timespan fromdays session submitchanges showbooks query using var session factory opensession var books new bookrepository var book books bookid book return new datetime 2010 session submitchanges showbooks query private static void showbooks ibookstatequery query foreach var state query getbookstates console writeline quot quot state title state lent quot lent quot quot home quot start instantiating storage for the command context the isessionfactory and the query context the ibookstatequery production youâll use persistent storages persistent event storage and rdbms highly recommend using dependency injection container for real size projects then wire the handlers domain events the application can start register book the library lend alice 2009 for days she returns 2009 sheâs time lend bob 2009 for days returns 2010 heâs late the output the following the lord the rings home written from state book lent alice written the book state handler the lord the rings lent written from state book returned alice written the book state handler the lord the rings home written from state book lent bob written the book state handler the lord the rings lent written from state book returned bob written the book state handler bob was late written the late return notifier the lord the rings home written from state have here clear separation between command that handles the domain logic and query that handles presentation logic have fun questions and remarks expected","a:1:{s:3:\"tag\";a:7:{i:0;s:11:\"Service Bus\";i:1;s:10:\"Repository\";i:2;s:9:\"Reporting\";i:3;s:20:\"Domain Driven Design\";i:4;s:32:\"Distributed Domain Driven Design\";i:5;s:6:\"Design\";i:6;s:4:\"CQRS\";}}","1","1","1","1","17","2","0"
"457356","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-11-03 15:41:00","Europe/Paris","2009-11-03 14:41:10","2009-11-03 14:42:21","","post","xhtml","2009/11/03/Event-Sourcing-and-CQRS-Dispatch-options","en","Event Sourcing and CQRS, Dispatch options.","","","<p>As seen in <a href=\"http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS%2C-Letrsquo%3Bs-use-it.\" target=\"_blank\">previous post</a>, I used dynamic to replay events.</p>\r\n<p>The main reason to use it was to avoid long code using reflection in the infrastructure that would have made it hard to read.</p>\r\n<p>Iâll show several ways to do this dispatch with pros and cons in each cases.</p>\r\n<h2>Dynamic</h2>\r\n<p>The proposed solution was using dynamic.</p>\r\n<p>+ Pros : there is no reflection code involved, code is very simple. <br />- Cons : all state change (Apply) methods must have the same name.</p>\r\n<p>I made no performance test, so I cannot judge if perf is better or not. It seems that the DLR has a rather good cache when the same type is encountered several time, but only measures can tell.</p>\r\n<h2>Handlers registration</h2>\r\n<p>This is the current implementation in <a href=\"http://github.com/MarkNijhof/Fohjin/blob/9ae1f925c4a71aaaa7d2f1a5c24dcb63aabe7b54/Fohjin.DDD/Fohjin.DDD.Domain/BaseAggregateRoot.cs\" target=\"_blank\">Mark Nijhofâs sample</a>.</p>\r\n<p>The base class maintains a dictionary of Type/Action&lt;T&gt; association to dispatch events based on type.</p>\r\n<p>Since an Action&lt;T&gt; delegate must have a target instance, the delegate must be constructed from within the instance, in the .ctor.</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">Action</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt; handlers = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">Action</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> Register&lt;T&gt;(<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt; handler)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers.Add(<span style=\"COLOR: blue\">typeof</span>(T),e =&gt; handler((T)e));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> Replay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event <span style=\"COLOR: blue\">in</span> events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers[@event.GetType()](@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: green\">// rest of the aggregate root class</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>Here is code that use it :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Book</span> : <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">BookId</span> id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id,<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events) : <span style=\"COLOR: blue\">this</span>(id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Replay(events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id,<span style=\"COLOR: blue\">string</span> title, <span style=\"COLOR: blue\">string</span> isbn) : <span style=\"COLOR: blue\">this</span>(id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">BookRegistered</span>(id, title, isbn);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnBookRegistered(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> Book(<span style=\"COLOR: #2b91af\">BookId</span> id)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.id = id;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"COLOR: #2b91af\">BookRegistered</span>&gt;(OnBookRegistered);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"COLOR: #2b91af\">BookLent</span>&gt;(OnBookLent);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;(OnBookReturned);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> OnBookRegistered(<span style=\"COLOR: #2b91af\">BookRegistered</span> @event) { <span style=\"COLOR: green\">/**/</span> }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> OnBookLent(<span style=\"COLOR: #2b91af\">BookLent</span> @event) { <span style=\"COLOR: green\">/**/</span> }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span> OnBookReturned(<span style=\"COLOR: #2b91af\">BookReturned</span> @event) { <span style=\"COLOR: green\">/**/</span> }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>+Pros : Still no reflection, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Meaningful method names <br />-Cons : Additional plumbing code,&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Private constructor to avoid repetition <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Registration occurs at each instantiation</p>\r\n<h2>Convention Based Method Naming</h2>\r\n<p>This is the way <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/message/15743\" target=\"_blank\">advocated by Greg Young</a>.</p>\r\n<p>If your event is called BookRegistered, assume the method will be called OnBookRegistered, and find it by reflection. You can implement a cache at class level to avoid reflection on each dispatch.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt; : <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">IEventDispatcher</span>&gt; Handlers = </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">IEventDispatcher</span>&gt;();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">object</span> HandlersLock = <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: blue\">object</span>();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span> Replay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> dispatcher = GetDispatcher();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dispatcher.Dispatch(<span style=\"COLOR: blue\">this</span>, @events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">IEventDispatcher</span> GetDispatcher()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">IEventDispatcher</span> handlers;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> type = GetType();</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">lock</span> (HandlersLock)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">if</span> (!Handlers.TryGetValue(type, <span style=\"COLOR: blue\">out</span> handlers))</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers = <span style=\"COLOR: #2b91af\">EventDispatcher</span>.Create(type);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handlers.Add(type, handlers);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> handlers;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... rest of the code here</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The dispatcher code :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEventDispatcher</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Dispatch(<span style=\"COLOR: blue\">object</span> target, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;events);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventDispatcher</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">IEventDispatcher</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;&gt; handlers;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> EventDispatcher()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> h = <span style=\"COLOR: blue\">from</span> m <span style=\"COLOR: blue\">in</span> <span style=\"COLOR: blue\">typeof</span>(T)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .GetMethods(<span style=\"COLOR: #2b91af\">BindingFlags</span>.Instance | <span style=\"COLOR: #2b91af\">BindingFlags</span>.NonPublic)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">let</span> parameters = m.GetParameters()</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">where</span> parameters.Length ==1 </p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; m.Name == <span style=\"COLOR: #a31515\">\"On\"</span> + parameters[0].ParameterType.Name</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">select</span> <span style=\"COLOR: #2b91af\">EventHandler</span>.Create&lt;T&gt;(m);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers = h.ToDictionary(i =&gt; i.EventType);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Dispatch(<span style=\"COLOR: blue\">object</span> target, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> typedTarget = (T)target;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event <span style=\"COLOR: blue\">in</span> events)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> handler = handlers[@event.GetType()];</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler.Call(typedTarget, @event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventDispatcher</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEventDispatcher</span> Create(<span style=\"COLOR: #2b91af\">Type</span> type)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">IEventDispatcher</span>)<span style=\"COLOR: #2b91af\">Activator</span>.CreateInstance(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">EventDispatcher</span>&lt;&gt;).MakeGenericType(type));</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>and the event handler :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span> <span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">void</span> Call(T target, <span style=\"COLOR: blue\">object</span> argument);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: #2b91af\">Type</span> EventType { <span style=\"COLOR: blue\">get</span>; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventHandler</span>&lt;TEntity, TEvent&gt; : <span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;TEntity&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt; handler;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> EventHandler(<span style=\"COLOR: #2b91af\">MethodInfo</span> methodInfo)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler = (<span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt;)<span style=\"COLOR: #2b91af\">Delegate</span>.CreateDelegate(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt;), methodInfo, <span style=\"COLOR: blue\">true</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Call(TEntity target, <span style=\"COLOR: blue\">object</span> argument)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler(target, (TEvent)argument);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Type</span> EventType</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">typeof</span>(TEvent); }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventHandler</span></p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span> <span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt; Create&lt;T&gt;(<span style=\"COLOR: #2b91af\">MethodInfo</span> methodInfo)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> eventType = methodInfo.GetParameters()[0].ParameterType;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;)<span style=\"COLOR: #2b91af\">Activator</span>.CreateInstance(</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">EventHandler</span>&lt;,&gt;)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .MakeGenericType(<span style=\"COLOR: blue\">typeof</span>(T), eventType),</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodInfo</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>The trick here is to create a static delegate with two parameters from an instance method info that take one parameter (and one implicit this target).</p>\r\n<p>This way, the delegate is not tied to a specific instance and can be used on any target.</p>\r\n<p>As you can see, this option requires more code ! I did not want to start with that.</p>\r\n<p>+Pros : Convention base names mean no manual mapping, mapping is implicit <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binding is made a class level instead of instance level</p>\r\n<p>-Cons : Only unit tests can tell when you mess with names <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Not immune to event name change, should have good unit tests ! </p>\r\n<h2>Apply then Append</h2>\r\n<p>I also had a remark that if I forget Append after Apply, Iâll get in trouble.</p>\r\n<p>In Handler Registration option and Convention base method naming, the dispatch can be done by the base class, so I could tell the base class to dispatch then Append then event to UncommittedEvents.</p>\r\n<p>This way you end with something like :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookLent(<span style=\"COLOR: green\">/**/</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Play(@event);</p>\r\n</div>\r\n<p>where play dispatches the event to the right method and appends.</p>\r\n<p>This way you cannot forget.</p>\r\n<p>My problem with this, especially in the Convention base method naming scenario is that nobody references the event application methods anymore. Resharper will report them as unused methods, and you wonât know unless you run unit tests.</p>\r\n<p>Moreover, you pay the cost of a dynamic dispatch when you know your event type.</p>\r\n<p>Perhaps something like this could be better :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span> BookLent(<span style=\"COLOR: green\">/**/</span>);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Play(@event).With(OnBookLent);</p>\r\n</div>\r\n<p>the implementation is not very complicated :</p>\r\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEents;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt; Play&lt;TEvent&gt;(TEvent @event)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt;(@event, uncommitedEvents);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... rest of the code here</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> TEvent @event;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">internal</span> EventPlayer(TEvent @event, <span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.@event = @event;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">this</span>.uncommittedEvents = uncommittedEvents;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> With(<span style=\"COLOR: #2b91af\">Action</span>&lt;TEvent&gt; handler)</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uncommittedEvents.Append(@event);</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p style=\"MARGIN: 0\">&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n<p>This way, methods are referenced at least once with type check.</p>\r\n<p>My mind is still not setâ¦ What do you prefer ?</p>","<p>As seen in <a href=\"http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS%2C-Letrsquo%3Bs-use-it.\" target=\"_blank\">previous post</a>, I used dynamic to replay events.</p>\n<p>The main reason to use it was to avoid long code using reflection in the\ninfrastructure that would have made it hard to read.</p>\n<p>Iâll show several ways to do this dispatch with pros and cons in each\ncases.</p>\n<h2>Dynamic</h2>\n<p>The proposed solution was using dynamic.</p>\n<p>+ Pros : there is no reflection code involved, code is very simple.<br />\n- Cons : all state change (Apply) methods must have the same name.</p>\n<p>I made no performance test, so I cannot judge if perf is better or not. It\nseems that the DLR has a rather good cache when the same type is encountered\nseveral time, but only measures can tell.</p>\n<h2>Handlers registration</h2>\n<p>This is the current implementation in <a href=\"http://github.com/MarkNijhof/Fohjin/blob/9ae1f925c4a71aaaa7d2f1a5c24dcb63aabe7b54/Fohjin.DDD/Fohjin.DDD.Domain/BaseAggregateRoot.cs\" target=\"_blank\">Mark Nijhofâs sample</a>.</p>\n<p>The base class maintains a dictionary of Type/Action&lt;T&gt; association to\ndispatch events based on type.</p>\n<p>Since an Action&lt;T&gt; delegate must have a target instance, the delegate\nmust be constructed from within the instance, in the .ctor.</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>,\n<span style=\"COLOR: #2b91af\">Action</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt; handlers =</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>,\n<span style=\"COLOR: #2b91af\">Action</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;&gt;();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nRegister&lt;T&gt;(<span style=\"COLOR: #2b91af\">Action</span>&lt;T&gt;\nhandler)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nhandlers.Add(<span style=\"COLOR: blue\">typeof</span>(T),e =&gt;\nhandler((T)e));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nReplay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event\n<span style=\"COLOR: blue\">in</span> events)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nhandlers[@event.GetType()](@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: green\">// rest of the aggregate root class</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>Here is code that use it :</p>\n<p>Â </p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">Book</span>\n: <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;<span style=\"COLOR: #2b91af\">BookId</span>&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">BookId</span> id;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span>\nid,<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events) : <span style=\"COLOR: blue\">this</span>(id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nReplay(events);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> Book(<span style=\"COLOR: #2b91af\">BookId</span>\nid,<span style=\"COLOR: blue\">string</span> title, <span style=\"COLOR: blue\">string</span> isbn) : <span style=\"COLOR: blue\">this</span>(id)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: #2b91af\">BookRegistered</span>(id, title, isbn);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nOnBookRegistered(@event);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nAppend(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> Book(<span style=\"COLOR: #2b91af\">BookId</span>\nid)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.id = id;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nRegister&lt;<span style=\"COLOR: #2b91af\">BookRegistered</span>&gt;(OnBookRegistered);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nRegister&lt;<span style=\"COLOR: #2b91af\">BookLent</span>&gt;(OnBookLent);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nRegister&lt;<span style=\"COLOR: #2b91af\">BookReturned</span>&gt;(OnBookReturned);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nOnBookRegistered(<span style=\"COLOR: #2b91af\">BookRegistered</span> @event) {\n<span style=\"COLOR: green\">/**/</span> }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nOnBookLent(<span style=\"COLOR: #2b91af\">BookLent</span> @event) { <span style=\"COLOR: green\">/**/</span> }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">void</span>\nOnBookReturned(<span style=\"COLOR: #2b91af\">BookReturned</span> @event) {\n<span style=\"COLOR: green\">/**/</span> }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>+Pros : Still no reflection,<br />\nÂ Â Â Â Â Â Â Â Â Â Â  Meaningful\nmethod names<br />\n-Cons : Additional plumbing code,Â <br />\nÂ Â Â Â Â Â Â Â Â Â Â  Private\nconstructor to avoid repetition<br />\nÂ Â Â Â Â Â Â Â Â Â Â  Registration\noccurs at each instantiation</p>\n<h2>Convention Based Method Naming</h2>\n<p>This is the way <a href=\"http://tech.groups.yahoo.com/group/domaindrivendesign/message/15743\" target=\"_blank\">advocated by Greg Young</a>.</p>\n<p>If your event is called BookRegistered, assume the method will be called\nOnBookRegistered, and find it by reflection. You can implement a cache at class\nlevel to avoid reflection on each dispatch.</p>\n<p>Â </p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">abstract</span> <span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt; : <span style=\"COLOR: #2b91af\">IAggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>,\n<span style=\"COLOR: #2b91af\">IEventDispatcher</span>&gt; Handlers =</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>,\n<span style=\"COLOR: #2b91af\">IEventDispatcher</span>&gt;();</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">readonly</span> <span style=\"COLOR: blue\">object</span> HandlersLock = <span style=\"COLOR: blue\">new</span>\n<span style=\"COLOR: blue\">object</span>();</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: blue\">void</span>\nReplay(<span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> dispatcher = GetDispatcher();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \ndispatcher.Dispatch(<span style=\"COLOR: blue\">this</span>, @events);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: #2b91af\">IEventDispatcher</span> GetDispatcher()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">IEventDispatcher</span> handlers;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> type = GetType();</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">lock</span> (HandlersLock)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">if</span> (!Handlers.TryGetValue(type, <span style=\"COLOR: blue\">out</span> handlers))</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n{</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nhandlers = <span style=\"COLOR: #2b91af\">EventDispatcher</span>.Create(type);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nHandlers.Add(type, handlers);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n}</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> handlers;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  ... rest of the\ncode here</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The dispatcher code :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span>\n<span style=\"COLOR: #2b91af\">IEventDispatcher</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Dispatch(<span style=\"COLOR: blue\">object</span>\ntarget, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt;events);</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">EventDispatcher</span>&lt;T&gt; : <span style=\"COLOR: #2b91af\">IEventDispatcher</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Dictionary</span>&lt;<span style=\"COLOR: #2b91af\">Type</span>, <span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;&gt; handlers;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> EventDispatcher()</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> h = <span style=\"COLOR: blue\">from</span> m\n<span style=\"COLOR: blue\">in</span> <span style=\"COLOR: blue\">typeof</span>(T)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n.GetMethods(<span style=\"COLOR: #2b91af\">BindingFlags</span>.Instance |\n<span style=\"COLOR: #2b91af\">BindingFlags</span>.NonPublic)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">let</span> parameters = m.GetParameters()</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">where</span> parameters.Length ==1</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n&amp;&amp; m.Name == <span style=\"COLOR: #a31515\">&quot;On&quot;</span> +\nparameters[0].ParameterType.Name</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">select</span> <span style=\"COLOR: #2b91af\">EventHandler</span>.Create&lt;T&gt;(m);</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  handlers =\nh.ToDictionary(i =&gt; i.EventType);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nDispatch(<span style=\"COLOR: blue\">object</span> target, <span style=\"COLOR: #2b91af\">IEnumerable</span>&lt;<span style=\"COLOR: blue\">object</span>&gt; events)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> typedTarget = (T)target;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">foreach</span> (<span style=\"COLOR: blue\">var</span> @event\n<span style=\"COLOR: blue\">in</span> events)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">var</span> handler = handlers[@event.GetType()];</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nhandler.Call(typedTarget, @event);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventDispatcher</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">IEventDispatcher</span> Create(<span style=\"COLOR: #2b91af\">Type</span> type)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">IEventDispatcher</span>)<span style=\"COLOR: #2b91af\">Activator</span>.CreateInstance(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">EventDispatcher</span>&lt;&gt;).MakeGenericType(type));</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>and the event handler :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">interface</span>\n<span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">void</span> Call(T target, <span style=\"COLOR: blue\">object</span> argument);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: #2b91af\">Type</span> EventType { <span style=\"COLOR: blue\">get</span>;\n}</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">class</span>\n<span style=\"COLOR: #2b91af\">EventHandler</span>&lt;TEntity, TEvent&gt; :\n<span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;TEntity&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt; handler;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> EventHandler(<span style=\"COLOR: #2b91af\">MethodInfo</span> methodInfo)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  handler =\n(<span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt;)<span style=\"COLOR: #2b91af\">Delegate</span>.CreateDelegate(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">Action</span>&lt;TEntity, TEvent&gt;), methodInfo,\n<span style=\"COLOR: blue\">true</span>);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span> Call(TEntity\ntarget, <span style=\"COLOR: blue\">object</span> argument)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nhandler(target, (TEvent)argument);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: #2b91af\">Type</span>\nEventType</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">get</span> { <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">typeof</span>(TEvent); }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">internal</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">EventHandler</span></p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">static</span>\n<span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;\nCreate&lt;T&gt;(<span style=\"COLOR: #2b91af\">MethodInfo</span> methodInfo)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> eventType =\nmethodInfo.GetParameters()[0].ParameterType;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> (<span style=\"COLOR: #2b91af\">IEventHandler</span>&lt;T&gt;)<span style=\"COLOR: #2b91af\">Activator</span>.CreateInstance(</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n<span style=\"COLOR: blue\">typeof</span>(<span style=\"COLOR: #2b91af\">EventHandler</span>&lt;,&gt;)</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n.MakeGenericType(<span style=\"COLOR: blue\">typeof</span>(T), eventType),</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \nmethodInfo</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \n);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>The trick here is to create a static delegate with two parameters from an\ninstance method info that take one parameter (and one implicit this\ntarget).</p>\n<p>This way, the delegate is not tied to a specific instance and can be used on\nany target.</p>\n<p>As you can see, this option requires more code ! I did not want to start\nwith that.</p>\n<p>+Pros : Convention base names mean no manual mapping, mapping is\nimplicit<br />\nÂ Â Â Â Â Â Â Â Â Â Â  Binding is\nmade a class level instead of instance level</p>\n<p>-Cons : Only unit tests can tell when you mess with names<br />\nÂ Â Â Â Â Â Â Â Â Â Â  Not immune\nto event name change, should have good unit tests !</p>\n<h2>Apply then Append</h2>\n<p>I also had a remark that if I forget Append after Apply, Iâll get in\ntrouble.</p>\n<p>In Handler Registration option and Convention base method naming, the\ndispatch can be done by the base class, so I could tell the base class to\ndispatch then Append then event to UncommittedEvents.</p>\n<p>This way you end with something like :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span>\nBookLent(<span style=\"COLOR: green\">/**/</span>);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nPlay(@event);</p>\n</div>\n<p>where play dispatches the event to the right method and appends.</p>\n<p>This way you cannot forget.</p>\n<p>My problem with this, especially in the Convention base method naming\nscenario is that nobody references the event application methods anymore.\nResharper will report them as unused methods, and you wonât know unless you run\nunit tests.</p>\n<p>Moreover, you pay the cost of a dynamic dispatch when you know your event\ntype.</p>\n<p>Perhaps something like this could be better :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">var</span> @event = <span style=\"COLOR: blue\">new</span>\nBookLent(<span style=\"COLOR: green\">/**/</span>);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nPlay(@event).With(OnBookLent);</p>\n</div>\n<p>the implementation is not very complicated :</p>\n<div style=\"BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; FONT-FAMILY: courier new; BACKGROUND: #f8f8f8; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid\">\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">class</span> <span style=\"COLOR: #2b91af\">AggregateRoot</span>&lt;TId&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEents;</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">protected</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt; Play&lt;TEvent&gt;(TEvent\n@event)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">return</span> <span style=\"COLOR: blue\">new</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt;(@event,\nuncommitedEvents);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  ... rest of the\ncode here</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â  <span style=\"COLOR: blue\">public</span>\n<span style=\"COLOR: blue\">struct</span> <span style=\"COLOR: #2b91af\">EventPlayer</span>&lt;TEvent&gt;</p>\n<p style=\"MARGIN: 0\">Â Â Â  {</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span> TEvent\n@event;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">private</span> <span style=\"COLOR: blue\">readonly</span>\n<span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">internal</span> EventPlayer(TEvent @event, <span style=\"COLOR: #2b91af\">UncommittedEvents</span> uncommittedEvents)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.@event = @event;</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">this</span>.uncommittedEvents = uncommittedEvents;</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â </p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  <span style=\"COLOR: blue\">public</span> <span style=\"COLOR: blue\">void</span>\nWith(<span style=\"COLOR: #2b91af\">Action</span>&lt;TEvent&gt; handler)</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  {</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nhandler(@event);</p>\n<p style=\"MARGIN: 0\">\nÂ Â Â Â Â Â Â Â Â Â Â \nuncommittedEvents.Append(@event);</p>\n<p style=\"MARGIN: 0\">Â Â Â Â Â Â Â  }</p>\n<p style=\"MARGIN: 0\">Â Â Â  }</p>\n</div>\n<p>This way, methods are referenced at least once with type check.</p>\n<p>My mind is still not setâ¦ What do you prefer ?</p>","","event sourcing and cqrs dispatch options seen previous post used dynamic replay events the main reason use was avoid long code using reflection the infrastructure that would have made hard read iâll show several ways this dispatch with pros and cons each cases dynamic the proposed solution was using dynamic pros there reflection code involved code very simple cons all state change apply methods must have the same name made performance test cannot judge perf better not seems that the dlr has rather good cache when the same type encountered several time but only measures can tell handlers registration this the current implementation mark nijhofâs sample the base class maintains dictionary type action association dispatch events based type since action delegate must have target instance the delegate must constructed from within the instance the ctor public class aggregateroot tid readonly dictionary type action object handlers new dictionary type action object protected void register action handler handlers add typeof handler protected void replay ienumerable object events foreach var event events handlers event gettype event rest the aggregate root class here code that use public class book aggregateroot bookid private readonly bookid public book bookid ienumerable object events this replay events public book bookid string title string isbn this var event new bookregistered title isbn onbookregistered event append event private book bookid this register bookregistered onbookregistered register booklent onbooklent register bookreturned onbookreturned private void onbookregistered bookregistered event private void onbooklent booklent event private void onbookreturned bookreturned event pros still reflection meaningful method names cons additional plumbing code private constructor avoid repetition registration occurs each instantiation convention based method naming this the way advocated greg young your event called bookregistered assume the method will called onbookregistered and find reflection you can implement cache class level avoid reflection each dispatch public abstract class aggregateroot tid iaggregateroot tid private static readonly dictionary type ieventdispatcher handlers new dictionary type ieventdispatcher private static readonly object handlerslock new object protected void replay ienumerable object events var dispatcher getdispatcher dispatcher dispatch this events private ieventdispatcher getdispatcher ieventdispatcher handlers var type gettype lock handlerslock handlers trygetvalue type out handlers handlers eventdispatcher create type handlers add type handlers return handlers rest the code here the dispatcher code internal interface ieventdispatcher void dispatch object target ienumerable object events internal class eventdispatcher ieventdispatcher private readonly dictionary type ieventhandler handlers public eventdispatcher var from typeof getmethods bindingflags instance bindingflags nonpublic let parameters getparameters where parameters length amp amp name quot quot parameters parametertype name select eventhandler create handlers todictionary eventtype public void dispatch object target ienumerable object events var typedtarget target foreach var event events var handler handlers event gettype handler call typedtarget event internal static class eventdispatcher public static ieventdispatcher create type type return ieventdispatcher activator createinstance typeof eventdispatcher makegenerictype type and the event handler internal interface ieventhandler void call target object argument type eventtype get internal class eventhandler tentity tevent ieventhandler tentity private readonly action tentity tevent handler public eventhandler methodinfo methodinfo handler action tentity tevent delegate createdelegate typeof action tentity tevent methodinfo true public void call tentity target object argument handler target tevent argument public type eventtype get return typeof tevent internal static class eventhandler public static ieventhandler create methodinfo methodinfo var eventtype methodinfo getparameters parametertype return ieventhandler activator createinstance typeof eventhandler makegenerictype typeof eventtype methodinfo the trick here create static delegate with two parameters from instance method info that take one parameter and one implicit this target this way the delegate not tied specific instance and can used any target you can see this option requires more code did not want start with that pros convention base names mean manual mapping mapping implicit binding made class level instead instance level cons only unit tests can tell when you mess with names not immune event name change should have good unit tests apply then append also had remark that forget append after apply iâll get trouble handler registration option and convention base method naming the dispatch can done the base class could tell the base class dispatch then append then event uncommittedevents this way you end with something like var event new booklent play event where play dispatches the event the right method and appends this way you cannot forget problem with this especially the convention base method naming scenario that nobody references the event application methods anymore resharper will report them unused methods and you wonât know unless you run unit tests moreover you pay the cost dynamic dispatch when you know your event type perhaps something like this could better var event new booklent play event with onbooklent the implementation not very complicated public class aggregateroot tid private readonly uncommittedevents uncommittedeents protected eventplayer tevent play tevent tevent event return new eventplayer tevent event uncommitedevents rest the code here public struct eventplayer tevent private readonly tevent event private readonly uncommittedevents uncommittedevents internal eventplayer tevent event uncommittedevents uncommittedevents this event event this uncommittedevents uncommittedevents public void with action tevent handler handler event uncommittedevents append event this way methods are referenced least once with type check mind still not setâ¦ what you prefer","a:1:{s:3:\"tag\";a:4:{i:0;s:20:\"Domain Driven Design\";i:1;s:32:\"Distributed Domain Driven Design\";i:2;s:6:\"Design\";i:3;s:4:\"CQRS\";}}","1","0","1","1","13","1","0"
"457791","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-11-05 14:00:00","Europe/Paris","2009-11-05 13:00:38","2009-11-05 13:02:23","","post","xhtml","2009/11/05/Event-Sourcing-and-CQRS-Serialization","en","Event Sourcing and CQRS, Serialization","","","<p>Be sure to read the three preceding parts of the series:</p>\r\n<p><a href=\"http://thinkbeforecoding.com/post/2009/10/30/Event-Sourcing-and-CQRS-Now\" target=\"_blank\">Event Sourcing and CQRS, Now !</a>&nbsp;&nbsp; <br /><a href=\"http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS-Lets-use-it\" target=\"_blank\">Event Sourcing and CQRS, Letâs use it</a> <br /><a href=\"http://thinkbeforecoding.com/post/2009/11/03/Event-Sourcing-and-CQRS-Dispatch-options\" target=\"_blank\">Event Sourcing and CQRS; Dispatch-options</a></p>\r\n<p>Today, weâll study to a required part of the event storage : Serialization/Deserialization</p>\r\n<h2>The easy way</h2>\r\n<p>The .Net framework as several serialization technologies that can be used here, Binary serialization, XML serialization or even DataContract serialization introduced with WCF.</p>\r\n<h2>The penalty</h2>\r\n<p>The particularity of Event Sourcing is that we will never delete or update stored events. Theyâll be logged, insert only, once and forever.</p>\r\n<p>So the log grows. grows. grows.</p>\r\n<p>Event storage size will influence greatly the growth rate of the log.</p>\r\n<h3>Xml Serialization</h3>\r\n<p>If your system processes frequently lots of events, forget about XML. Far to verbose, youâll pay the <a href=\"http://www.codinghorror.com/blog/archives/001114.html\" target=\"_blank\">Angle Bracket Tax</a>.</p>\r\n<h3>Binary Serialization</h3>\r\n<p>But the binary serialization still cost much, even if compact, it will contain type names and field namesâ¦</p>\r\n<h3>Raw Serialization</h3>\r\n<p>You could write serialization/deserialization code into your type.</p>\r\n<p>The type can chose a format, so no extra type/field name is needed. This kind of serialization is very compact â it contains only required bits â but you cannot read data back without the deserialization code.</p>\r\n<p>It can be ok if you plan to have a definite small number of well documented events. Unmanageable if your event type count will grow with time and versions.</p>\r\n<h2>Avoid it</h2>\r\n<p>Letâs consider how data are stored in a database.</p>\r\n<p>A database contains tables. Tables have a schema. When storing a row, no need to repeat column names on each cell. The data layout is defined by the table schema and will be the same on each row.</p>\r\n<p>We cannot do the same since events have different schemas, but we work with a limited set of events that will occur many times.</p>\r\n<h2>Split schema and data</h2>\r\n<p>We can thus store schemas aside, and specify the row data schema on each row. The event data will the be stored as raw bits corresponding to specified schema.</p>\r\n<p>This way you can design tools to explore your log file with complete event representation without needing the original event class, and you got a very compact serialization. Have your cake and eat it too !</p>\r\n<p>Stay tuned, the code comes tomorrowâ¦</p>","<p>Be sure to read the three preceding parts of the series:</p>\n<p><a href=\"http://thinkbeforecoding.com/post/2009/10/30/Event-Sourcing-and-CQRS-Now\" target=\"_blank\">Event Sourcing and CQRS, Now !</a>Â Â <br />\n<a href=\"http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS-Lets-use-it\" target=\"_blank\">Event Sourcing and CQRS, Letâs use it</a><br />\n<a href=\"http://thinkbeforecoding.com/post/2009/11/03/Event-Sourcing-and-CQRS-Dispatch-options\" target=\"_blank\">Event Sourcing and CQRS; Dispatch-options</a></p>\n<p>Today, weâll study to a required part of the event storage :\nSerialization/Deserialization</p>\n<h2>The easy way</h2>\n<p>The .Net framework as several serialization technologies that can be used\nhere, Binary serialization, XML serialization or even DataContract\nserialization introduced with WCF.</p>\n<h2>The penalty</h2>\n<p>The particularity of Event Sourcing is that we will never delete or update\nstored events. Theyâll be logged, insert only, once and forever.</p>\n<p>So the log grows. grows. grows.</p>\n<p>Event storage size will influence greatly the growth rate of the log.</p>\n<h3>Xml Serialization</h3>\n<p>If your system processes frequently lots of events, forget about XML. Far to\nverbose, youâll pay the <a href=\"http://www.codinghorror.com/blog/archives/001114.html\" target=\"_blank\">Angle\nBracket Tax</a>.</p>\n<h3>Binary Serialization</h3>\n<p>But the binary serialization still cost much, even if compact, it will\ncontain type names and field namesâ¦</p>\n<h3>Raw Serialization</h3>\n<p>You could write serialization/deserialization code into your type.</p>\n<p>The type can chose a format, so no extra type/field name is needed. This\nkind of serialization is very compact â it contains only required bits â but\nyou cannot read data back without the deserialization code.</p>\n<p>It can be ok if you plan to have a definite small number of well documented\nevents. Unmanageable if your event type count will grow with time and\nversions.</p>\n<h2>Avoid it</h2>\n<p>Letâs consider how data are stored in a database.</p>\n<p>A database contains tables. Tables have a schema. When storing a row, no\nneed to repeat column names on each cell. The data layout is defined by the\ntable schema and will be the same on each row.</p>\n<p>We cannot do the same since events have different schemas, but we work with\na limited set of events that will occur many times.</p>\n<h2>Split schema and data</h2>\n<p>We can thus store schemas aside, and specify the row data schema on each\nrow. The event data will the be stored as raw bits corresponding to specified\nschema.</p>\n<p>This way you can design tools to explore your log file with complete event\nrepresentation without needing the original event class, and you got a very\ncompact serialization. Have your cake and eat it too !</p>\n<p>Stay tuned, the code comes tomorrowâ¦</p>","","event sourcing and cqrs serialization sure read the three preceding parts the series event sourcing and cqrs now event sourcing and cqrs letâs use event sourcing and cqrs dispatch options today weâll study required part the event storage serialization deserialization the easy way the net framework several serialization technologies that can used here binary serialization xml serialization even datacontract serialization introduced with wcf the penalty the particularity event sourcing that will never delete update stored events theyâll logged insert only once and forever the log grows grows grows event storage size will influence greatly the growth rate the log xml serialization your system processes frequently lots events forget about xml far verbose youâll pay the angle bracket tax binary serialization but the binary serialization still cost much even compact will contain type names and field namesâ¦ raw serialization you could write serialization deserialization code into your type the type can chose format extra type field name needed this kind serialization very compact contains only required bits but you cannot read data back without the deserialization code can you plan have definite small number well documented events unmanageable your event type count will grow with time and versions avoid letâs consider how data are stored database database contains tables tables have schema when storing row need repeat column names each cell the data layout defined the table schema and will the same each row cannot the same since events have different schemas but work with limited set events that will occur many times split schema and data can thus store schemas aside and specify the row data schema each row the event data will the stored raw bits corresponding specified schema this way you can design tools explore your log file with complete event representation without needing the original event class and you got very compact serialization have your cake and eat too stay tuned the code comes tomorrowâ¦","a:1:{s:3:\"tag\";a:4:{i:0;s:20:\"Domain Driven Design\";i:1;s:32:\"Distributed Domain Driven Design\";i:2;s:6:\"Design\";i:3;s:4:\"CQRS\";}}","1","0","1","1","6","0","0"
"460191","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-11-16 11:08:00","Europe/Paris","2009-11-16 10:08:51","2009-11-16 10:10:23","","post","xhtml","2009/11/16/Udi-Dahan-talks-on-CQRS-at-Zenika","en","Udi Dahan talks on CQRS at Zenika","","","<p>Iâll be at <a href=\"http://www.udidahan.com/\" target=\"_blank\">Udi Dahan</a>âs talk this evening (19h) at Zenika in Paris.</p>\r\n<p>Tell me if youâre planning to be there too !</p>\r\n<p>Iâll surely post about it in the following days.</p>","<p>Iâll be at <a href=\"http://www.udidahan.com/\" target=\"_blank\">Udi\nDahan</a>âs talk this evening (19h) at Zenika in Paris.</p>\n<p>Tell me if youâre planning to be there too !</p>\n<p>Iâll surely post about it in the following days.</p>","","udi dahan talks cqrs zenika iâll udi dahanâs talk this evening 19h zenika paris tell youâre planning there too iâll surely post about the following days","a:1:{s:3:\"tag\";a:3:{i:0;s:20:\"Domain Driven Design\";i:1;s:32:\"Distributed Domain Driven Design\";i:2;s:4:\"CQRS\";}}","1","0","1","1","5","0","0"
"460508","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-11-17 16:37:00","Europe/Paris","2009-11-17 15:37:23","2009-11-17 15:38:23","","post","xhtml","2009/11/17/Udi-Dahan-talks-on-CQRS-in-Paris","en","Udi Dahan talks on CQRS in Paris","","","<p><a href=\"http://www.udidahan.com/\" target=\"_blank\">Udi Dahan</a> gave a very good talk yesterday evening at Zenika, there was only few attendeesâ¦ perhaps because it was on a Monday evening. Whatever, there was barely not enough place already in the Italian restaurant where we moved after.</p>\r\n<p>I wonât make a full report, just talk about some interesting points. </p>\r\n<p>First of all, the session focused mainly on why you should do CQRS and not how. Second point, the talk was not about event sourcing, but you already now that you can do CQRS without event sourcing.</p>\r\n<h2>Something we should accept : Stale Data</h2>\r\n<p>The paradigm of usual architectureâs best practice has a serious flow : when you show data to your users, itâs already stale.</p>\r\n<p>Is it important ? Yes.</p>\r\n<p>Is it a problem ? Not really.</p>\r\n<p>The world have worked with stale data for years, and it was handled rather gracefully until now. Computers have reduced the time span, but when the data appear on the screen, itâs stale.</p>\r\n<p>Tel it to your users, they will accept it. Find with them what is acceptable. 1 second, 10 seconds, 1 minute, 1 hour, 1 day ? The users are used to it in there own business. Do it too.</p>\r\n<h2>Queries</h2>\r\n<p>Whatâs the purpose of queries ? To show data. Not objects.</p>\r\n<p>So why should the data from the database come across 5 layers through 3 model transformations ? Itâs a bit overkill to display data.</p>\r\n<p>Why not just this : The UI read data from the database and displays it ?</p>\r\n<p>No DTOs, no ORM, not business rules executed on each query.</p>\r\n<p>You simply define a <strong>Persistent ViewModel</strong> (thankâs Udi, I like this description of the Q side), and display it directly to screen. It should be as simple as one database table per UI view.</p>\r\n<p>Of course you need a way to keep the Persistent ViewModel up to date, but weâll see that later.</p>\r\n<h2>Commands</h2>\r\n<p>On the other side, there are commands. </p>\r\n<p>It should be done in 3 phases :</p>\r\n<h3>Validation</h3>\r\n<p>Is the input potentially good ? Structured correctly, no missing field, everything fit in ranges ?</p>\r\n<p>This can be done without knowing current state, and be done outside of entities command handling.</p>\r\n<h3>Rules</h3>\r\n<p>Should we do this ?</p>\r\n<p>Here, the decision is taken using current state.</p>\r\n<p>It leads to a discussion about UI design. In order to handle the user command as well as you can, you have to capture the user intent in the command.</p>\r\n<p>In CRUD applications, the new data is sent by the UI layer. You have to extract the user intent from that data to know if you can process the data.</p>\r\n<p>There is a huge difference between UserMovesToNewAddress and CorrectTheMisspellingInUserAddress from a business point, but in a CRUD application you would probably end with the same Update dataâ¦</p>\r\n<h3>State change</h3>\r\n<p>Whatâs the new state ?</p>\r\n<p>Itâs the easy part once the rules are applied.</p>\r\n<h2>Domain Model</h2>\r\n<h3>What arenât they for ?</h3>\r\n<p><strong>Validation</strong> : commands are validated before the model is called. Do not bloat your domain model with this.</p>\r\n<p><strong>Queries</strong> : entity relationships for reading are unnecessary. You can do eager loading on your Aggregate Roots safely, theyâll never be used for queries that need only partial information.</p>\r\n<h3>What are they for ?</h3>\r\n<p><strong>Answer to the question</strong> : should we do what this valid command is asking ?</p>\r\n<p>If the answer is yes, <strong>change the state</strong> !</p>\r\n<h2>Maintain the query model up to date</h2>\r\n<p>There are two main ways to maintain query model up to date.</p>\r\n<p>You can use something like views or ETL to transform data from the domain data to the shape required by the query side.</p>\r\n<p>If you prefer, or when your domain persistence is not compatible with this option (OODB, Event Storage..), you can publish events from you command side, and provides handlerâs on the query side that will maintain the views state in the relational database (or a cubeâ¦ or whatever). A denormalization will happen here.</p>\r\n<h2>What do we gain from this ?</h2>\r\n<h3>Asynchronous model</h3>\r\n<p>The model is deeply asynchronous, itâs not a matter of tweaking things with threads. Itâs asynchronous from the ground up, at domain level.</p>\r\n<p>Your user sends a command, and your design is good if you can answer : âthank you, we will come back to you soonâ¦â. Take the time needed to fulfill your user wish, he will be happy !</p>\r\n<h3>Scalability</h3>\r\n<p>By relaxing the rules, the system becomes more scalable.</p>\r\n<h3>Domain persistence choice</h3>\r\n<p>The domain is accessed only to process rules and state changes. There is no need to join tables, filter rows. So you can easily use an non relational database.</p>\r\n<p>Possible options are a OODB or an Event Storage (for event sourcing).</p>\r\n<p>You can still use a RDBMS with or without an ORM if youâre more familiar with these technologies.</p>\r\n<p>But the persistence mechanism becomes an implementation detail from from Command side that will not interfere with your queries.</p>\r\n<h2>Conclusion</h2>\r\n<p>Ooops, I said it was not a complete reportâ¦ but it actually is. Every point was interesting ?</p>\r\n<p>After the talk we had a discussion about forecasting and other interesting subjects. Perhaps more on this later.</p>\r\n<p>There was a video camera in the room, so I think the guys from Zenika will try to put it on the internet when they have time. Iâll add the link when available.</p>\r\n<p>If you was here and have a picture of the event, I would be glad to put it in the blog :D</p>","<p><a href=\"http://www.udidahan.com/\" target=\"_blank\">Udi Dahan</a> gave a very\ngood talk yesterday evening at Zenika, there was only few attendeesâ¦ perhaps\nbecause it was on a Monday evening. Whatever, there was barely not enough place\nalready in the Italian restaurant where we moved after.</p>\n<p>I wonât make a full report, just talk about some interesting points.</p>\n<p>First of all, the session focused mainly on why you should do CQRS and not\nhow. Second point, the talk was not about event sourcing, but you already now\nthat you can do CQRS without event sourcing.</p>\n<h2>Something we should accept : Stale Data</h2>\n<p>The paradigm of usual architectureâs best practice has a serious flow : when\nyou show data to your users, itâs already stale.</p>\n<p>Is it important ? Yes.</p>\n<p>Is it a problem ? Not really.</p>\n<p>The world have worked with stale data for years, and it was handled rather\ngracefully until now. Computers have reduced the time span, but when the data\nappear on the screen, itâs stale.</p>\n<p>Tel it to your users, they will accept it. Find with them what is\nacceptable. 1 second, 10 seconds, 1 minute, 1 hour, 1 day ? The users are used\nto it in there own business. Do it too.</p>\n<h2>Queries</h2>\n<p>Whatâs the purpose of queries ? To show data. Not objects.</p>\n<p>So why should the data from the database come across 5 layers through 3\nmodel transformations ? Itâs a bit overkill to display data.</p>\n<p>Why not just this : The UI read data from the database and displays it ?</p>\n<p>No DTOs, no ORM, not business rules executed on each query.</p>\n<p>You simply define a <strong>Persistent ViewModel</strong> (thankâs Udi, I\nlike this description of the Q side), and display it directly to screen. It\nshould be as simple as one database table per UI view.</p>\n<p>Of course you need a way to keep the Persistent ViewModel up to date, but\nweâll see that later.</p>\n<h2>Commands</h2>\n<p>On the other side, there are commands.</p>\n<p>It should be done in 3 phases :</p>\n<h3>Validation</h3>\n<p>Is the input potentially good ? Structured correctly, no missing field,\neverything fit in ranges ?</p>\n<p>This can be done without knowing current state, and be done outside of\nentities command handling.</p>\n<h3>Rules</h3>\n<p>Should we do this ?</p>\n<p>Here, the decision is taken using current state.</p>\n<p>It leads to a discussion about UI design. In order to handle the user\ncommand as well as you can, you have to capture the user intent in the\ncommand.</p>\n<p>In CRUD applications, the new data is sent by the UI layer. You have to\nextract the user intent from that data to know if you can process the data.</p>\n<p>There is a huge difference between UserMovesToNewAddress and\nCorrectTheMisspellingInUserAddress from a business point, but in a CRUD\napplication you would probably end with the same Update dataâ¦</p>\n<h3>State change</h3>\n<p>Whatâs the new state ?</p>\n<p>Itâs the easy part once the rules are applied.</p>\n<h2>Domain Model</h2>\n<h3>What arenât they for ?</h3>\n<p><strong>Validation</strong> : commands are validated before the model is\ncalled. Do not bloat your domain model with this.</p>\n<p><strong>Queries</strong> : entity relationships for reading are unnecessary.\nYou can do eager loading on your Aggregate Roots safely, theyâll never be used\nfor queries that need only partial information.</p>\n<h3>What are they for ?</h3>\n<p><strong>Answer to the question</strong> : should we do what this valid\ncommand is asking ?</p>\n<p>If the answer is yes, <strong>change the state</strong> !</p>\n<h2>Maintain the query model up to date</h2>\n<p>There are two main ways to maintain query model up to date.</p>\n<p>You can use something like views or ETL to transform data from the domain\ndata to the shape required by the query side.</p>\n<p>If you prefer, or when your domain persistence is not compatible with this\noption (OODB, Event Storage..), you can publish events from you command side,\nand provides handlerâs on the query side that will maintain the views state in\nthe relational database (or a cubeâ¦ or whatever). A denormalization will happen\nhere.</p>\n<h2>What do we gain from this ?</h2>\n<h3>Asynchronous model</h3>\n<p>The model is deeply asynchronous, itâs not a matter of tweaking things with\nthreads. Itâs asynchronous from the ground up, at domain level.</p>\n<p>Your user sends a command, and your design is good if you can answer :\nâthank you, we will come back to you soonâ¦â. Take the time needed to fulfill\nyour user wish, he will be happy !</p>\n<h3>Scalability</h3>\n<p>By relaxing the rules, the system becomes more scalable.</p>\n<h3>Domain persistence choice</h3>\n<p>The domain is accessed only to process rules and state changes. There is no\nneed to join tables, filter rows. So you can easily use an non relational\ndatabase.</p>\n<p>Possible options are a OODB or an Event Storage (for event sourcing).</p>\n<p>You can still use a RDBMS with or without an ORM if youâre more familiar\nwith these technologies.</p>\n<p>But the persistence mechanism becomes an implementation detail from from\nCommand side that will not interfere with your queries.</p>\n<h2>Conclusion</h2>\n<p>Ooops, I said it was not a complete reportâ¦ but it actually is. Every point\nwas interesting ?</p>\n<p>After the talk we had a discussion about forecasting and other interesting\nsubjects. Perhaps more on this later.</p>\n<p>There was a video camera in the room, so I think the guys from Zenika will\ntry to put it on the internet when they have time. Iâll add the link when\navailable.</p>\n<p>If you was here and have a picture of the event, I would be glad to put it\nin the blog :D</p>","","udi dahan talks cqrs paris udi dahan gave very good talk yesterday evening zenika there was only few attendeesâ¦ perhaps because was monday evening whatever there was barely not enough place already the italian restaurant where moved after wonât make full report just talk about some interesting points first all the session focused mainly why you should cqrs and not how second point the talk was not about event sourcing but you already now that you can cqrs without event sourcing something should accept stale data the paradigm usual architectureâs best practice has serious flow when you show data your users itâs already stale important yes problem not really the world have worked with stale data for years and was handled rather gracefully until now computers have reduced the time span but when the data appear the screen itâs stale tel your users they will accept find with them what acceptable second seconds minute hour day the users are used there own business too queries whatâs the purpose queries show data not objects why should the data from the database come across layers through model transformations itâs bit overkill display data why not just this the read data from the database and displays dtos orm not business rules executed each query you simply define persistent viewmodel thankâs udi like this description the side and display directly screen should simple one database table per view course you need way keep the persistent viewmodel date but weâll see that later commands the other side there are commands should done phases validation the input potentially good structured correctly missing field everything fit ranges this can done without knowing current state and done outside entities command handling rules should this here the decision taken using current state leads discussion about design order handle the user command well you can you have capture the user intent the command crud applications the new data sent the layer you have extract the user intent from that data know you can process the data there huge difference between usermovestonewaddress and correctthemisspellinginuseraddress from business point but crud application you would probably end with the same update dataâ¦ state change whatâs the new state itâs the easy part once the rules are applied domain model what arenât they for validation commands are validated before the model called not bloat your domain model with this queries entity relationships for reading are unnecessary you can eager loading your aggregate roots safely theyâll never used for queries that need only partial information what are they for answer the question should what this valid command asking the answer yes change the state maintain the query model date there are two main ways maintain query model date you can use something like views etl transform data from the domain data the shape required the query side you prefer when your domain persistence not compatible with this option oodb event storage you can publish events from you command side and provides handlerâs the query side that will maintain the views state the relational database cubeâ¦ whatever denormalization will happen here what gain from this asynchronous model the model deeply asynchronous itâs not matter tweaking things with threads itâs asynchronous from the ground domain level your user sends command and your design good you can answer âthank you will come back you soonâ¦â take the time needed fulfill your user wish will happy scalability relaxing the rules the system becomes more scalable domain persistence choice the domain accessed only process rules and state changes there need join tables filter rows you can easily use non relational database possible options are oodb event storage for event sourcing you can still use rdbms with without orm youâre more familiar with these technologies but the persistence mechanism becomes implementation detail from from command side that will not interfere with your queries conclusion ooops said was not complete reportâ¦ but actually every point was interesting after the talk had discussion about forecasting and other interesting subjects perhaps more this later there was video camera the room think the guys from zenika will try put the internet when they have time iâll add the link when available you was here and have picture the event would glad put the blog","a:0:{}","1","0","1","1","13","1","0"
"466789","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-12-10 10:15:00","Europe/Paris","2009-12-10 09:15:48","2009-12-10 09:17:47","","post","xhtml","2009/12/10/Udi-Dahan-post-on-CQRS","en","Udi Dahan's post on CQRS","","","<p>Udi Dahan wrote a new post on CQRS today : <a href=\"http://www.udidahan.com/2009/12/09/clarified-cqrs/\" target=\"_blank\">Clarified CQRS</a></p>\r\n<p>It is essentially the content of the presentation he gave here in Paris and in other places.</p>\r\n<p>You should read it I you want to understand the deep reasons to use CQRS and see how to change your mind to use it.</p>","<p>Udi Dahan wrote a new post on CQRS today : <a href=\"http://www.udidahan.com/2009/12/09/clarified-cqrs/\" target=\"_blank\">Clarified\nCQRS</a></p>\n<p>It is essentially the content of the presentation he gave here in Paris and\nin other places.</p>\n<p>You should read it I you want to understand the deep reasons to use CQRS and\nsee how to change your mind to use it.</p>","","udi dahan post cqrs udi dahan wrote new post cqrs today clarified cqrs essentially the content the presentation gave here paris and other places you should read you want understand the deep reasons use cqrs and see how change your mind use","a:0:{}","1","0","1","1","0","0","0"
"466830","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2009-12-10 14:31:00","Europe/Paris","2009-12-10 13:31:24","2009-12-10 13:32:40","","post","xhtml","2009/12/10/Business-Errors-are-Just-Ordinary-Events","en","Business Errors are Just Ordinary Events","","","<p>Error handling has always been something quite difficult to grasp in software design and still is.</p>\r\n<p>Exceptions are now widespread in languages, and it helps a lot to manage corner case where something fails badly.</p>\r\n<p>But should we use Exceptions to manage business errors ? </p>\r\n<h2>The business errors</h2>\r\n<p>What do we call business errors actually ?</p>\r\n<h3>Broken Invariants</h3>\r\n<p>What if an invariance rule is broken ?</p>\r\n<p><strong>The situation should never happen</strong> : There is a bug. A bug is not a business error, correct it and deploy.</p>\r\n<p><strong>The situation can happens sometimes </strong>: This is not an invariant, but a rare state. It should be handled as any other state change.</p>\r\n<h3>Invalid commands</h3>\r\n<p>What if we receive an invalid command ?</p>\r\n<p><strong>The command data is meaningless</strong> : Thereâs a bug, you should always validate that command data is not just garbage.</p>\r\n<p><strong>The command leads to an invalid state</strong> : The user nonetheless requested to perform the command.</p>\r\n<p>In this case the event will be âthe request was rejectedâ. The event can be handled by sending an email back to the customer, or a support request can be started so that the support can call the customer and manage the problem. <em>All this is part of the business process anyway</em>.</p>\r\n<h2>Corner cases create business opportunities</h2>\r\n<p>I can often see discussions around account validation for credit, to make the transaction fail when your account goes below zero.</p>\r\n<p>But itâs not whatâs happening in real life. Transaction is accepted, then the bank charges you because your account is in the red zone.</p>\r\n<p>Iâm currently working in the hotel business. When a booking is received and&nbsp; thereâs no room left, should I reject the booking ? Another client can cancel soon, or I can move the customer to another hotel nearby, but just saying âthereâs no room leftâ is not a good business answer ! Overbooking management has even become a strategic practice in the business.</p>\r\n<p>To fully manage your customers you should embrace the whole business lifecycle in your system. This includes support and corner case management. Part of it will be done by hand, other part automatically, but you should not just report an exception is a trace log.</p>\r\n<p>These critical situations are usually the one in which you customer needs you more than in any other case, you should design your fault handling strategy with care and make it a full concern of you business.</p>","<p>Error handling has always been something quite difficult to grasp in\nsoftware design and still is.</p>\n<p>Exceptions are now widespread in languages, and it helps a lot to manage\ncorner case where something fails badly.</p>\n<p>But should we use Exceptions to manage business errors ?</p>\n<h2>The business errors</h2>\n<p>What do we call business errors actually ?</p>\n<h3>Broken Invariants</h3>\n<p>What if an invariance rule is broken ?</p>\n<p><strong>The situation should never happen</strong> : There is a bug. A bug\nis not a business error, correct it and deploy.</p>\n<p><strong>The situation can happens sometimes</strong> : This is not an\ninvariant, but a rare state. It should be handled as any other state\nchange.</p>\n<h3>Invalid commands</h3>\n<p>What if we receive an invalid command ?</p>\n<p><strong>The command data is meaningless</strong> : Thereâs a bug, you should\nalways validate that command data is not just garbage.</p>\n<p><strong>The command leads to an invalid state</strong> : The user\nnonetheless requested to perform the command.</p>\n<p>In this case the event will be âthe request was rejectedâ. The event can be\nhandled by sending an email back to the customer, or a support request can be\nstarted so that the support can call the customer and manage the problem.\n<em>All this is part of the business process anyway</em>.</p>\n<h2>Corner cases create business opportunities</h2>\n<p>I can often see discussions around account validation for credit, to make\nthe transaction fail when your account goes below zero.</p>\n<p>But itâs not whatâs happening in real life. Transaction is accepted, then\nthe bank charges you because your account is in the red zone.</p>\n<p>Iâm currently working in the hotel business. When a booking is received\nandÂ  thereâs no room left, should I reject the booking ? Another client\ncan cancel soon, or I can move the customer to another hotel nearby, but just\nsaying âthereâs no room leftâ is not a good business answer ! Overbooking\nmanagement has even become a strategic practice in the business.</p>\n<p>To fully manage your customers you should embrace the whole business\nlifecycle in your system. This includes support and corner case management.\nPart of it will be done by hand, other part automatically, but you should not\njust report an exception is a trace log.</p>\n<p>These critical situations are usually the one in which you customer needs\nyou more than in any other case, you should design your fault handling strategy\nwith care and make it a full concern of you business.</p>","","business errors are just ordinary events error handling has always been something quite difficult grasp software design and still exceptions are now widespread languages and helps lot manage corner case where something fails badly but should use exceptions manage business errors the business errors what call business errors actually broken invariants what invariance rule broken the situation should never happen there bug bug not business error correct and deploy the situation can happens sometimes this not invariant but rare state should handled any other state change invalid commands what receive invalid command the command data meaningless thereâs bug you should always validate that command data not just garbage the command leads invalid state the user nonetheless requested perform the command this case the event will âthe request was rejectedâ the event can handled sending email back the customer support request can started that the support can call the customer and manage the problem all this part the business process anyway corner cases create business opportunities can often see discussions around account validation for credit make the transaction fail when your account goes below zero but itâs not whatâs happening real life transaction accepted then the bank charges you because your account the red zone iâm currently working the hotel business when booking received and thereâs room left should reject the booking another client can cancel soon can move the customer another hotel nearby but just saying âthereâs room leftâ not good business answer overbooking management has even become strategic practice the business fully manage your customers you should embrace the whole business lifecycle your system this includes support and corner case management part will done hand other part automatically but you should not just report exception trace log these critical situations are usually the one which you customer needs you more than any other case you should design your fault handling strategy with care and make full concern you business","a:0:{}","1","0","1","1","2","0","0"
"489754","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2010-02-25 10:38:00","Europe/Paris","2010-02-25 09:38:23","2010-02-25 09:45:39","","post","xhtml","2010/02/25/Event-Sourcing-and-CQRS-Snapshots","en","Event Sourcing and CQRS, Snapshots !","","","<p>Leonardo had a question about reloading huge amounts of events.</p>\r\n<p>Itâs true that some Aggregate Roots have very long lifetimes with lots of events, and it can become a problem.</p>\r\n<p>&nbsp;</p>\r\n<p>There are two things involved to resolve this problem :</p>\r\n<h3>Snapshots</h3>\r\n<p>Ok, the philosophy of event sourcing is to store changes instead of state, but weâll still need state in our Aggregate Roots, and getting it from scratch can be long.</p>\r\n<p>Take a snapshot every n events (youâll see that n can be quite high), and store it alongside events, with the version of the aggregate root.</p>\r\n<p>&nbsp;</p>\r\n<p>To reload the Aggregate Root, simply find the snapshot, give it to the Aggregate root, the replay events that happened after the snapshot.</p>\r\n<p>&nbsp;</p>\r\n<p>You only need the last snapshot for each Aggregate Root, no need to log all passed snapshots.</p>\r\n<p>&nbsp;</p>\r\n<p>When you want to change stored state in an Aggregate Root, you wonât be able to used last snapshot since it will not contains expected state. But you can still replay events from scratch when it happens, so you have no loss, and simply take a new snapshot with the new state.</p>\r\n<p>&nbsp;</p>\r\n<h3>In memory domain</h3>\r\n<p>Usually with an ORM, you reload entities from the storage on every unit of work.</p>\r\n<p>&nbsp;</p>\r\n<p>But in the case of Event Sourcing, your Aggregate Roots only need to retain state that will be used to take business decisions. Youâll never query state from Aggregate Roots. A large part of the entity state and especially the part that has the biggest memory footprint is usually stored only for queries, like names, descriptions and things like that.</p>\r\n<p>&nbsp;</p>\r\n<p>In an Aggregate Root in an Event Sourcing environment, a name or description can simply be checked for validity, put in an event, but donât need to be kipped in the in memory entity state â the Aggregate Root fields.</p>\r\n<p>&nbsp;</p>\r\n<p>Youâll notice that your big domain state can fit in memory once youâve trimmed it this way.</p>\r\n<p>&nbsp;</p>\r\n<p>Now that your model is in memory, no need to reload every events on each unit of work. It happens only once when the Aggregate Root is needed the first time.</p>\r\n<p>&nbsp;</p>\r\n<p>Well see soon how you can use this to make your event serialization even faster to have very high business peak throughput.</p>","<p>Leonardo had a question about reloading huge amounts of events.</p>\n<p>Itâs true that some Aggregate Roots have very long lifetimes with lots of\nevents, and it can become a problem.</p>\n<p>Â </p>\n<p>There are two things involved to resolve this problem :</p>\n<h3>Snapshots</h3>\n<p>Ok, the philosophy of event sourcing is to store changes instead of state,\nbut weâll still need state in our Aggregate Roots, and getting it from scratch\ncan be long.</p>\n<p>Take a snapshot every n events (youâll see that n can be quite high), and\nstore it alongside events, with the version of the aggregate root.</p>\n<p>Â </p>\n<p>To reload the Aggregate Root, simply find the snapshot, give it to the\nAggregate root, the replay events that happened after the snapshot.</p>\n<p>Â </p>\n<p>You only need the last snapshot for each Aggregate Root, no need to log all\npassed snapshots.</p>\n<p>Â </p>\n<p>When you want to change stored state in an Aggregate Root, you wonât be able\nto used last snapshot since it will not contains expected state. But you can\nstill replay events from scratch when it happens, so you have no loss, and\nsimply take a new snapshot with the new state.</p>\n<p>Â </p>\n<h3>In memory domain</h3>\n<p>Usually with an ORM, you reload entities from the storage on every unit of\nwork.</p>\n<p>Â </p>\n<p>But in the case of Event Sourcing, your Aggregate Roots only need to retain\nstate that will be used to take business decisions. Youâll never query state\nfrom Aggregate Roots. A large part of the entity state and especially the part\nthat has the biggest memory footprint is usually stored only for queries, like\nnames, descriptions and things like that.</p>\n<p>Â </p>\n<p>In an Aggregate Root in an Event Sourcing environment, a name or description\ncan simply be checked for validity, put in an event, but donât need to be\nkipped in the in memory entity state â the Aggregate Root fields.</p>\n<p>Â </p>\n<p>Youâll notice that your big domain state can fit in memory once youâve\ntrimmed it this way.</p>\n<p>Â </p>\n<p>Now that your model is in memory, no need to reload every events on each\nunit of work. It happens only once when the Aggregate Root is needed the first\ntime.</p>\n<p>Â </p>\n<p>Well see soon how you can use this to make your event serialization even\nfaster to have very high business peak throughput.</p>","","event sourcing and cqrs snapshots leonardo had question about reloading huge amounts events itâs true that some aggregate roots have very long lifetimes with lots events and can become problem there are two things involved resolve this problem snapshots the philosophy event sourcing store changes instead state but weâll still need state our aggregate roots and getting from scratch can long take snapshot every events youâll see that can quite high and store alongside events with the version the aggregate root reload the aggregate root simply find the snapshot give the aggregate root the replay events that happened after the snapshot you only need the last snapshot for each aggregate root need log all passed snapshots when you want change stored state aggregate root you wonât able used last snapshot since will not contains expected state but you can still replay events from scratch when happens you have loss and simply take new snapshot with the new state memory domain usually with orm you reload entities from the storage every unit work but the case event sourcing your aggregate roots only need retain state that will used take business decisions youâll never query state from aggregate roots large part the entity state and especially the part that has the biggest memory footprint usually stored only for queries like names descriptions and things like that aggregate root event sourcing environment name description can simply checked for validity put event but donât need kipped the memory entity state the aggregate root fields youâll notice that your big domain state can fit memory once youâve trimmed this way now that your model memory need reload every events each unit work happens only once when the aggregate root needed the first time well see soon how you can use this make your event serialization even faster have very high business peak throughput","a:1:{s:3:\"tag\";a:3:{i:0;s:20:\"Domain Driven Design\";i:1;s:32:\"Distributed Domain Driven Design\";i:2;s:4:\"CQRS\";}}","1","0","1","1","4","0","0"
"509715","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2010-04-17 15:21:00","Europe/Paris","2010-04-17 13:21:42","2010-04-17 13:42:01","","post","xhtml","2010/04/17/Event-Sourcing-and-CQRS-Bounded-Contexts","en","Event Sourcing and CQRS, Bounded Contexts","","","<p>Once again, I prefer a new post that a long comment reply. This one is about a important concept of Domain Driven Design, Bounded Contexts.</p>\r\n<p>Hendry Luk asked :</p>\r\n<blockquote>\r\n<p>Just 1 question, you represent borrower in events as a simple full-name string.      <br />Is there any reason or just for sake of simplicity for example?      <br />Supposed I'm using borrowerId, how would that work in other BC, say      <br />LateBookNotifier (let's assume its a separate BC). How does this BC shows the      <br />name of the borrower? Does it communicate directly with command BC using ACL?      <br />Or does it also subscribe to BorrowerRegistered event as well (hence every BC      <br />would have duplicate data of each of the borrowers, just like they do each of      <br />the books)?</p>\r\n</blockquote>  <p>The short answer is âYes, it was just for sake of simplicityâ. In a real world scenario, borrowers would probably be entities, and thus would have an identity. I would even probably be an Aggregate Root.</p>\r\n<p>The Borrower Aggregate Root would encapsulate state needed to perform commands on this Aggregate.</p>\r\n<h2>Bounded Contexts Communications<img style=\"margin: 25px 0 0 15px\" title=\"Books\" border=\"0\" alt=\"Books\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/EventSourcingandCQRSBoundedContexts_C8DA/Books_3.jpg\" width=\"278\" height=\"228\" /></h2>\r\n<p>I can see the following contexts here :</p>\r\n<ul>   <li>Inventory : Manage books availability and state (the book has been damaged, there a notes written on it etc..)</li>\r\n<li>Relationships : Manage contact by email, phone with borrowers, and tracks the care they take to your books, if they return it on schedule.</li>\r\n</ul>\r\n<p>Since we are using CQRS (and even more, Event Sourcing), aggregates in these context donât need more state that whatâs needed to take decisions,</p>\r\n<p>So a Book in the Inventory Context will probably not need more that the Id of the borrower and the date a witch it was borrowed.   <br />We can then call the ReturnToShelf command on the Book that will publish a ReturnedLateToShelf { Book : bookId, By : borrowerId, After : 20 days, LateBy : 6 days&nbsp; }.</p>\r\n<p>A Handler at the Relationships Boundary will catch the event, and call a CheckExcuseForLateReturn on the Borrower Aggregate Root (based on its id). The command will check the borrowerâss record to see if its acceptable. It will simply publish a LateReturnGentlyAccepted if the borrower is usually in time, but will publish a KindnessLimitReached in the other case.   <br />    <br />Another handler will catch it, and call SendAngryMessage on the Messaging Service. The role of the Messaging Service is to tweet borrowers to let them know they should not forget to return your books. How does this service know the twitter account of the borrower ? When the handler (the one that call SendAngryMessage) catches a BorrowerRegistered event or a BorrowerTwitterAccountChanged message, it says so to the service that can maintain a list of accounts in any desired storage (SLQ, NoSql, in memory.. ?). The SendAngryMessage can now tweet âHey you filthy @borrower, you better return my book today or I shall share all the pics from your last partyâ¦â</p>\r\n<p>Done.</p>\r\n<h2>Where does data live ?</h2>\r\n<p>Thereâs usually a huge concern about data duplication in all contexts. Is the info duplicated in so many places ?</p>\r\n<p>There will be two main places :</p>\r\n<ul>   <li>The Persistent View Model used to see and edit borrowerâs details</li>\r\n<li>The Persistent View Model used by the messaging service to Query borrowerâs twitter accounts. Here, no other borrowerâs data is needed except its id and account name.</li>\r\n</ul>\r\n<p>The Borrower Aggregate Root and Book Aggregate Root in the two main Domain Bounded Contexts will not need to keep track of this kind of data. They wonât need it in their decision process.</p>\r\n<p>If you pursue this idea, to answer further to Leonardo, youâll notice that strings will probably never been used as state inside Domain Bounded Context. They can appear as identity key, or just pass through a command and be republished in the following event. But since strings are rarely â if never â a good way to represent information on which youâll have to take a decision, it should almost never be stored in an aggregate root current state. This is another reason why most domain models can fit in memory, because names, descriptions and other documents usually represent the biggest part of the data in a system, the remaining data is usually small. These documents and names are useless to run domain&nbsp; internal logic (except validation rules, but not state change rules) so they can simply be logged in events and persisted in the Queryâs View Models. Only state needed to take state change decisions will stay in memory.</p>","<p>Once again, I prefer a new post that a long comment reply. This one is about\na important concept of Domain Driven Design, Bounded Contexts.</p>\n<p>Hendry Luk asked :</p>\n<blockquote>\n<p>Just 1 question, you represent borrower in events as a simple full-name\nstring.<br />\nIs there any reason or just for sake of simplicity for example?<br />\nSupposed I'm using borrowerId, how would that work in other BC, say<br />\nLateBookNotifier (let's assume its a separate BC). How does this BC shows\nthe<br />\nname of the borrower? Does it communicate directly with command BC using\nACL?<br />\nOr does it also subscribe to BorrowerRegistered event as well (hence every\nBC<br />\nwould have duplicate data of each of the borrowers, just like they do each\nof<br />\nthe books)?</p>\n</blockquote>\n<p>The short answer is âYes, it was just for sake of simplicityâ. In a real\nworld scenario, borrowers would probably be entities, and thus would have an\nidentity. I would even probably be an Aggregate Root.</p>\n<p>The Borrower Aggregate Root would encapsulate state needed to perform\ncommands on this Aggregate.</p>\n<h2>Bounded Contexts Communications<img style=\"margin: 25px 0 0 15px\" title=\"Books\" border=\"0\" alt=\"Books\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/EventSourcingandCQRSBoundedContexts_C8DA/Books_3.jpg\" width=\"278\" height=\"228\" /></h2>\n<p>I can see the following contexts here :</p>\n<ul>\n<li>Inventory : Manage books availability and state (the book has been damaged,\nthere a notes written on it etc..)</li>\n<li>Relationships : Manage contact by email, phone with borrowers, and tracks\nthe care they take to your books, if they return it on schedule.</li>\n</ul>\n<p>Since we are using CQRS (and even more, Event Sourcing), aggregates in these\ncontext donât need more state that whatâs needed to take decisions,</p>\n<p>So a Book in the Inventory Context will probably not need more that the Id\nof the borrower and the date a witch it was borrowed.<br />\nWe can then call the ReturnToShelf command on the Book that will publish a\nReturnedLateToShelf { Book : bookId, By : borrowerId, After : 20 days, LateBy :\n6 daysÂ  }.</p>\n<p>A Handler at the Relationships Boundary will catch the event, and call a\nCheckExcuseForLateReturn on the Borrower Aggregate Root (based on its id). The\ncommand will check the borrowerâss record to see if its acceptable. It will\nsimply publish a LateReturnGentlyAccepted if the borrower is usually in time,\nbut will publish a KindnessLimitReached in the other case.<br />\n<br />\nAnother handler will catch it, and call SendAngryMessage on the Messaging\nService. The role of the Messaging Service is to tweet borrowers to let them\nknow they should not forget to return your books. How does this service know\nthe twitter account of the borrower ? When the handler (the one that call\nSendAngryMessage) catches a BorrowerRegistered event or a\nBorrowerTwitterAccountChanged message, it says so to the service that can\nmaintain a list of accounts in any desired storage (SLQ, NoSql, in memory.. ?).\nThe SendAngryMessage can now tweet âHey you filthy @borrower, you better return\nmy book today or I shall share all the pics from your last partyâ¦â</p>\n<p>Done.</p>\n<h2>Where does data live ?</h2>\n<p>Thereâs usually a huge concern about data duplication in all contexts. Is\nthe info duplicated in so many places ?</p>\n<p>There will be two main places :</p>\n<ul>\n<li>The Persistent View Model used to see and edit borrowerâs details</li>\n<li>The Persistent View Model used by the messaging service to Query borrowerâs\ntwitter accounts. Here, no other borrowerâs data is needed except its id and\naccount name.</li>\n</ul>\n<p>The Borrower Aggregate Root and Book Aggregate Root in the two main Domain\nBounded Contexts will not need to keep track of this kind of data. They wonât\nneed it in their decision process.</p>\n<p>If you pursue this idea, to answer further to Leonardo, youâll notice that\nstrings will probably never been used as state inside Domain Bounded Context.\nThey can appear as identity key, or just pass through a command and be\nrepublished in the following event. But since strings are rarely â if never â a\ngood way to represent information on which youâll have to take a decision, it\nshould almost never be stored in an aggregate root current state. This is\nanother reason why most domain models can fit in memory, because names,\ndescriptions and other documents usually represent the biggest part of the data\nin a system, the remaining data is usually small. These documents and names are\nuseless to run domainÂ  internal logic (except validation rules, but not\nstate change rules) so they can simply be logged in events and persisted in the\nQueryâs View Models. Only state needed to take state change decisions will stay\nin memory.</p>","","event sourcing and cqrs bounded contexts once again prefer new post that long comment reply this one about important concept domain driven design bounded contexts hendry luk asked just question you represent borrower events simple full name string there any reason just for sake simplicity for example supposed using borrowerid how would that work other say latebooknotifier let assume its separate how does this shows the name the borrower does communicate directly with command using acl does also subscribe borrowerregistered event well hence every would have duplicate data each the borrowers just like they each the books the short answer âyes was just for sake simplicityâ real world scenario borrowers would probably entities and thus would have identity would even probably aggregate root the borrower aggregate root would encapsulate state needed perform commands this aggregate bounded contexts communications can see the following contexts here inventory manage books availability and state the book has been damaged there notes written etc relationships manage contact email phone with borrowers and tracks the care they take your books they return schedule since are using cqrs and even more event sourcing aggregates these context donât need more state that whatâs needed take decisions book the inventory context will probably not need more that the the borrower and the date witch was borrowed can then call the returntoshelf command the book that will publish returnedlatetoshelf book bookid borrowerid after days lateby days handler the relationships boundary will catch the event and call checkexcuseforlatereturn the borrower aggregate root based its the command will check the borrowerâss record see its acceptable will simply publish latereturngentlyaccepted the borrower usually time but will publish kindnesslimitreached the other case another handler will catch and call sendangrymessage the messaging service the role the messaging service tweet borrowers let them know they should not forget return your books how does this service know the twitter account the borrower when the handler the one that call sendangrymessage catches borrowerregistered event borrowertwitteraccountchanged message says the service that can maintain list accounts any desired storage slq nosql memory the sendangrymessage can now tweet âhey you filthy borrower you better return book today shall share all the pics from your last partyâ¦â done where does data live thereâs usually huge concern about data duplication all contexts the info duplicated many places there will two main places the persistent view model used see and edit borrowerâs details the persistent view model used the messaging service query borrowerâs twitter accounts here other borrowerâs data needed except its and account name the borrower aggregate root and book aggregate root the two main domain bounded contexts will not need keep track this kind data they wonât need their decision process you pursue this idea answer further leonardo youâll notice that strings will probably never been used state inside domain bounded context they can appear identity key just pass through command and republished the following event but since strings are rarely never good way represent information which youâll have take decision should almost never stored aggregate root current state this another reason why most domain models can fit memory because names descriptions and other documents usually represent the biggest part the data system the remaining data usually small these documents and names are useless run domain internal logic except validation rules but not state change rules they can simply logged events and persisted the queryâs view models only state needed take state change decisions will stay memory","a:1:{s:3:\"tag\";a:3:{i:0;s:20:\"Domain Driven Design\";i:1;s:14:\"Event Sourcing\";i:2;s:4:\"CQRS\";}}","1","0","1","1","8","0","0"
"511514","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2010-04-25 22:51:00","Europe/Paris","2010-04-25 20:51:14","2010-04-25 20:54:54","","post","xhtml","2010/04/25/Event-Sourcing-and-CQRS-Events-Deserialization","en","Event Sourcing and CQRS, Events Deserialization","","","<p>So we have our events serialized in our event store. Deserializing events is not an issue, until we start to make them evolve and need to manage several versions.</p>\r\n<p>Since we never modify what has been log, weâll have to deal with old versions anyway.</p>\r\n<p>A simple way to do it is to <strong>maintain every versions of the events</strong> in the projects, and make the aggregate root accept all of them. But it will soon charge the aggregate root with a lot of code and will make it bloated rapidly.</p>\r\n<p>This is why you can usually introduce a <strong>converter</strong> that will convert any version of the event to the last one (usually you provide methods to update to next version, and iterate until last version so that this part of the code is incremental). This is a convenient way to address the problem, but you still have classes v1, v2 â¦ vn that you keep in your project only for versioning purpose even if you donât use it anymore in your production code.</p>\r\n<h3>Events as documents</h3>\r\n<p><a href=\"http://www.flickr.com/photos/serkel/519485340\"><img style=\"border-bottom: 0; border-left: 0; margin: 0 0 0 25px; border-top: 0; border-right: 0\" title=\"519485340_1a83117720_o[1]\" border=\"0\" alt=\"519485340_1a83117720_o[1]\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/EventSourcingandCQRSEventsDeserializatio_13AEE/519485340_1a83117720_o_1__3.jpg\" width=\"184\" height=\"244\" /></a>It is easy do deserialize an event as an object <strong>or</strong> a document, you only need to split two responsibilities in you deserialization process :</p>\r\n<ul>   <li>Stream reading</li>\r\n<li>Object building</li>\r\n</ul>\r\n<p>The deserializer will be in charge of reading the data, it reads the bits, and get the meaning from context, it will tell the Object Builder about objects types, fields names and value.</p>\r\n<p>On its side, the ob ject builder will instantiate the objects, set fields values depending on names.</p>\r\n<p>You can provides two distinct Object Builders. The strongly typed one will instantiate concrete .net types and set fields using reflection. The document builder one, will instantiate objects that will only be property bags.</p>\r\n<p>When deserializing an event in its last version, you can use directly the strongly typed one, but when reading an previous version of the event, you can deserialize it as a document and give it to the converter.</p>\r\n<p>The converter will then add/remove properties from the document to make it up to date, and the document will be used to create a concrete .net type of the last event version.</p>\r\n<p>Here the process is quite the same, you should provide a document reader that will use the strongly typed object builder to instantiate the event.</p>\r\n<p>Thereâs no need to keep every version of you Event Classes now since you can manipulate old versions as documents.</p>\r\n<h3>Using dynamic in C#4</h3>\r\n<p>Document manipulation can make things a bit messy since it can be hard to understand the original structure of the object. This is where you can use the DLR DynamicObject class to make the property bag (the document) a dynamic object that youâll be able to use as any standard .net object.</p>\r\n<p>This way, in the converter you can manipulate old versions of the events as .net objects without having to keep all those old classes that wonât be used anymore.</p>","<p>So we have our events serialized in our event store. Deserializing events is\nnot an issue, until we start to make them evolve and need to manage several\nversions.</p>\n<p>Since we never modify what has been log, weâll have to deal with old\nversions anyway.</p>\n<p>A simple way to do it is to <strong>maintain every versions of the\nevents</strong> in the projects, and make the aggregate root accept all of\nthem. But it will soon charge the aggregate root with a lot of code and will\nmake it bloated rapidly.</p>\n<p>This is why you can usually introduce a <strong>converter</strong> that will\nconvert any version of the event to the last one (usually you provide methods\nto update to next version, and iterate until last version so that this part of\nthe code is incremental). This is a convenient way to address the problem, but\nyou still have classes v1, v2 â¦ vn that you keep in your project only for\nversioning purpose even if you donât use it anymore in your production\ncode.</p>\n<h3>Events as documents</h3>\n<p><a href=\"http://www.flickr.com/photos/serkel/519485340\"><img style=\"border-bottom: 0; border-left: 0; margin: 0 0 0 25px; border-top: 0; border-right: 0\" title=\"519485340_1a83117720_o[1]\" border=\"0\" alt=\"519485340_1a83117720_o[1]\" align=\"right\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/EventSourcingandCQRSEventsDeserializatio_13AEE/519485340_1a83117720_o_1__3.jpg\" width=\"184\" height=\"244\" /></a>It is easy do deserialize an event as an object\n<strong>or</strong> a document, you only need to split two responsibilities in\nyou deserialization process :</p>\n<ul>\n<li>Stream reading</li>\n<li>Object building</li>\n</ul>\n<p>The deserializer will be in charge of reading the data, it reads the bits,\nand get the meaning from context, it will tell the Object Builder about objects\ntypes, fields names and value.</p>\n<p>On its side, the ob ject builder will instantiate the objects, set fields\nvalues depending on names.</p>\n<p>You can provides two distinct Object Builders. The strongly typed one will\ninstantiate concrete .net types and set fields using reflection. The document\nbuilder one, will instantiate objects that will only be property bags.</p>\n<p>When deserializing an event in its last version, you can use directly the\nstrongly typed one, but when reading an previous version of the event, you can\ndeserialize it as a document and give it to the converter.</p>\n<p>The converter will then add/remove properties from the document to make it\nup to date, and the document will be used to create a concrete .net type of the\nlast event version.</p>\n<p>Here the process is quite the same, you should provide a document reader\nthat will use the strongly typed object builder to instantiate the event.</p>\n<p>Thereâs no need to keep every version of you Event Classes now since you can\nmanipulate old versions as documents.</p>\n<h3>Using dynamic in C#4</h3>\n<p>Document manipulation can make things a bit messy since it can be hard to\nunderstand the original structure of the object. This is where you can use the\nDLR DynamicObject class to make the property bag (the document) a dynamic\nobject that youâll be able to use as any standard .net object.</p>\n<p>This way, in the converter you can manipulate old versions of the events as\n.net objects without having to keep all those old classes that wonât be used\nanymore.</p>","","event sourcing and cqrs events deserialization have our events serialized our event store deserializing events not issue until start make them evolve and need manage several versions since never modify what has been log weâll have deal with old versions anyway simple way maintain every versions the events the projects and make the aggregate root accept all them but will soon charge the aggregate root with lot code and will make bloated rapidly this why you can usually introduce converter that will convert any version the event the last one usually you provide methods update next version and iterate until last version that this part the code incremental this convenient way address the problem but you still have classes that you keep your project only for versioning purpose even you donât use anymore your production code events documents easy deserialize event object document you only need split two responsibilities you deserialization process stream reading object building the deserializer will charge reading the data reads the bits and get the meaning from context will tell the object builder about objects types fields names and value its side the ject builder will instantiate the objects set fields values depending names you can provides two distinct object builders the strongly typed one will instantiate concrete net types and set fields using reflection the document builder one will instantiate objects that will only property bags when deserializing event its last version you can use directly the strongly typed one but when reading previous version the event you can deserialize document and give the converter the converter will then add remove properties from the document make date and the document will used create concrete net type the last event version here the process quite the same you should provide document reader that will use the strongly typed object builder instantiate the event thereâs need keep every version you event classes now since you can manipulate old versions documents using dynamic document manipulation can make things bit messy since can hard understand the original structure the object this where you can use the dlr dynamicobject class make the property bag the document dynamic object that youâll able use any standard net object this way the converter you can manipulate old versions the events net objects without having keep all those old classes that wonât used anymore","a:1:{s:3:\"tag\";a:4:{i:0;s:14:\"Event Sourcing\";i:1;s:20:\"Domain Driven Design\";i:2;s:32:\"Distributed Domain Driven Design\";i:3;s:4:\"CQRS\";}}","1","0","1","1","2","1","0"
"526729","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2010-06-14 10:58:00","Europe/Paris","2010-06-14 08:58:29","2010-06-14 08:51:40","","post","xhtml","2010/06/14/DDD-Exchange-2010","en","DDD Exchange 2010","","","<p>I could not attend to this yearâs edition that seemed really great with Eric Evans, Greg Young, Udi Dahan, Ian Cooper and Gojko Adzic.</p>\r\n<p>The videos from the events should be soon somewhere around <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2010/wd-23\">here</a>.</p>\r\n<p>And you can already find transcripts of the talks on Gojko âI post faster than people talkâs blog :</p>\r\n<p><a href=\"http://gojko.net/2010/06/11/eric-evans-domain-driven-design-redefined/\" target=\"_blank\">Eric Evans: Domain driven design redefined</a></p>\r\n<p><a href=\"http://gojko.net/2010/06/11/udi-dahan-the-biggest-mistakes-teams-make-when-applying-ddd/\" target=\"_blank\">Udi Dahan: the biggest mistakes teams make when applying DDD</a></p>\r\n<p><a href=\"http://gojko.net/2010/06/11/evolution-of-ddd-cqrs-and-event-sourcing/\" target=\"_blank\">Greg Young :Evolution of DDD: CQRS and Event Sourcing</a></p>\r\n<p>&nbsp;</p>\r\n<p>If you also missed it, donât make the same mistake next year, and <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2011/wd-23\" target=\"_blank\">register now for Â£50.00</a> (instead of Â£250.00) until the end of the week.</p>","<p>I could not attend to this yearâs edition that seemed really great with Eric\nEvans, Greg Young, Udi Dahan, Ian Cooper and Gojko Adzic.</p>\n<p>The videos from the events should be soon somewhere around <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2010/wd-23\">here</a>.</p>\n<p>And you can already find transcripts of the talks on Gojko âI post faster\nthan people talkâs blog :</p>\n<p><a href=\"http://gojko.net/2010/06/11/eric-evans-domain-driven-design-redefined/\" target=\"_blank\">Eric Evans: Domain driven design redefined</a></p>\n<p><a href=\"http://gojko.net/2010/06/11/udi-dahan-the-biggest-mistakes-teams-make-when-applying-ddd/\" target=\"_blank\">Udi Dahan: the biggest mistakes teams make when applying\nDDD</a></p>\n<p><a href=\"http://gojko.net/2010/06/11/evolution-of-ddd-cqrs-and-event-sourcing/\" target=\"_blank\">Greg Young :Evolution of DDD: CQRS and Event Sourcing</a></p>\n<p>Â </p>\n<p>If you also missed it, donât make the same mistake next year, and <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2011/wd-23\" target=\"_blank\">register now for Â£50.00</a> (instead of Â£250.00) until the end\nof the week.</p>","","ddd exchange 2010 could not attend this yearâs edition that seemed really great with eric evans greg young udi dahan ian cooper and gojko adzic the videos from the events should soon somewhere around here and you can already find transcripts the talks gojko post faster than people talkâs blog eric evans domain driven design redefined udi dahan the biggest mistakes teams make when applying ddd greg young evolution ddd cqrs and event sourcing you also missed donât make the same mistake next year and register now for instead 250 until the end the week","a:1:{s:3:\"tag\";a:6:{i:0;s:14:\"Event Sourcing\";i:1;s:5:\"Evans\";i:2;s:20:\"Domain Driven Design\";i:3;s:32:\"Distributed Domain Driven Design\";i:4;s:12:\"DDD Exchange\";i:5;s:4:\"CQRS\";}}","1","0","1","1","0","0","0"
"535966","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2010-07-29 17:50:00","Europe/Paris","2010-07-29 15:50:08","2010-07-29 16:05:33","","post","xhtml","2010/07/29/Time-and-causality-in-Event-Sourcing","en","Time and causality in Event Sourcing","","","<p>Iâm alone at home this days and, as a good old geek I passed my evening yesterday in from of my computer screen.</p>  <p>I noticed <a href=\"http://twitter.com/ericevans0/status/19767608112\" target=\"_blank\">this tweet</a> from <a href=\"http://twitter.com/ericevans0\" target=\"_blank\">Eric Evans</a> :</p>  <blockquote>   <p>A deep discussion of state-change and time in software <a href=\"http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\">http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey</a> by @<a href=\"http://twitter.com/richhickey\">richhickey</a></p> </blockquote>  <p><em><font style=\"background-color: #444444\" color=\"#ffffff\" face=\"Georgia\">&#160;</font></em></p>","<p>Iâm alone at home this days and, as a good old geek I passed my evening\nyesterday in from of my computer screen.</p>\n<p>I noticed <a href=\"http://twitter.com/ericevans0/status/19767608112\" target=\"_blank\">this tweet</a> from <a href=\"http://twitter.com/ericevans0\" target=\"_blank\">Eric Evans</a> :</p>\n<blockquote>\n<p>A deep discussion of state-change and time in software <a href=\"http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\">http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey</a>\nby @<a href=\"http://twitter.com/richhickey\">richhickey</a></p>\n</blockquote>\n<p><em>Â </em></p>","","time and causality event sourcing iâm alone home this days and good old geek passed evening yesterday from computer screen noticed this tweet from eric evans deep discussion state change and time software http www infoq com presentations are there yet rich hickey richhickey","","0","0","1","1","0","0","0"
"555499","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","45075","2010-10-19 01:49:00","Europe/Paris","2010-10-18 23:49:18","2010-10-27 22:15:01","","post","xhtml","2010/10/19/Duck-Delete-Update-Create-Killer","en","Duck : Delete Update Create Killer","","","<p><img style=\"display: inline; margin-left: 0; margin-right: 0\" title=\"Duck sign, Stockbridge High Street\" alt=\"Duck sign, Stockbridge High Street\" align=\"right\" src=\"http://s0.geograph.org.uk/photos/21/35/213574_3470e842.jpg\" width=\"188\" height=\"251\" />I recently had a remark from Frederic Fadel from Aspectize, telling me about Event Sourcing something like:</p>\r\n<p>Why would you like to write SQL to write data to your read model when our product can do it for you ?</p>\r\n<p>I acknowledge that their product is fancy. You simply declare your <s>db</s>&nbsp;data schema, your UI and services and bind it all together. </p>\r\n<p>But it doesnât fit well with CQRS and Event Sourcing. And I want to do Event Sourcing for domain and business reasons, not technical reasons.</p>\r\n<p>But he was write on this point :</p>\r\n<p>I donât want to write SQL to denormalize my events to my queryable storage.</p>\r\n<p>What are my options ?</p>\r\n<ul>   <li>Writing SQL by hand, but testability is low, and youâll get a mix of C# to get data from the events, and SQL for the Update queries. </li>\r\n<li>Using an ORM. When doing NHibernate you donât really write SQL. Testability wont be great anyway. </li>\r\n</ul>\r\n<h2>The problem with ORMs</h2>\r\n<p>ORM are usually better at getting data than at changing it. You can do it, but letâs look at what happens.</p>\r\n<p>The ORM loads data from your Db into entities that will be tracked by an identity tracker. Then you change the values in memory . Then the ORM will find what needs to be sent back to the server and make a query to the Db so that the change happens.</p>\r\n<p>But what I need to do is a lot simpler. Just emit some INSERT, UPDATE or DELETE based on current table values and event data.</p>\r\n<p>With an ORM, what happens if the data is changed between loading and saving ? Iâll have to manage some versioning and/or transaction. And Iâll make two roundtrips to the server needlessly.</p>\r\n<h2>Here comes Duck</h2>\r\n<p>Duck is a kind of ORM oriented toward Delete Update Create.</p>\r\n<p>Donât ask Duck to load data in memory, it simply canât. </p>\r\n<p>You simply express how data should change based on current row content and values that youâll pass.</p>\r\n<p>It avoids the first roundtrip to the database, and make shorter code to express the change.</p>\r\n<h2>Letâs see how to use it</h2>\r\n<p>First, you should declare a class that has the structure of your table with public get/set properties, and marked with a Table attribute :</p>\r\n<pre style=\"font-family: consolas\">	[<span style=\"color: #2b91af\">Table</span>]<br />	<span style=\"color: blue\">class</span>&nbsp;<span style=\"color: #2b91af\">Species</span><br />	{<br />		<span style=\"color: blue\">public</span>&nbsp;<span style=\"color: #2b91af\">Guid</span> Id { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />		<span style=\"color: blue\">public</span>&nbsp;<span style=\"color: blue\">string</span> Name { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />		<span style=\"color: blue\">public</span>&nbsp;<span style=\"color: blue\">string</span> BinomialName { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />		<span style=\"color: blue\">public</span>&nbsp;<span style=\"color: blue\">bool</span> IsEndangered { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />		<span style=\"color: blue\">public</span>&nbsp;<span style=\"color: blue\">int</span> Population { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />	}</pre>\r\n<p>It contains current observed species at an observatory.</p>\r\n<p>Then a simple new statement, letâs say that a new species has be registered at the observatory :</p>\r\n<pre style=\"font-family: consolas\">	<span style=\"color: blue\">var</span> duck = <span style=\"color: blue\">new</span>&nbsp;<span style=\"color: #2b91af\">DuckContext'(connectionString)</span>;<br />	<span style=\"color: blue\">var</span> speciesId = <span style=\"color: #2b91af\">Guid</span>.NewGuid();<br />	duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />	    .Insert(() =&gt; <br />	       <span style=\"color: blue\">new</span>&nbsp;<span style=\"color: #2b91af\">Species</span><br />	       {<br />		Id = speciesId,<br />	         Name = <span style=\"color: #a31515\">\"Mallard\"</span>,<br />		BinomialName = <span style=\"color: #a31515\">\"Anas platyrhynchos\"</span>,<br />		IsEndangered = <span style=\"color: blue\">false</span>,<br />		Population = 50<br />	       });</pre>\r\n<p>Nothing tricky here..</p>\r\n<p>The observatory noticed a population decay, the species is endangered :</p>\r\n<pre style=\"font-family: consolas\">	duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />	    .Where(r =&gt; r.Id == speciesId)<br />	    .Update(r =&gt; <span style=\"color: blue\">new</span>&nbsp;<span style=\"color: #2b91af\">Species</span> {<br />              Population = r.Population - 40,<br />              IsEndangered = <span style=\"color: blue\">true</span>});</pre>\r\n<p>Here, the use of the current value of Population will not load current value. It will the following statement :</p>\r\n<p>UPDATE Species\r\n<br />SET\r\n<br />&nbsp;&nbsp;&nbsp; Population = Population - 40,\r\n<br />&nbsp;&nbsp;&nbsp; IsEndangered = 1\r\n<br />WHERE\r\n<br />&nbsp;&nbsp;&nbsp; Id = @p0</p>\r\n<p>I chose&nbsp; to create a new Row from the old one rather than change the original one for two reasons :</p>\r\n<ul>\r\n<li>It makes rows immutable and you donât have to think about execution order between fields assignments. Itâs the way SQL works </li>\r\n<li>Linq Expressions cannot represent statement blocks and assignments in C#3, Duck would have been .Net onlyâ¦ </li>\r\n</ul>\r\n<p>The â40 is directly in the query here because we used a constant. I we where using a variable, query would contain a parameter </p>\r\n<p>Now the species has disappeared, it should be removed from the observed species (though it could be just an update somewhere else) :</p>\r\n<pre style=\"font-family: consolas\">	duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />	    .Where(r =&gt; r.Id == speciesId)<br />	    .Delete();</pre>\r\n<h2>Testability</h2>\r\n<p>To run your test you just have to use the InMemoryDuckContextâ¦ you have then access to Table&lt;T&gt;() thatâll enable you to set up your data and verify after execution that things changed as expected. Iâll talk a bit more about it soon.</p>\r\n<h2>Try it now, itâs OSS</h2>\r\n<p>You can grab the code at bitbucket and try it now :</p>\r\n<p><a title=\"http://bitbucket.org/thinkbeforecoding/duck\" href=\"http://bitbucket.org/thinkbeforecoding/duck\" target=\"_blank\">http://bitbucket.org/thinkbeforecoding/duck</a></p>\r\n<p>Itâs in F# ! Writing a AST analyzer in F# is far more easy, concise and expressive than in C#. Youâll just have to reference Duck in you project, thereâs no direct F# dependency.</p>\r\n<p>Next episode will be about how to mix it with Rx (Reactive Framework) to declare your event handling logic.</p>\r\n<p>Hope you like it, and donât hesitate to give feedback and suggestions.</p>","<p><img style=\"display: inline; margin-left: 0; margin-right: 0\" title=\"Duck sign, Stockbridge High Street\" alt=\"Duck sign, Stockbridge High Street\" align=\"right\" src=\"http://s0.geograph.org.uk/photos/21/35/213574_3470e842.jpg\" width=\"188\" height=\"251\" />I recently had a remark from Frederic Fadel from\nAspectize, telling me about Event Sourcing something like:</p>\n<p>Why would you like to write SQL to write data to your read model when our\nproduct can do it for you ?</p>\n<p>I acknowledge that their product is fancy. You simply declare your\n<span style=\"text-decoration: line-through\">db</span>Â data schema, your UI\nand services and bind it all together.</p>\n<p>But it doesnât fit well with CQRS and Event Sourcing. And I want to do Event\nSourcing for domain and business reasons, not technical reasons.</p>\n<p>But he was write on this point :</p>\n<p>I donât want to write SQL to denormalize my events to my queryable\nstorage.</p>\n<p>What are my options ?</p>\n<ul>\n<li>Writing SQL by hand, but testability is low, and youâll get a mix of C# to\nget data from the events, and SQL for the Update queries.</li>\n<li>Using an ORM. When doing NHibernate you donât really write SQL. Testability\nwont be great anyway.</li>\n</ul>\n<h2>The problem with ORMs</h2>\n<p>ORM are usually better at getting data than at changing it. You can do it,\nbut letâs look at what happens.</p>\n<p>The ORM loads data from your Db into entities that will be tracked by an\nidentity tracker. Then you change the values in memory . Then the ORM will find\nwhat needs to be sent back to the server and make a query to the Db so that the\nchange happens.</p>\n<p>But what I need to do is a lot simpler. Just emit some INSERT, UPDATE or\nDELETE based on current table values and event data.</p>\n<p>With an ORM, what happens if the data is changed between loading and saving\n? Iâll have to manage some versioning and/or transaction. And Iâll make two\nroundtrips to the server needlessly.</p>\n<h2>Here comes Duck</h2>\n<p>Duck is a kind of ORM oriented toward Delete Update Create.</p>\n<p>Donât ask Duck to load data in memory, it simply canât.</p>\n<p>You simply express how data should change based on current row content and\nvalues that youâll pass.</p>\n<p>It avoids the first roundtrip to the database, and make shorter code to\nexpress the change.</p>\n<h2>Letâs see how to use it</h2>\n<p>First, you should declare a class that has the structure of your table with\npublic get/set properties, and marked with a Table attribute :</p>\n<pre style=\"font-family: consolas\">\n     [<span style=\"color: #2b91af\">Table</span>]<br />       <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">Species</span><br />   {<br />         <span style=\"color: blue\">public</span> <span style=\"color: #2b91af\">Guid</span> Id { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />          <span style=\"color: blue\">public</span> <span style=\"color: blue\">string</span> Name { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />         <span style=\"color: blue\">public</span> <span style=\"color: blue\">string</span> BinomialName { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />         <span style=\"color: blue\">public</span> <span style=\"color: blue\">bool</span> IsEndangered { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />           <span style=\"color: blue\">public</span> <span style=\"color: blue\">int</span> Population { <span style=\"color: blue\">get</span>; <span style=\"color: blue\">set</span>; }<br />      }\n</pre>\n<p>It contains current observed species at an observatory.</p>\n<p>Then a simple new statement, letâs say that a new species has be registered\nat the observatory :</p>\n<pre style=\"font-family: consolas\">\n     <span style=\"color: blue\">var</span> duck = <span style=\"color: blue\">new</span> <span style=\"color: #2b91af\">DuckContext'(connectionString)</span>;<br /> <span style=\"color: blue\">var</span> speciesId = <span style=\"color: #2b91af\">Guid</span>.NewGuid();<br />      duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />          .Insert(() =&gt; <br />            <span style=\"color: blue\">new</span> <span style=\"color: #2b91af\">Species</span><br />             {<br />          Id = speciesId,<br />            Name = <span style=\"color: #a31515\">&quot;Mallard&quot;</span>,<br />            BinomialName = <span style=\"color: #a31515\">&quot;Anas platyrhynchos&quot;</span>,<br />          IsEndangered = <span style=\"color: blue\">false</span>,<br />            Population = 50<br />          });\n</pre>\n<p>Nothing tricky here..</p>\n<p>The observatory noticed a population decay, the species is endangered :</p>\n<pre style=\"font-family: consolas\">\n     duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />          .Where(r =&gt; r.Id == speciesId)<br />         .Update(r =&gt; <span style=\"color: blue\">new</span> <span style=\"color: #2b91af\">Species</span> {<br />              Population = r.Population - 40,<br />              IsEndangered = <span style=\"color: blue\">true</span>});\n</pre>\n<p>Here, the use of the current value of Population will not load current\nvalue. It will the following statement :</p>\n<p>UPDATE Species<br />\nSET<br />\nÂ Â Â  Population = Population - 40,<br />\nÂ Â Â  IsEndangered = 1<br />\nWHERE<br />\nÂ Â Â  Id = @p0</p>\n<p>I choseÂ  to create a new Row from the old one rather than change the\noriginal one for two reasons :</p>\n<ul>\n<li>It makes rows immutable and you donât have to think about execution order\nbetween fields assignments. Itâs the way SQL works</li>\n<li>Linq Expressions cannot represent statement blocks and assignments in C#3,\nDuck would have been .Net onlyâ¦</li>\n</ul>\n<p>The â40 is directly in the query here because we used a constant. I we where\nusing a variable, query would contain a parameter</p>\n<p>Now the species has disappeared, it should be removed from the observed\nspecies (though it could be just an update somewhere else) :</p>\n<pre style=\"font-family: consolas\">\n     duck.In&lt;<span style=\"color: #2b91af\">Species</span>&gt;()<br />          .Where(r =&gt; r.Id == speciesId)<br />         .Delete();\n</pre>\n<h2>Testability</h2>\n<p>To run your test you just have to use the InMemoryDuckContextâ¦ you have then\naccess to Table&lt;T&gt;() thatâll enable you to set up your data and verify\nafter execution that things changed as expected. Iâll talk a bit more about it\nsoon.</p>\n<h2>Try it now, itâs OSS</h2>\n<p>You can grab the code at bitbucket and try it now :</p>\n<p><a title=\"http://bitbucket.org/thinkbeforecoding/duck\" href=\"http://bitbucket.org/thinkbeforecoding/duck\" target=\"_blank\">http://bitbucket.org/thinkbeforecoding/duck</a></p>\n<p>Itâs in F# ! Writing a AST analyzer in F# is far more easy, concise and\nexpressive than in C#. Youâll just have to reference Duck in you project,\nthereâs no direct F# dependency.</p>\n<p>Next episode will be about how to mix it with Rx (Reactive Framework) to\ndeclare your event handling logic.</p>\n<p>Hope you like it, and donât hesitate to give feedback and suggestions.</p>","","duck delete update create killer recently had remark from frederic fadel from aspectize telling about event sourcing something like why would you like write sql write data your read model when our product can for you acknowledge that their product fancy you simply declare your data schema your and services and bind all together but doesnât fit well with cqrs and event sourcing and want event sourcing for domain and business reasons not technical reasons but was write this point donât want write sql denormalize events queryable storage what are options writing sql hand but testability low and youâll get mix get data from the events and sql for the update queries using orm when doing nhibernate you donât really write sql testability wont great anyway the problem with orms orm are usually better getting data than changing you can but letâs look what happens the orm loads data from your into entities that will tracked identity tracker then you change the values memory then the orm will find what needs sent back the server and make query the that the change happens but what need lot simpler just emit some insert update delete based current table values and event data with orm what happens the data changed between loading and saving iâll have manage some versioning and transaction and iâll make two roundtrips the server needlessly here comes duck duck kind orm oriented toward delete update create donât ask duck load data memory simply canât you simply express how data should change based current row content and values that youâll pass avoids the first roundtrip the database and make shorter code express the change letâs see how use first you should declare class that has the structure your table with public get set properties and marked with table attribute table class species public guid get set public string name get set public string binomialname get set public bool isendangered get set public int population get set contains current observed species observatory then simple new statement letâs say that new species has registered the observatory var duck new duckcontext connectionstring var speciesid guid newguid duck species insert new species speciesid name quot mallard quot binomialname quot anas platyrhynchos quot isendangered false population nothing tricky here the observatory noticed population decay the species endangered duck species where speciesid update new species population population isendangered true here the use the current value population will not load current value will the following statement update species set population population isendangered where chose create new row from the old one rather than change the original one for two reasons makes rows immutable and you donât have think about execution order between fields assignments itâs the way sql works linq expressions cannot represent statement blocks and assignments duck would have been net onlyâ¦ the â40 directly the query here because used constant where using variable query would contain parameter now the species has disappeared should removed from the observed species though could just update somewhere else duck species where speciesid delete testability run your test you just have use the inmemoryduckcontextâ¦ you have then access table thatâll enable you set your data and verify after execution that things changed expected iâll talk bit more about soon try now itâs oss you can grab the code bitbucket and try now http bitbucket org thinkbeforecoding duck itâs writing ast analyzer far more easy concise and expressive than youâll just have reference duck you project thereâs direct dependency next episode will about how mix with reactive framework declare your event handling logic hope you like and donât hesitate give feedback and suggestions","a:1:{s:3:\"tag\";a:2:{i:0;s:14:\"Event Sourcing\";i:1;s:4:\"Duck\";}}","1","0","1","1","2","0","0"
"579053","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2011-01-20 12:07:00","Europe/Paris","2011-01-20 11:07:57","2012-12-23 23:55:50","","post","xhtml","2011/01/20/Code-code-code","en","Code code code","","","<p>There are some sample/proof-of-concept codes on <a href=\"http://code.thinkbeforecoding.com/\" target=\"_blank\">code.thinkbeforecoding.com</a> (hosted by bitbucket.org)</p>\r\n<p>&nbsp;</p>\r\n<p>You can have a look at it and contribute if you want.</p>\r\n<p>&nbsp;</p>\r\n<p>Enjoy !</p>","<p>There are some sample/proof-of-concept codes on <a href=\"http://code.thinkbeforecoding.com/\" target=\"_blank\">code.thinkbeforecoding.com</a> (hosted by bitbucket.org)</p>\n<p>Â </p>\n<p>You can have a look at it and contribute if you want.</p>\n<p>Â </p>\n<p>Enjoy !</p>","","code code code there are some sample proof concept codes code thinkbeforecoding com hosted bitbucket org you can have look and contribute you want enjoy","a:0:{}","1","0","1","1","0","0","0"
"579381","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2011-01-21 14:45:00","Europe/Paris","2011-01-21 13:45:00","2011-01-21 13:45:01","","post","xhtml","2011/01/21/SmtpListener","en","SmtpListener","","","<p>Iâve been posting a <a href=\"http://code.thinkbeforecoding.com/smtplistener\" target=\"_blank\">sample SmtpListener on my repository</a> a few days ago.</p>  <p>Itâs infrastructure stuff.. what does it have to do with what Iâm usually talking about here ?</p>  <p>&#160;</p>  <p><strong>Itâs about Reactive Programming.</strong></p>  <p>&#160;</p>  <p>Sometimes you have to integrate with legacy systems thatâll send you things through email.</p>  <p>Ok, I know, it kind of sucks as an integration mechanism, but stillâ¦ you have to do this way.</p>  <p>&#160;</p>  <p>The usual way to receive email in an application is to set a mailbox on a mail server (think Exchange), and pull mailboxes periodically to see if thereâs something new there.</p>  <p>&#160;</p>  <p>There are two bad things here :</p>  <ul>   <li>People tend to use their enterprise mail server for this. The mail sever is often vital for your business and screwing it up with a bug can have a big impact on your organization.</li>    <li>Email are pushed to you.. why would you pull it. You can push it directly on your service bus !</li> </ul>  <p>So, I prototyped a small smtp listener that could easily be integrated with whatever you want.</p>  <p>&#160;</p>  <p>You need to add a MX entry in your dns zone configuration so that other servers find it, and get a valid certificate if you want to use secured TLS connections (Iâve disabled certificated verification for demo purpose).</p>  <p>&#160;</p>  <p>But as you can see, the code is very simple since the .Net framework has already whatâs needed.</p>  <p>&#160;</p>  <p>The TcpListener is used to receive connections thatâll provide a TcpClient with underlying streams.</p>  <p>The SslStream class is used to encapsulate tcp streams to add Ssl encryption.</p>  <p>Iâm using the reactive framework to convert the Begin/EndAcceptTcpClient methods to an Observable to avoid writing the accept loop myself.</p>  <p>&#160;</p>  <p>Then implementation of the protocol is very easy, you can find <a href=\"http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\" target=\"_blank\">an overview and sample on wikipedia</a>.</p>  <p>The RFCs can easily be found :</p>  <p><a href=\"http://tools.ietf.org/rfc/rfc5321.txt\">RFC 5321</a>: Simple Mail Transfer Protocol</p>  <p><a href=\"http://tools.ietf.org/rfc/rfc3207.txt\">RFC 3207</a>: SMTP Service Extension for Secure SMTP over Transport Layer Security</p>  <p>&#160;</p>  <p>Of course you can use it freely, and propose changes to make it better since itâs not attack proof.</p>  <p>This code is not resistant to known potential SMTP attacks, including dangling connections, long lines etc.. </p>","<p>Iâve been posting a <a href=\"http://code.thinkbeforecoding.com/smtplistener\" target=\"_blank\">sample SmtpListener on my repository</a> a few days ago.</p>\n<p>Itâs infrastructure stuff.. what does it have to do with what Iâm usually\ntalking about here ?</p>\n<p>Â </p>\n<p><strong>Itâs about Reactive Programming.</strong></p>\n<p>Â </p>\n<p>Sometimes you have to integrate with legacy systems thatâll send you things\nthrough email.</p>\n<p>Ok, I know, it kind of sucks as an integration mechanism, but stillâ¦ you\nhave to do this way.</p>\n<p>Â </p>\n<p>The usual way to receive email in an application is to set a mailbox on a\nmail server (think Exchange), and pull mailboxes periodically to see if thereâs\nsomething new there.</p>\n<p>Â </p>\n<p>There are two bad things here :</p>\n<ul>\n<li>People tend to use their enterprise mail server for this. The mail sever is\noften vital for your business and screwing it up with a bug can have a big\nimpact on your organization.</li>\n<li>Email are pushed to you.. why would you pull it. You can push it directly\non your service bus !</li>\n</ul>\n<p>So, I prototyped a small smtp listener that could easily be integrated with\nwhatever you want.</p>\n<p>Â </p>\n<p>You need to add a MX entry in your dns zone configuration so that other\nservers find it, and get a valid certificate if you want to use secured TLS\nconnections (Iâve disabled certificated verification for demo purpose).</p>\n<p>Â </p>\n<p>But as you can see, the code is very simple since the .Net framework has\nalready whatâs needed.</p>\n<p>Â </p>\n<p>The TcpListener is used to receive connections thatâll provide a TcpClient\nwith underlying streams.</p>\n<p>The SslStream class is used to encapsulate tcp streams to add Ssl\nencryption.</p>\n<p>Iâm using the reactive framework to convert the Begin/EndAcceptTcpClient\nmethods to an Observable to avoid writing the accept loop myself.</p>\n<p>Â </p>\n<p>Then implementation of the protocol is very easy, you can find <a href=\"http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\" target=\"_blank\">an\noverview and sample on wikipedia</a>.</p>\n<p>The RFCs can easily be found :</p>\n<p><a href=\"http://tools.ietf.org/rfc/rfc5321.txt\">RFC 5321</a>: Simple Mail\nTransfer Protocol</p>\n<p><a href=\"http://tools.ietf.org/rfc/rfc3207.txt\">RFC 3207</a>: SMTP Service\nExtension for Secure SMTP over Transport Layer Security</p>\n<p>Â </p>\n<p>Of course you can use it freely, and propose changes to make it better since\nitâs not attack proof.</p>\n<p>This code is not resistant to known potential SMTP attacks, including\ndangling connections, long lines etc..</p>","","smtplistener iâve been posting sample smtplistener repository few days ago itâs infrastructure stuff what does have with what iâm usually talking about here itâs about reactive programming sometimes you have integrate with legacy systems thatâll send you things through email know kind sucks integration mechanism but stillâ¦ you have this way the usual way receive email application set mailbox mail server think exchange and pull mailboxes periodically see thereâs something new there there are two bad things here people tend use their enterprise mail server for this the mail sever often vital for your business and screwing with bug can have big impact your organization email are pushed you why would you pull you can push directly your service bus prototyped small smtp listener that could easily integrated with whatever you want you need add entry your dns zone configuration that other servers find and get valid certificate you want use secured tls connections iâve disabled certificated verification for demo purpose but you can see the code very simple since the net framework has already whatâs needed the tcplistener used receive connections thatâll provide tcpclient with underlying streams the sslstream class used encapsulate tcp streams add ssl encryption iâm using the reactive framework convert the begin endaccepttcpclient methods observable avoid writing the accept loop myself then implementation the protocol very easy you can find overview and sample wikipedia the rfcs can easily found rfc 5321 simple mail transfer protocol rfc 3207 smtp service extension for secure smtp over transport layer security course you can use freely and propose changes make better since itâs not attack proof this code not resistant known potential smtp attacks including dangling connections long lines etc","a:0:{}","1","0","1","1","0","0","0"
"579982","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","46811","2011-01-24 11:36:00","Europe/Paris","2011-01-24 10:36:24","2011-01-24 10:36:25","","post","xhtml","2011/01/24/Switching-keyboard-language-in-WP7","en","Switching keyboard language in WP7","","","<p>It was bugging me that I could not switch WP7 keyboard language.</p>  <p>I write most of my emails in French, but my blog and <a href=\"http://twitter.com/thinkb4coding\" target=\"_blank\">tweets</a> are in English.</p>  <p>Iâve seen that some people were also asking it for the soon to come update.</p>  <p>&#160;</p>  <p>But you can actually already do it easily.</p>  <p>&#160;</p>  <p>Hereâs a short how to.</p>  <p>&#160;</p>  <p>Go to Settings/Keyboard. Then tap on Keyboard language.</p>  <p>&#160;</p>  <p><strong>You can select multiple languages here with the checkboxes !</strong></p>  <p>&#160;</p>  <p>Thatâs all.</p>  <p>&#160;</p>  <p>Then when you open any application with a keyboard you can notice the language selector near the space bar :</p>  <p><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_2.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb.png\" width=\"210\" height=\"381\" /></a><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_4.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb_1.png\" width=\"210\" height=\"382\" /></a></p>  <p>You an also view all selectable languages with tap&amp;hold :</p>  <p>&#160;</p>  <p><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_8.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb_3.png\" width=\"210\" height=\"382\" /></a></p>  <p>&#160;</p>        <p>Thatâs it.</p>","<p>It was bugging me that I could not switch WP7 keyboard language.</p>\n<p>I write most of my emails in French, but my blog and <a href=\"http://twitter.com/thinkb4coding\" target=\"_blank\">tweets</a> are in\nEnglish.</p>\n<p>Iâve seen that some people were also asking it for the soon to come\nupdate.</p>\n<p>Â </p>\n<p>But you can actually already do it easily.</p>\n<p>Â </p>\n<p>Hereâs a short how to.</p>\n<p>Â </p>\n<p>Go to Settings/Keyboard. Then tap on Keyboard language.</p>\n<p>Â </p>\n<p><strong>You can select multiple languages here with the checkboxes\n!</strong></p>\n<p>Â </p>\n<p>Thatâs all.</p>\n<p>Â </p>\n<p>Then when you open any application with a keyboard you can notice the\nlanguage selector near the space bar :</p>\n<p><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_2.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb.png\" width=\"210\" height=\"381\" /></a><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_4.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb_1.png\" width=\"210\" height=\"382\" /></a></p>\n<p>You an also view all selectable languages with tap&amp;hold :</p>\n<p>Â </p>\n<p><a href=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_8.png\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/WP7_963A/image_thumb_3.png\" width=\"210\" height=\"382\" /></a></p>\n<p>Â </p>\n<p>Thatâs it.</p>","","switching keyboard language wp7 was bugging that could not switch wp7 keyboard language write most emails french but blog and tweets are english iâve seen that some people were also asking for the soon come update but you can actually already easily hereâs short how settings keyboard then tap keyboard language you can select multiple languages here with the checkboxes thatâs all then when you open any application with keyboard you can notice the language selector near the space bar you also view all selectable languages with tap amp hold thatâs","a:0:{}","1","0","1","1","3","0","0"
"612637","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2011-06-09 00:54:00","Europe/Paris","2011-06-08 22:54:17","2012-03-10 08:55:55","","post","xhtml","2011/06/09/Time","en","Time","","","<a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/Time_14D45/556656621_ba9e8c870f_1__2.jpg\"><img width=\"134\" height=\"134\" title=\"556656621_ba9e8c870f[1]\" align=\"right\" style=\"margin: 0 8px 0 15px; border: 0 currentColor; display: inline;\" alt=\"556656621_ba9e8c870f[1]\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/Time_14D45/556656621_ba9e8c870f_1__thumb.jpg\" border=\"0\" /></a>  <h3><strong>How do we usually manage time in applications ? </strong></h3>\r\n<p>Timers, threads, concurrency locksâ¦</p>\r\n<p>If we want to practice Domain Driven Design, weâre surely at the wrong level of abstraction.</p>\r\n<p>&nbsp;</p>\r\n<h3>What is time, btw ?</h3>\r\n<p>Tricky question. We know what time is, butâ¦ giving a definition is not that easy.</p>\r\n<p>What defines time ? The second ?</p>\r\n<p>Not really. It is used as a measure of time, but it doesnât seem sufficient.</p>\r\n<p>&nbsp;</p>\r\n<p>Letâs have a look at <a href=\"http://en.wikipedia.org/wiki/Time\" target=\"_blank\">Wikipediaâs definition of time</a>&nbsp; :</p>\r\n<blockquote>\r\n<p><strong>Time</strong> is a part of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify rates of change such as the motions of objects. [â¦]</p>\r\n</blockquote>  <p>Now we have something interesting : Time is what happens between events.</p>\r\n<p>But what is this thing between events. </p>\r\n<p>The definition of the measure unit surely can give us further insight.</p>\r\n<p>Lest have a look at <a href=\"http://en.wikipedia.org/wiki/Second\" target=\"_blank\">Wikipediaâs definition of the second</a> :</p>\r\n<blockquote>\r\n<p>[â¦] Since 1967, the second has been defined to be</p>\r\n<blockquote>\r\n<p>the duration of 9,192,631,770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the caesium-133 atom.</p>\r\n</blockquote>\r\n</blockquote>  <p>The second is defined as a count of transitions between states of an atom of cesium.</p>\r\n<p>We measure time by considering that the ~time~ between those state transitions is constant.</p>\r\n<p>What if itâs not ?</p>\r\n<p>â¦</p>\r\n<p>Itâs not that important if other events seem synchronized with those events. Will come back to this later.</p>\r\n<p>&nbsp;</p>\r\n<h3>Events</h3>\r\n<p>Letâs step back a bit.</p>\r\n<p>&nbsp;</p>\r\n<p>How do you feel time passing ?</p>\r\n<p>By looking at your watch ?</p>\r\n<p>&nbsp;</p>\r\n<p>Maybe, but how could you explain that an hour sometimes seems so long, and sometimes passes in a flash ?</p>\r\n<p>&nbsp;</p>\r\n<p>Time seems slow and empty when youâre bored.</p>\r\n<p>Times seems fast and full when youâre busy with interesting things.</p>\r\n<p>When youâre bored, itâs because few interesting things happen.</p>\r\n<p>&nbsp;</p>\r\n<p>You can deduce from this that your personal state transitions are those interesting things that happen.</p>\r\n<p>These are <strong>meaningful events</strong>. Things that happens and change you deeply.</p>\r\n<p>&nbsp;</p>\r\n<p>Of course a lot of things happen between those meaningful events, youâre moving, thinking. Your blood flows through your body, but it is just maintenance move. You donât change deeply.</p>\r\n<p>Maybe some things happen between state transition of a cesium atom, but since we cannot notice it and give it a meaning for now, it has no influence.</p>\r\n<p>&nbsp;</p>\r\n<p>But when when a meaningful event happens, you change. Youâre not the same before and after.</p>\r\n<p>This is what time is about, and this is why itâs one way.</p>\r\n<p><strong>Before â&gt; Event â&gt; After</strong></p>\r\n<blockquote>\r\n<p>Events define time by causality</p>\r\n</blockquote>  <p>This perception of meaningful events is surely a reason why people say the time pass faster when old. In your 6 first years any event around you is meaningful. Any event make you change since you have no previous knowledge. Then has time goes by, you integrate knowledge and filter things you already know, youâve already seen. When old, a year can more easily seem the same than the year before.</p>\r\n<p>But some people continue to enjoy and learn as much as they can to still have a <em>long now</em>.</p>\r\n<p>&nbsp;</p>\r\n<h3>When do your system change ?</h3>\r\n<p>Your system never change for no reason. </p>\r\n<p><strong>Itâs always because a meaningful event happened.</strong></p>\r\n<p>This event can be a user interaction, a call from an external system, a sensor triggerâ¦</p>\r\n<p>And when things change because itâs midnight ?</p>\r\n<p>It simply means that midnight is a meaningful event in your system.</p>\r\n<p>&nbsp;</p>\r\n<p>Where are those meaningful events in your code ? Hidden in infrastructure code ?</p>\r\n<p>&nbsp;</p>\r\n<p>I hear Greg Young say :</p>\r\n<blockquote>\r\n<p>Make the implicit explicit !</p>\r\n</blockquote>  <p>And itâs simple :</p>\r\n<p><strong>Use Domain Events</strong>.</p>\r\n<p>&nbsp;</p>\r\n<p>Once youâve introduced Domain Events in your domain model, you have made Events and so Time explicit in your domain.</p>\r\n<p>There is no change in the domain that is not due to an Event.</p>\r\n<p>The events appear everywhere in the Ubiquitous Language :</p>\r\n<ul>   <li>When the client HasMoved to a new location, send him a welcome kit.</li>\r\n<li>When a RoomHasBeenOverbooked try to relocate the customer</li>\r\n<li>Every day at midnight = MidnightOccured, change last minute prices.</li>\r\n</ul>\r\n<p>Iâm sure you can find examples in your own domain. If your domain is business related, it has to deal with time because business is about time and money.</p>\r\n<p>&nbsp;</p>\r\n<p>Time is now part of your Ubiquitous language and you have an implementation for it.</p>\r\n<p>And thatâs huge.</p>","<a href=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/Time_14D45/556656621_ba9e8c870f_1__2.jpg\"><img width=\"134\" height=\"134\" title=\"556656621_ba9e8c870f[1]\" align=\"right\" style=\"margin: 0 8px 0 15px; border: 0 currentColor; display: inline;\" alt=\"556656621_ba9e8c870f[1]\" src=\"http://thinkbeforecoding.com/public/WindowsLiveWriter/Time_14D45/556656621_ba9e8c870f_1__thumb.jpg\" border=\"0\" /></a>\n<h3><strong>How do we usually manage time in applications ?</strong></h3>\n<p>Timers, threads, concurrency locksâ¦</p>\n<p>If we want to practice Domain Driven Design, weâre surely at the wrong level\nof abstraction.</p>\n<p>Â </p>\n<h3>What is time, btw ?</h3>\n<p>Tricky question. We know what time is, butâ¦ giving a definition is not that\neasy.</p>\n<p>What defines time ? The second ?</p>\n<p>Not really. It is used as a measure of time, but it doesnât seem\nsufficient.</p>\n<p>Â </p>\n<p>Letâs have a look at <a href=\"http://en.wikipedia.org/wiki/Time\" target=\"_blank\">Wikipediaâs definition of time</a>Â  :</p>\n<blockquote>\n<p><strong>Time</strong> is a part of the measuring system used to sequence\nevents, to compare the durations of events and the intervals between them, and\nto quantify rates of change such as the motions of objects. [â¦]</p>\n</blockquote>\n<p>Now we have something interesting : Time is what happens between events.</p>\n<p>But what is this thing between events.</p>\n<p>The definition of the measure unit surely can give us further insight.</p>\n<p>Lest have a look at <a href=\"http://en.wikipedia.org/wiki/Second\" target=\"_blank\">Wikipediaâs definition of the second</a> :</p>\n<blockquote>\n<p>[â¦] Since 1967, the second has been defined to be</p>\n<blockquote>\n<p>the duration of 9,192,631,770 periods of the radiation corresponding to the\ntransition between the two hyperfine levels of the ground state of the\ncaesium-133 atom.</p>\n</blockquote>\n</blockquote>\n<p>The second is defined as a count of transitions between states of an atom of\ncesium.</p>\n<p>We measure time by considering that the ~time~ between those state\ntransitions is constant.</p>\n<p>What if itâs not ?</p>\n<p>â¦</p>\n<p>Itâs not that important if other events seem synchronized with those events.\nWill come back to this later.</p>\n<p>Â </p>\n<h3>Events</h3>\n<p>Letâs step back a bit.</p>\n<p>Â </p>\n<p>How do you feel time passing ?</p>\n<p>By looking at your watch ?</p>\n<p>Â </p>\n<p>Maybe, but how could you explain that an hour sometimes seems so long, and\nsometimes passes in a flash ?</p>\n<p>Â </p>\n<p>Time seems slow and empty when youâre bored.</p>\n<p>Times seems fast and full when youâre busy with interesting things.</p>\n<p>When youâre bored, itâs because few interesting things happen.</p>\n<p>Â </p>\n<p>You can deduce from this that your personal state transitions are those\ninteresting things that happen.</p>\n<p>These are <strong>meaningful events</strong>. Things that happens and change\nyou deeply.</p>\n<p>Â </p>\n<p>Of course a lot of things happen between those meaningful events, youâre\nmoving, thinking. Your blood flows through your body, but it is just\nmaintenance move. You donât change deeply.</p>\n<p>Maybe some things happen between state transition of a cesium atom, but\nsince we cannot notice it and give it a meaning for now, it has no\ninfluence.</p>\n<p>Â </p>\n<p>But when when a meaningful event happens, you change. Youâre not the same\nbefore and after.</p>\n<p>This is what time is about, and this is why itâs one way.</p>\n<p><strong>Before â&gt; Event â&gt; After</strong></p>\n<blockquote>\n<p>Events define time by causality</p>\n</blockquote>\n<p>This perception of meaningful events is surely a reason why people say the\ntime pass faster when old. In your 6 first years any event around you is\nmeaningful. Any event make you change since you have no previous knowledge.\nThen has time goes by, you integrate knowledge and filter things you already\nknow, youâve already seen. When old, a year can more easily seem the same than\nthe year before.</p>\n<p>But some people continue to enjoy and learn as much as they can to still\nhave a <em>long now</em>.</p>\n<p>Â </p>\n<h3>When do your system change ?</h3>\n<p>Your system never change for no reason.</p>\n<p><strong>Itâs always because a meaningful event happened.</strong></p>\n<p>This event can be a user interaction, a call from an external system, a\nsensor triggerâ¦</p>\n<p>And when things change because itâs midnight ?</p>\n<p>It simply means that midnight is a meaningful event in your system.</p>\n<p>Â </p>\n<p>Where are those meaningful events in your code ? Hidden in infrastructure\ncode ?</p>\n<p>Â </p>\n<p>I hear Greg Young say :</p>\n<blockquote>\n<p>Make the implicit explicit !</p>\n</blockquote>\n<p>And itâs simple :</p>\n<p><strong>Use Domain Events</strong>.</p>\n<p>Â </p>\n<p>Once youâve introduced Domain Events in your domain model, you have made\nEvents and so Time explicit in your domain.</p>\n<p>There is no change in the domain that is not due to an Event.</p>\n<p>The events appear everywhere in the Ubiquitous Language :</p>\n<ul>\n<li>When the client HasMoved to a new location, send him a welcome kit.</li>\n<li>When a RoomHasBeenOverbooked try to relocate the customer</li>\n<li>Every day at midnight = MidnightOccured, change last minute prices.</li>\n</ul>\n<p>Iâm sure you can find examples in your own domain. If your domain is\nbusiness related, it has to deal with time because business is about time and\nmoney.</p>\n<p>Â </p>\n<p>Time is now part of your Ubiquitous language and you have an implementation\nfor it.</p>\n<p>And thatâs huge.</p>","","time how usually manage time applications timers threads concurrency locksâ¦ want practice domain driven design weâre surely the wrong level abstraction what time btw tricky question know what time butâ¦ giving definition not that easy what defines time the second not really used measure time but doesnât seem sufficient letâs have look wikipediaâs definition time time part the measuring system used sequence events compare the durations events and the intervals between them and quantify rates change such the motions objects now have something interesting time what happens between events but what this thing between events the definition the measure unit surely can give further insight lest have look wikipediaâs definition the second since 1967 the second has been defined the duration 192 631 770 periods the radiation corresponding the transition between the two hyperfine levels the ground state the caesium 133 atom the second defined count transitions between states atom cesium measure time considering that the time between those state transitions constant what itâs not itâs not that important other events seem synchronized with those events will come back this later events letâs step back bit how you feel time passing looking your watch maybe but how could you explain that hour sometimes seems long and sometimes passes flash time seems slow and empty when youâre bored times seems fast and full when youâre busy with interesting things when youâre bored itâs because few interesting things happen you can deduce from this that your personal state transitions are those interesting things that happen these are meaningful events things that happens and change you deeply course lot things happen between those meaningful events youâre moving thinking your blood flows through your body but just maintenance move you donât change deeply maybe some things happen between state transition cesium atom but since cannot notice and give meaning for now has influence but when when meaningful event happens you change youâre not the same before and after this what time about and this why itâs one way before event after events define time causality this perception meaningful events surely reason why people say the time pass faster when old your first years any event around you meaningful any event make you change since you have previous knowledge then has time goes you integrate knowledge and filter things you already know youâve already seen when old year can more easily seem the same than the year before but some people continue enjoy and learn much they can still have long now when your system change your system never change for reason itâs always because meaningful event happened this event can user interaction call from external system sensor triggerâ¦ and when things change because itâs midnight simply means that midnight meaningful event your system where are those meaningful events your code hidden infrastructure code hear greg young say make the implicit explicit and itâs simple use domain events once youâve introduced domain events your domain model you have made events and time explicit your domain there change the domain that not due event the events appear everywhere the ubiquitous language when the client hasmoved new location send him welcome kit when roomhasbeenoverbooked try relocate the customer every day midnight midnightoccured change last minute prices iâm sure you can find examples your own domain your domain business related has deal with time because business about time and money time now part your ubiquitous language and you have implementation for and thatâs huge","a:1:{s:3:\"tag\";a:5:{i:0;s:14:\"Event Sourcing\";i:1;s:13:\"Domain Events\";i:2;s:4:\"Time\";i:3;s:4:\"CQRS\";i:4;s:20:\"Domain Driven Design\";}}","1","0","1","1","2","0","0"
"613679","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2011-06-14 10:30:00","Europe/Paris","2011-06-14 08:30:46","2011-06-14 08:32:20","","post","xhtml","2011/06/14/DDDx-2011","en","DDDx 2011","","","<p>Iâm just back from DDDx 2011, and it was great !</p>\r\n<p>The event happened Friday 10 at Skills Matter in London, with great speakers, coffee and food.</p>\r\n<p>&nbsp;</p>\r\n<p>You can see all the talks on <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2011/js-2046\" target=\"_blank\">Skills Matter website</a>. Congratulation to the team that released the videos on the web in less that an hour.</p>\r\n<p>&nbsp;</p>\r\n<p>It was also the occasion to meet IRL DDD practitioners I usually find on twitter.</p>\r\n<p>&nbsp;</p>\r\n<p>You can also <a href=\"http://bit.ly/mse2Ko\" target=\"_blank\">register for next year now</a> for only 50Â£. </p>\r\n<p>&nbsp;</p>\r\n<p>So Hurry up !</p>","<p>Iâm just back from DDDx 2011, and it was great !</p>\n<p>The event happened Friday 10 at Skills Matter in London, with great\nspeakers, coffee and food.</p>\n<p>Â </p>\n<p>You can see all the talks on <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2011/js-2046\" target=\"_blank\">Skills Matter website</a>. Congratulation to the team that\nreleased the videos on the web in less that an hour.</p>\n<p>Â </p>\n<p>It was also the occasion to meet IRL DDD practitioners I usually find on\ntwitter.</p>\n<p>Â </p>\n<p>You can also <a href=\"http://bit.ly/mse2Ko\" target=\"_blank\">register for\nnext year now</a> for only 50Â£.</p>\n<p>Â </p>\n<p>So Hurry up !</p>","","dddx 2011 iâm just back from dddx 2011 and was great the event happened friday skills matter london with great speakers coffee and food you can see all the talks skills matter website congratulation the team that released the videos the web less that hour was also the occasion meet irl ddd practitioners usually find twitter you can also register for next year now for only hurry","a:1:{s:3:\"tag\";a:5:{i:0;s:3:\"TDD\";i:1;s:16:\"Strategic Design\";i:2;s:5:\"Evans\";i:3;s:20:\"Domain Driven Design\";i:4;s:12:\"DDD Exchange\";}}","1","0","1","1","0","0","0"
"615066","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2011-06-21 10:38:00","Europe/Paris","2011-06-21 08:38:57","2011-06-21 08:40:17","","post","xhtml","2011/06/21/Event-Sourcing-and-CQRS,-Dispatch-options-2","en","Event Sourcing and CQRS, Dispatch options 2","","","<p>In the <a href=\"http://thinkbeforecoding.com/post/2009/11/03/Event-Sourcing-and-CQRS-Dispatch-options\" target=\"_blank\">part one comments</a>, Clement suggested a more efficient solution than registering handler in constructor.</p>\r\n<p>&nbsp;</p>\r\n<p>The proposed solution is to have a RegisterAllEvents virtual method in which event handler registration would occur. This method is a method instance to have access to this but will be called only once per class. The registration use Expression&lt;Action&lt;T&gt;&gt; to access the expression tree and extract the method info of the handler. This enables type checking, make R# happy â no unused methods â and make reflection not too painful.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Good solution.</strong></p>\r\n<p>&nbsp;</p>\r\n<p>I didn't go that far because with Event Sourcing, you usually keep aggregates in memory, so aggregates are instantiated once per service lifetime.   <br />I just crafted a small performance test : </p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre style=\"line-height: normal; width: auto; font-family: ; background: white; overflow: visible\"><span style=\"color: \">using</span> System;<br /><span style=\"color: \">using</span> System.Collections.Generic;<br /><span style=\"color: \">using</span> System.Diagnostics;<br /> <br /><span style=\"color: \">namespace</span> AggregatePerfTest<br />{<br />&nbsp;&nbsp;&nbsp; <span style=\"color: \">class</span>&nbsp;<span style=\"color: \">Program</span><br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">static</span>&nbsp;<span style=\"color: \">void</span> Main(<span style=\"color: \">string</span>[] args)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">var</span> watch = <span style=\"color: \">new</span>&nbsp;<span style=\"color: \">Stopwatch</span>();<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">const</span>&nbsp;<span style=\"color: \">int</span> count = 10000000;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">Guid</span> id = <span style=\"color: \">Guid</span>.NewGuid();<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; watch.Start();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">for</span> (<span style=\"color: \">int</span> i = 0; i &lt; count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">new</span>&nbsp;<span style=\"color: \">AggregateRegisteredOncePerInstance</span>(id);<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; watch.Stop();<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">Console</span>.WriteLine(watch.Elapsed.TotalMilliseconds);<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; watch.Reset();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; watch.Start();<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">for</span> (<span style=\"color: \">int</span> i = 0; i &lt; count; i++)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">new</span>&nbsp;<span style=\"color: \">AggregateRegisteredOncePerClass</span>(id);<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; watch.Stop();<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">Console</span>.WriteLine(watch.Elapsed.TotalMilliseconds);<br />&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span>&nbsp;<span style=\"color: \">class</span>&nbsp;<span style=\"color: \">AggregateRegisteredOncePerClass</span><br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">readonly</span>&nbsp;<span style=\"color: \">Guid</span> id;<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">static</span>&nbsp;<span style=\"color: \">readonly</span>&nbsp;<span style=\"color: \">object</span> ClassInitLock = <span style=\"color: \">new</span>&nbsp;<span style=\"color: \">object</span>();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">static</span>&nbsp;<span style=\"color: \">bool</span> initialized;<br /> <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span> AggregateRegisteredOncePerClass(<span style=\"color: \">Guid</span> id)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">this</span>.id = id;<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">lock</span> (ClassInitLock)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">if</span> (!initialized)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initialized = <span style=\"color: \">true</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">// registration happens only once here</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span>&nbsp;<span style=\"color: \">Guid</span> Id<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">get</span> { <span style=\"color: \">return</span> id; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span>&nbsp;<span style=\"color: \">class</span>&nbsp;<span style=\"color: \">AggregateRegisteredOncePerInstance</span><br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">readonly</span>&nbsp;<span style=\"color: \">Guid</span> id;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">readonly</span>&nbsp;<span style=\"color: \">Dictionary</span>&lt;<span style=\"color: \">Type</span>, <span style=\"color: \">dynamic</span>&gt; handlers = <br /><span style=\"color: \">                         new</span>&nbsp;<span style=\"color: \">Dictionary</span>&lt;<span style=\"color: \">Type</span>, <span style=\"color: \">dynamic</span>&gt;(5);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span> AggregateRegisteredOncePerInstance(<span style=\"color: \">Guid</span> id)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">this</span>.id = id;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"color: \">int</span>&gt;(OnSomethingHappened);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"color: \">double</span>&gt;(OnSomethingHappened);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"color: \">float</span>&gt;(OnSomethingHappened);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Register&lt;<span style=\"color: \">long</span>&gt;(OnSomethingHappened);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span>&nbsp;<span style=\"color: \">Guid</span> Id<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">get</span> { <span style=\"color: \">return</span> id; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">public</span>&nbsp;<span style=\"color: \">void</span> DoSomething()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Apply(1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">void</span> OnSomethingHappened(<span style=\"color: \">int</span> message) { }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">void</span> OnSomethingHappened(<span style=\"color: \">double</span> message){ }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">void</span> OnSomethingHappened(<span style=\"color: \">float</span> message) { }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">private</span>&nbsp;<span style=\"color: \">void</span> OnSomethingHappened(<span style=\"color: \">long</span> message) { }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">protected</span>&nbsp;<span style=\"color: \">void</span> Apply&lt;T&gt;(T @event)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers[<span style=\"color: \">typeof</span> (T)](@event);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: \">protected</span>&nbsp;<span style=\"color: \">void</span> Register&lt;T&gt;(<span style=\"color: \">Action</span>&lt;T&gt; handler)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handlers.Add(<span style=\"color: \">typeof</span>(T), handler);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</pre>\r\n<p>The code is straight forward, I just created two aggregate classes :</p>\r\n<ul>\r\n<li>one with registration in .ctor based on this post code </li>\r\n<li>one without any registration at all, considering that doing it once is the same as not doing it for large numbers, but I added a lock section with a boolean check to simulate what will done on each instance creation.</li>\r\n</ul>\r\n<p>I created 10.000.000 instances for each, and you get:</p>\r\n<ul>\r\n<li>3978ms for the one with .ctor registrations,</li>\r\n<li>377 ms for the one without.</li>\r\n</ul>\r\n<p>It's true that it makes a difference. But how many aggregates do you have in your system ?</p>\r\n<p>&nbsp;</p>\r\n<p>With 10.000 aggregate you're still under 8ms. I think you can afford that.</p>\r\n<p>&nbsp;</p>\r\n<p>This is then a trade-off between performance and simplicity :</p>\r\n<ul>\r\n<li>If you have very large numbers, go for expression tree parsing, class lock management etc.</li>\r\n<li>In any other situation I recommend using registration in .ctor that makes the code easy to implement in approximately 5min. </li>\r\n</ul>","<p>In the <a href=\"http://thinkbeforecoding.com/post/2009/11/03/Event-Sourcing-and-CQRS-Dispatch-options\" target=\"_blank\">part one comments</a>, Clement suggested a more efficient\nsolution than registering handler in constructor.</p>\n<p>Â </p>\n<p>The proposed solution is to have a RegisterAllEvents virtual method in which\nevent handler registration would occur. This method is a method instance to\nhave access to this but will be called only once per class. The registration\nuse Expression&lt;Action&lt;T&gt;&gt; to access the expression tree and extract\nthe method info of the handler. This enables type checking, make R# happy â no\nunused methods â and make reflection not too painful.</p>\n<p>Â </p>\n<p><strong>Good solution.</strong></p>\n<p>Â </p>\n<p>I didn't go that far because with Event Sourcing, you usually keep\naggregates in memory, so aggregates are instantiated once per service\nlifetime.<br />\nI just crafted a small performance test :</p>\n<p>Â </p>\n<p>Â </p>\n<pre style=\"line-height: normal; width: auto; font-family: ; background: white; overflow: visible\">\n\n<span style=\"color:\">using</span> System;<br /><span style=\"color:\">using</span> System.Collections.Generic;<br /><span style=\"color:\">using</span> System.Diagnostics;<br /> <br /><span style=\"color:\">namespace</span> AggregatePerfTest<br />{<br />    <span style=\"color:\">class</span> <span style=\"color:\">Program</span><br />    {<br />        <span style=\"color:\">static</span> <span style=\"color:\">void</span> Main(<span style=\"color:\">string</span>[] args)<br />        {<br />            <span style=\"color:\">var</span> watch = <span style=\"color:\">new</span> <span style=\"color:\">Stopwatch</span>();<br /> <br />            <span style=\"color:\">const</span> <span style=\"color:\">int</span> count = 10000000;<br />            <span style=\"color:\">Guid</span> id = <span style=\"color:\">Guid</span>.NewGuid();<br /> <br />            watch.Start();<br />            <span style=\"color:\">for</span> (<span style=\"color:\">int</span> i = 0; i &lt; count; i++)<br />                <span style=\"color:\">new</span> <span style=\"color:\">AggregateRegisteredOncePerInstance</span>(id);<br /> <br />            watch.Stop();<br /> <br />            <span style=\"color:\">Console</span>.WriteLine(watch.Elapsed.TotalMilliseconds);<br /> <br />            watch.Reset();<br />            watch.Start();<br /> <br />            <span style=\"color:\">for</span> (<span style=\"color:\">int</span> i = 0; i &lt; count; i++)<br />                <span style=\"color:\">new</span> <span style=\"color:\">AggregateRegisteredOncePerClass</span>(id);<br /> <br />            watch.Stop();<br /> <br />            <span style=\"color:\">Console</span>.WriteLine(watch.Elapsed.TotalMilliseconds);<br /> <br />        }<br />    }<br /> <br />    <span style=\"color:\">public</span> <span style=\"color:\">class</span> <span style=\"color:\">AggregateRegisteredOncePerClass</span><br />    {<br />        <span style=\"color:\">private</span> <span style=\"color:\">readonly</span> <span style=\"color:\">Guid</span> id;<br /> <br />        <span style=\"color:\">private</span> <span style=\"color:\">static</span> <span style=\"color:\">readonly</span> <span style=\"color:\">object</span> ClassInitLock = <span style=\"color:\">new</span> <span style=\"color:\">object</span>();<br />        <span style=\"color:\">private</span> <span style=\"color:\">static</span> <span style=\"color:\">bool</span> initialized;<br /> <br /> <br />        <span style=\"color:\">public</span> AggregateRegisteredOncePerClass(<span style=\"color:\">Guid</span> id)<br />        {<br />            <span style=\"color:\">this</span>.id = id;<br /> <br />            <span style=\"color:\">lock</span> (ClassInitLock)<br />            {<br />                <span style=\"color:\">if</span> (!initialized)<br />                {<br />                    initialized = <span style=\"color:\">true</span>;<br />                    <span style=\"color:\">// registration happens only once here</span><br />                }<br />            }<br />        }<br /> <br />        <span style=\"color:\">public</span> <span style=\"color:\">Guid</span> Id<br />        {<br />            <span style=\"color:\">get</span> { <span style=\"color:\">return</span> id; }<br />        }<br />    }<br /> <br />    <span style=\"color:\">public</span> <span style=\"color:\">class</span> <span style=\"color:\">AggregateRegisteredOncePerInstance</span><br />    {<br />        <span style=\"color:\">private</span> <span style=\"color:\">readonly</span> <span style=\"color:\">Guid</span> id;<br />        <span style=\"color:\">private</span> <span style=\"color:\">readonly</span> <span style=\"color:\">Dictionary</span>&lt;<span style=\"color:\">Type</span>, <span style=\"color:\">dynamic</span>&gt; handlers = <br /><span style=\"color:\">                         new</span> <span style=\"color:\">Dictionary</span>&lt;<span style=\"color:\">Type</span>, <span style=\"color:\">dynamic</span>&gt;(5);<br />        <span style=\"color:\">public</span> AggregateRegisteredOncePerInstance(<span style=\"color:\">Guid</span> id)<br />        {<br />            <span style=\"color:\">this</span>.id = id;<br />            Register&lt;<span style=\"color:\">int</span>&gt;(OnSomethingHappened);<br />            Register&lt;<span style=\"color:\">double</span>&gt;(OnSomethingHappened);<br />            Register&lt;<span style=\"color:\">float</span>&gt;(OnSomethingHappened);<br />            Register&lt;<span style=\"color:\">long</span>&gt;(OnSomethingHappened);<br />        }<br /> <br />        <span style=\"color:\">public</span> <span style=\"color:\">Guid</span> Id<br />        {<br />            <span style=\"color:\">get</span> { <span style=\"color:\">return</span> id; }<br />        }<br /> <br />        <span style=\"color:\">public</span> <span style=\"color:\">void</span> DoSomething()<br />        {<br />            Apply(1);<br />        }<br /> <br />        <span style=\"color:\">private</span> <span style=\"color:\">void</span> OnSomethingHappened(<span style=\"color:\">int</span> message) { }<br />        <span style=\"color:\">private</span> <span style=\"color:\">void</span> OnSomethingHappened(<span style=\"color:\">double</span> message){ }<br />        <span style=\"color:\">private</span> <span style=\"color:\">void</span> OnSomethingHappened(<span style=\"color:\">float</span> message) { }<br />        <span style=\"color:\">private</span> <span style=\"color:\">void</span> OnSomethingHappened(<span style=\"color:\">long</span> message) { }<br /> <br />        <span style=\"color:\">protected</span> <span style=\"color:\">void</span> Apply&lt;T&gt;(T @event)<br />        {<br />            handlers[<span style=\"color:\">typeof</span> (T)](@event);<br />        }<br /> <br />        <span style=\"color:\">protected</span> <span style=\"color:\">void</span> Register&lt;T&gt;(<span style=\"color:\">Action</span>&lt;T&gt; handler)<br />        {<br />            handlers.Add(<span style=\"color:\">typeof</span>(T), handler);<br />        }<br />    }<br />}\n</pre>\n<p>The code is straight forward, I just created two aggregate classes :</p>\n<ul>\n<li>one with registration in .ctor based on this post code</li>\n<li>one without any registration at all, considering that doing it once is the\nsame as not doing it for large numbers, but I added a lock section with a\nboolean check to simulate what will done on each instance creation.</li>\n</ul>\n<p>I created 10.000.000 instances for each, and you get:</p>\n<ul>\n<li>3978ms for the one with .ctor registrations,</li>\n<li>377 ms for the one without.</li>\n</ul>\n<p>It's true that it makes a difference. But how many aggregates do you have in\nyour system ?</p>\n<p>Â </p>\n<p>With 10.000 aggregate you're still under 8ms. I think you can afford\nthat.</p>\n<p>Â </p>\n<p>This is then a trade-off between performance and simplicity :</p>\n<ul>\n<li>If you have very large numbers, go for expression tree parsing, class lock\nmanagement etc.</li>\n<li>In any other situation I recommend using registration in .ctor that makes\nthe code easy to implement in approximately 5min.</li>\n</ul>","","event sourcing and cqrs dispatch options the part one comments clement suggested more efficient solution than registering handler constructor the proposed solution have registerallevents virtual method which event handler registration would occur this method method instance have access this but will called only once per class the registration use expression action access the expression tree and extract the method info the handler this enables type checking make happy unused methods and make reflection not too painful good solution didn that far because with event sourcing you usually keep aggregates memory aggregates are instantiated once per service lifetime just crafted small performance test using system using system collections generic using system diagnostics namespace aggregateperftest class program static void main string args var watch new stopwatch const int count 10000000 guid guid newguid watch start for int count new aggregateregisteredonceperinstance watch stop console writeline watch elapsed totalmilliseconds watch reset watch start for int count new aggregateregisteredonceperclass watch stop console writeline watch elapsed totalmilliseconds public class aggregateregisteredonceperclass private readonly guid private static readonly object classinitlock new object private static bool initialized public aggregateregisteredonceperclass guid this lock classinitlock initialized initialized true registration happens only once here public guid get return public class aggregateregisteredonceperinstance private readonly guid private readonly dictionary type dynamic handlers new dictionary type dynamic public aggregateregisteredonceperinstance guid this register int onsomethinghappened register double onsomethinghappened register float onsomethinghappened register long onsomethinghappened public guid get return public void dosomething apply private void onsomethinghappened int message private void onsomethinghappened double message private void onsomethinghappened float message private void onsomethinghappened long message protected void apply event handlers typeof event protected void register action handler handlers add typeof handler the code straight forward just created two aggregate classes one with registration ctor based this post code one without any registration all considering that doing once the same not doing for large numbers but added lock section with boolean check simulate what will done each instance creation created 000 000 instances for each and you get 3978ms for the one with ctor registrations 377 for the one without true that makes difference but how many aggregates you have your system with 000 aggregate you still under 8ms think you can afford that this then trade off between performance and simplicity you have very large numbers for expression tree parsing class lock management etc any other situation recommend using registration ctor that makes the code easy implement approximately 5min","a:1:{s:3:\"tag\";a:2:{i:0;s:14:\"Aggregate Root\";i:1;s:14:\"Event Sourcing\";}}","1","0","1","1","7","0","0"
"653120","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34021","2011-12-02 11:14:00","Europe/Paris","2011-12-02 10:14:15","2011-12-02 10:16:39","","post","xhtml","2011/12/02/I-love-SQL-Server-and-cultures-NOT","en","I love SQL Server and cultures... NOT !","","","<p>When developing a large system, all is not unicorns and rainbows.</p>\r\n<p>For now, everybody was working on a single SQL dev server and friction is high.</p>\r\n<p>&nbsp;</p>\r\n<p>Thatâs why Iâm working on SQL scripts management with mercurial and powershell to the rescue, so that any developer can trash his own SQLExpress instance, and rebuild everything needed in a single command. (Iâll maybe blog about all that later).</p>\r\n<p>&nbsp;</p>\r\n<p>We have loads of stored procs.. I know people donât like it, but it acts as a strong sanity layer when the database schema is so ugly your eyes bleed when you look at it.</p>\r\n<p>&nbsp;</p>\r\n<p>Yesterday, I run a stored proc, and I get the following error :</p>\r\n<p><strong>The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.</strong></p>\r\n<p>&nbsp;</p>\r\n<p><em>Why the f**k.</em></p>\r\n<p>&nbsp;</p>\r\n<p>The procedures is using a scalar function :</p>\r\n<pre>ALTER FUNCTION [dbo].[DateMaxValue]()\r\nRETURNS datetime\r\nAS\r\nBEGIN\r\nRETURN '9999-12-31 23:59:59.998'\r\nEND</pre>\r\n<p>&nbsp;</p>\r\n<p>Itâs working on other servers.. why doesnât it work here.</p>\r\n<p>After several tries, I try with the date â9999-12-01â and I get the following date:</p>\r\n<p>Year: 9999</p>\r\n<p>Month: 01</p>\r\n<p>Day: 12</p>\r\n<p>&nbsp;</p>\r\n<p>Yes.. the date is interpreted as YYYY-dd-MM on a French server.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Even when you use the YYYY-??-?? format, SQL Server still try to mess with culture month/day ordering !</strong></p>\r\n<p>&nbsp;</p>\r\n<p>You can use the SET DATEFORMAT dmy or SET DATEFORMAT mdy to change this, but it will apply only in current session, and you cannot use it in a stored proc.</p>\r\n<p>&nbsp;</p>\r\n<p>You can change the server culture, but it wont change anything. The dmy/mdy setting is ultimately in the Login culture.</p>\r\n<p>&nbsp;</p>\r\n<p>You read it right :</p>\r\n<ul>\r\n<li>For an English Login the function above works.</li>\r\n<li>For a French Login the function above fails miserably.</li>\r\n</ul>\r\n<p>There is no way to my knowledge to specify a strict date parsing in a stored proc or function.</p>\r\n<p>&nbsp;</p>\r\n<p>So generates your logins with scripts, and enforce the same culture for all logins.</p>\r\n<p>&nbsp;</p>\r\n<p>Itâs just profoundly broken.</p>","<p>When developing a large system, all is not unicorns and rainbows.</p>\n<p>For now, everybody was working on a single SQL dev server and friction is\nhigh.</p>\n<p>Â </p>\n<p>Thatâs why Iâm working on SQL scripts management with mercurial and\npowershell to the rescue, so that any developer can trash his own SQLExpress\ninstance, and rebuild everything needed in a single command. (Iâll maybe blog\nabout all that later).</p>\n<p>Â </p>\n<p>We have loads of stored procs.. I know people donât like it, but it acts as\na strong sanity layer when the database schema is so ugly your eyes bleed when\nyou look at it.</p>\n<p>Â </p>\n<p>Yesterday, I run a stored proc, and I get the following error :</p>\n<p><strong>The conversion of a varchar data type to a datetime data type\nresulted in an out-of-range value.</strong></p>\n<p>Â </p>\n<p><em>Why the f**k.</em></p>\n<p>Â </p>\n<p>The procedures is using a scalar function :</p>\n<pre>\nALTER FUNCTION [dbo].[DateMaxValue]()\nRETURNS datetime\nAS\nBEGIN\nRETURN '9999-12-31 23:59:59.998'\nEND\n</pre>\n<p>Â </p>\n<p>Itâs working on other servers.. why doesnât it work here.</p>\n<p>After several tries, I try with the date â9999-12-01â and I get the\nfollowing date:</p>\n<p>Year: 9999</p>\n<p>Month: 01</p>\n<p>Day: 12</p>\n<p>Â </p>\n<p>Yes.. the date is interpreted as YYYY-dd-MM on a French server.</p>\n<p>Â </p>\n<p><strong>Even when you use the YYYY-??-?? format, SQL Server still try to\nmess with culture month/day ordering !</strong></p>\n<p>Â </p>\n<p>You can use the SET DATEFORMAT dmy or SET DATEFORMAT mdy to change this, but\nit will apply only in current session, and you cannot use it in a stored\nproc.</p>\n<p>Â </p>\n<p>You can change the server culture, but it wont change anything. The dmy/mdy\nsetting is ultimately in the Login culture.</p>\n<p>Â </p>\n<p>You read it right :</p>\n<ul>\n<li>For an English Login the function above works.</li>\n<li>For a French Login the function above fails miserably.</li>\n</ul>\n<p>There is no way to my knowledge to specify a strict date parsing in a stored\nproc or function.</p>\n<p>Â </p>\n<p>So generates your logins with scripts, and enforce the same culture for all\nlogins.</p>\n<p>Â </p>\n<p>Itâs just profoundly broken.</p>","","love sql server and cultures not when developing large system all not unicorns and rainbows for now everybody was working single sql dev server and friction high thatâs why iâm working sql scripts management with mercurial and powershell the rescue that any developer can trash his own sqlexpress instance and rebuild everything needed single command iâll maybe blog about all that later have loads stored procs know people donât like but acts strong sanity layer when the database schema ugly your eyes bleed when you look yesterday run stored proc and get the following error the conversion varchar data type datetime data type resulted out range value why the the procedures using scalar function alter function dbo datemaxvalue returns datetime begin return 9999 998 end itâs working other servers why doesnât work here after several tries try with the date â9999 01â and get the following date year 9999 month day yes the date interpreted yyyy french server even when you use the yyyy format sql server still try mess with culture month day ordering you can use the set dateformat dmy set dateformat mdy change this but will apply only current session and you cannot use stored proc you can change the server culture but wont change anything the dmy mdy setting ultimately the login culture you read right for english login the function above works for french login the function above fails miserably there way knowledge specify strict date parsing stored proc function generates your logins with scripts and enforce the same culture for all logins itâs just profoundly broken","a:1:{s:3:\"tag\";a:2:{i:0;s:13:\"Globalization\";i:1;s:3:\"SQL\";}}","1","0","1","1","4","0","0"
"668343","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","52829","2012-02-26 11:25:00","Europe/Paris","2012-02-26 10:25:03","2012-02-26 10:25:03","","post","xhtml","2012/02/26/NuRep-your-local-NuGetsymbolssource-repository","en","NuRep your local NuGet+symbols+source repository","","","<p><sub></sub><sub></sub>As some of you already know, I'm a proponent of DRY : <strong>Do Repeat Yourself, b</strong>ut <a href=\"http://thinkbeforecoding.com/post/2009/07/24/DDD-and-Code-ReUse\">code reuse has some value</a> and <strong>nuget</strong> is a good way to manage it.</p>  <p>&#160;</p>  <p>So far, the advantages I see in using a package manager are:</p>  <ul>   <li>easy get/update of external projects and their dependencies</li>    <li>on demand dependency update (instead of forced dependency update)</li>    <li>makes it easier to modularize dependencies</li> </ul>  <p>All this thing are out of the box when using OSS projects published on <a href=\"http://nuget.org\" target=\"_blank\">nuget.org</a>, and you can host your own nugets using <a href=\"https://nuget.org/packages/NuGet.Server\" target=\"_blank\">NuGet.Server</a>.</p>  <p>&#160;</p>  <p>The debugging story is also quite good. <a href=\"http://www.symbolsource.org/\" target=\"_blank\">symbolsource.org</a> can host symbols and source packages and be used as source server. You can directly step in your favorite OSS source code without having to compile it yourself. They even provide private repositories.</p>  <p>&#160;</p>  <p>But sending your company's source code to an external service is not always compatible with internal policy. </p>  <p>&#160;</p>  <p>In this configuration, using your own nugets leads to a poor dev experience when you have no way to step in your own code : compiled in Release and potentially not your latest code version, indicating the source code in another directory will not give good results.</p>  <p>&#160;</p>  <p>You need a source server.</p>  <p>&#160;</p>  <h1></h1>  <h1>NuRep to the rescue</h1>  <p>&#160;</p>  <p>NuRep is a nuget repository based on <a href=\"https://nuget.org/packages/NuGet.Server\" target=\"_blank\">NuGet.Server</a> but it is also a symbols + code server.</p>  <p>&#160;</p>  <p>When creating your nuget package, specify the âSymbols flag, and nuget will create a .nupkg and a .symbols.nupkg that you can push to NuRep (http://myserver/nurep/api/v2/package).</p>  <p>&#160;</p>  <p>Then configure visual studio's symbols servers (Tools / Options / Debugging / Symbols / add http://myserver/nurep/symbols )</p>  <p>&#160;</p>  <p>Don't forget to enable source server in Debugging / General options, and to disable Just my code.</p>  <p>&#160;</p>  <p>That's it.</p>  <p>&#160;</p>  <p>Now you'll step into the exact code that was used to compile the nuget version.</p>  <p>&#160;</p>  <p>Have fun !</p>","<p>As some of you already know, I'm a proponent of DRY : <strong>Do Repeat\nYourself, b</strong>ut <a href=\"http://thinkbeforecoding.com/post/2009/07/24/DDD-and-Code-ReUse\">code reuse\nhas some value</a> and <strong>nuget</strong> is a good way to manage it.</p>\n<p>Â </p>\n<p>So far, the advantages I see in using a package manager are:</p>\n<ul>\n<li>easy get/update of external projects and their dependencies</li>\n<li>on demand dependency update (instead of forced dependency update)</li>\n<li>makes it easier to modularize dependencies</li>\n</ul>\n<p>All this thing are out of the box when using OSS projects published on\n<a href=\"http://nuget.org\" target=\"_blank\">nuget.org</a>, and you can host your\nown nugets using <a href=\"https://nuget.org/packages/NuGet.Server\" target=\"_blank\">NuGet.Server</a>.</p>\n<p>Â </p>\n<p>The debugging story is also quite good. <a href=\"http://www.symbolsource.org/\" target=\"_blank\">symbolsource.org</a> can host\nsymbols and source packages and be used as source server. You can directly step\nin your favorite OSS source code without having to compile it yourself. They\neven provide private repositories.</p>\n<p>Â </p>\n<p>But sending your company's source code to an external service is not always\ncompatible with internal policy.</p>\n<p>Â </p>\n<p>In this configuration, using your own nugets leads to a poor dev experience\nwhen you have no way to step in your own code : compiled in Release and\npotentially not your latest code version, indicating the source code in another\ndirectory will not give good results.</p>\n<p>Â </p>\n<p>You need a source server.</p>\n<p>Â </p>\n<h1>NuRep to the rescue</h1>\n<p>Â </p>\n<p>NuRep is a nuget repository based on <a href=\"https://nuget.org/packages/NuGet.Server\" target=\"_blank\">NuGet.Server</a> but\nit is also a symbols + code server.</p>\n<p>Â </p>\n<p>When creating your nuget package, specify the âSymbols flag, and nuget will\ncreate a .nupkg and a .symbols.nupkg that you can push to NuRep\n(http://myserver/nurep/api/v2/package).</p>\n<p>Â </p>\n<p>Then configure visual studio's symbols servers (Tools / Options / Debugging\n/ Symbols / add http://myserver/nurep/symbols )</p>\n<p>Â </p>\n<p>Don't forget to enable source server in Debugging / General options, and to\ndisable Just my code.</p>\n<p>Â </p>\n<p>That's it.</p>\n<p>Â </p>\n<p>Now you'll step into the exact code that was used to compile the nuget\nversion.</p>\n<p>Â </p>\n<p>Have fun !</p>","","nurep your local nuget symbols source repository some you already know proponent dry repeat yourself but code reuse has some value and nuget good way manage far the advantages see using package manager are easy get update external projects and their dependencies demand dependency update instead forced dependency update makes easier modularize dependencies all this thing are out the box when using oss projects published nuget org and you can host your own nugets using nuget server the debugging story also quite good symbolsource org can host symbols and source packages and used source server you can directly step your favorite oss source code without having compile yourself they even provide private repositories but sending your company source code external service not always compatible with internal policy this configuration using your own nugets leads poor dev experience when you have way step your own code compiled release and potentially not your latest code version indicating the source code another directory will not give good results you need source server nurep the rescue nurep nuget repository based nuget server but also symbols code server when creating your nuget package specify the âsymbols flag and nuget will create nupkg and symbols nupkg that you can push nurep http myserver nurep api package then configure visual studio symbols servers tools options debugging symbols add http myserver nurep symbols don forget enable source server debugging general options and disable just code that now you step into the exact code that was used compile the nuget version have fun","a:1:{s:3:\"tag\";a:1:{i:0;s:11:\"NuRep nuget\";}}","1","0","1","1","10","0","0"
"669709","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","52964","2012-03-05 13:49:00","Europe/Paris","2012-03-05 12:49:38","2012-03-05 12:49:39","","post","xhtml","2012/03/05/Caching-done-right","en","Caching done right","","","<p>I was trolling on twitter Saturday, when I saw tweet by <a href=\"https://twitter.com/#!/nkohari\" target=\"_blank\">Nate Kohari</a> and some answers :</p>  <p>&#160;</p>  <p><a href=\"https://twitter.com/#!/nkohari/status/175994006562545667\" target=\"_blank\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/fecbc39c51a4_B849/image_5.png\" width=\"531\" height=\"372\" /></a>    <br /></p>  <p>I immediately thought :</p>  <blockquote>   <p>If you have one problem and use cache to solve it, you now have two problems.</p> </blockquote>  <p>&#160;</p>  <p>Whereâs the problem ?</p>  <p>&#160;</p>  <p>The time to retrieve the data is not negligible due to frequency of request and/or time taken by calculation + data access. So we put data to cache so that we donât have to endure this time on each call.</p>  <p>&#160;</p>  <p>But then comes the problem of cache expiration:</p>  <ul>   <li>We can use a duration.. but what is the acceptable delay ?</li>    <li>We can make a check to original data to check if it has changed. Itâs more accurate, but incurs a new data access.</li> </ul>  <p>Moreover, checking if it changed is often not enough, we also need to find what changed. </p>  <p>&#160;</p>  <p>And deriving what happened from state is basically <strong>reverse engineering</strong>. Iâm an engineer. <strong>I prefer forward engineering</strong>. </p>  <p>&#160;</p>  <p>&#160;</p>  <h1>Letâs do it forward</h1>  <p>&#160;</p>  <p>Itâs actually easy, itâs the whole point of CQRS.</p>  <p>&#160;</p>  <p>Letâs build a system that raises Domain Events, and we can <strong>denormalize</strong> events to a <strong>Persistent View Model</strong>.</p>  <p>&#160;</p>  <p>We just have to listen to events and change the representation we want to send to the users:</p>  <ul>   <li>The events contain everything we need to do fine grained updates easily. </li>    <li>We can can compute denormalizations asynchronously if itâs time consuming</li>    <li>We can store it in a relational database, a document database, or in memory</li>    <li>We can choose any form of denormalization since itâs a denormalization (object graph, but also flat string, json, html â¦)</li>    <li>It will be up to date quickly because it will be updated when the original data changed</li>    <li>The first client that makes a request after a change will not endure a cache miss that can be long to process since computing is done on change, and not on request.</li> </ul>  <p>A good way to Keep It Simple, Stupid!</p>","<p>I was trolling on twitter Saturday, when I saw tweet by <a href=\"https://twitter.com/#!/nkohari\" target=\"_blank\">Nate Kohari</a> and some\nanswers :</p>\n<p>Â </p>\n<p><a href=\"https://twitter.com/#!/nkohari/status/175994006562545667\" target=\"_blank\"><img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://thinkbeforecoding.com/public/Windows-Live-Writer/fecbc39c51a4_B849/image_5.png\" width=\"531\" height=\"372\" /></a><br /></p>\n<p>I immediately thought :</p>\n<blockquote>\n<p>If you have one problem and use cache to solve it, you now have two\nproblems.</p>\n</blockquote>\n<p>Â </p>\n<p>Whereâs the problem ?</p>\n<p>Â </p>\n<p>The time to retrieve the data is not negligible due to frequency of request\nand/or time taken by calculation + data access. So we put data to cache so that\nwe donât have to endure this time on each call.</p>\n<p>Â </p>\n<p>But then comes the problem of cache expiration:</p>\n<ul>\n<li>We can use a duration.. but what is the acceptable delay ?</li>\n<li>We can make a check to original data to check if it has changed. Itâs more\naccurate, but incurs a new data access.</li>\n</ul>\n<p>Moreover, checking if it changed is often not enough, we also need to find\nwhat changed.</p>\n<p>Â </p>\n<p>And deriving what happened from state is basically <strong>reverse\nengineering</strong>. Iâm an engineer. <strong>I prefer forward\nengineering</strong>.</p>\n<p>Â </p>\n<p>Â </p>\n<h1>Letâs do it forward</h1>\n<p>Â </p>\n<p>Itâs actually easy, itâs the whole point of CQRS.</p>\n<p>Â </p>\n<p>Letâs build a system that raises Domain Events, and we can\n<strong>denormalize</strong> events to a <strong>Persistent View\nModel</strong>.</p>\n<p>Â </p>\n<p>We just have to listen to events and change the representation we want to\nsend to the users:</p>\n<ul>\n<li>The events contain everything we need to do fine grained updates\neasily.</li>\n<li>We can can compute denormalizations asynchronously if itâs time\nconsuming</li>\n<li>We can store it in a relational database, a document database, or in\nmemory</li>\n<li>We can choose any form of denormalization since itâs a denormalization\n(object graph, but also flat string, json, html â¦)</li>\n<li>It will be up to date quickly because it will be updated when the original\ndata changed</li>\n<li>The first client that makes a request after a change will not endure a\ncache miss that can be long to process since computing is done on change, and\nnot on request.</li>\n</ul>\n<p>A good way to Keep It Simple, Stupid!</p>","","caching done right was trolling twitter saturday when saw tweet nate kohari and some answers immediately thought you have one problem and use cache solve you now have two problems whereâs the problem the time retrieve the data not negligible due frequency request and time taken calculation data access put data cache that donât have endure this time each call but then comes the problem cache expiration can use duration but what the acceptable delay can make check original data check has changed itâs more accurate but incurs new data access moreover checking changed often not enough also need find what changed and deriving what happened from state basically reverse engineering iâm engineer prefer forward engineering letâs forward itâs actually easy itâs the whole point cqrs letâs build system that raises domain events and can denormalize events persistent view model just have listen events and change the representation want send the users the events contain everything need fine grained updates easily can can compute denormalizations asynchronously itâs time consuming can store relational database document database memory can choose any form denormalization since itâs denormalization object graph but also flat string json html will date quickly because will updated when the original data changed the first client that makes request after change will not endure cache miss that can long process since computing done change and not request good way keep simple stupid","a:1:{s:3:\"tag\";a:1:{i:0;s:11:\"CQRS Events\";}}","1","0","1","1","2","0","0"
"685921","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2012-06-14 14:32:00","Europe/Paris","2012-06-14 12:32:45","2012-06-14 12:41:02","","post","xhtml","2012/06/14/Make-it-simpler-:-get-rid-of-Mocking-Fx","en","Make it simpler : get rid of Mocking Fx","","","<p>In the wake of Rinat <a href=\"http://abdullin.com/journal/2012/6/8/technology-demons.html\" target=\"_blank\">Technology Demons</a>, Iâd add Mocking frameworks to the list.</p>  <p>&#160;</p>  <p>There are several reasons to do that.</p>  <p>&#160;</p>  <h3>Stubs</h3>  <p>One of the usage of Mocking - or isolation â frameworks is stubbing. A component that access external resources or has complex behavior will be changed for a fake to have simpler predictable results.</p>  <p>&#160;</p>  <ul>   <li>When the component interface is small, the stub declaration code is often more complicated that writing a fake implementation directly. </li>    <li>When the interface has many methods, it makes things easier, but here youâll ignore a code smell. It makes things easy in situation you should not reach ! </li> </ul>  <p>There are also easy patterns that make the use of mocking irrelevant. A common one is configuration loading.</p>  <p>Lots of developers think: âI need a class to access my configuration. Letâs make a class for thisâ:</p>  <p>&#160;</p>  <div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\"> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\">Configuration</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> EndPoint</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]; }</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p> <p style=\"margin: 0px;\">&nbsp;</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// other properties here//</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; }</p> </div>   <p>&#160;</p>  <p>Then they realize theyâll have to isolate from ConfigurationManager, so they add a interface :</p>  <p>&#160;</p>  <p>&#160;</p>  <div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\"> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">interface</span> <span style=\"color: #2b91af;\">IConfiguration</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">string</span> EndPoint { <span style=\"color: blue;\">get</span>; }</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; }</p> <p style=\"margin: 0px;\">&nbsp;</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\">Configuration</span> : <span style=\"color: #2b91af;\">IConfiguration</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> EndPoint</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]; }</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p> <p style=\"margin: 0px;\">&nbsp;</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// other properties here//</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; }</p> </div>   <p>And they can moke the configuration using a lot of boring code.</p>  <p>&#160;</p>  <p>what about this ?</p>  <p>&#160;</p>  <p>&#160;</p>  <div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\"> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\">Configuration</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> EndPoint { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// other properties here//</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; }</p> <p style=\"margin: 0px;\">&nbsp;</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\">ConfigurationLoader</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> <span style=\"color: #2b91af;\">Configuration</span> Load()</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">Configuration</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; EndPoint = <span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// other properties here//</span></p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; };</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p> <p style=\"margin: 0px;\">&nbsp;&nbsp;&nbsp; }</p> </div>   <p>&#160;</p>  <p>Passing a different configuration in your test is a simple <font face=\"Consolas\">new Configuration {}</font>â¦ and you can use the <font face=\"Consolas\">ConfigurationLoader</font> class in you main function.</p>  <p>&#160;</p>  <p>A good thing here, is that you donât suffer a read of the configuration file at each call without needing to introduce lazy loading or other tweaks that make things worse..</p>  <p>&#160;</p>  <h3>Mocks</h3>  <p>When you need to see if a call happened, you can make an implementation of the interface that takes a lambda :</p>  <p>&#160;</p>  <div style=\"font-family: consolas; background: white; color: black; font-size: 10pt\">   <p style=\"margin: 0px\">&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: blue\">interface</span> <span style=\"color: #2b91af\">IFancyService</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">void</span> DoSomething(<span style=\"color: blue\">int</span> arg);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">MockFancyService</span> : <span style=\"color: #2b91af\">IFancyService</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">private</span> <span style=\"color: #2b91af\">Action</span>&lt;<span style=\"color: blue\">int</span>&gt; doSomething;</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> MockFancyService(<span style=\"color: #2b91af\">Action</span>&lt;<span style=\"color: blue\">int</span>&gt; doSomething)</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">this</span>.doSomething = doSomething;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: blue\">void</span> DoSomething(<span style=\"color: blue\">int</span> arg)</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; doSomething(arg);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; <span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">Test</span></p>    <p style=\"margin: 0px\">&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">void</span> DoSomthingHasBenCalled()</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">bool</span> wasCalled = <span style=\"color: blue\">false</span>;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">var</span> fancyService = <span style=\"color: blue\">new</span> <span style=\"color: #2b91af\">MockFancyService</span>(i =&gt; { wasCalled = <span style=\"color: blue\">true</span>; });</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: blue\">var</span> compoenent = <span style=\"color: blue\">new</span> <span style=\"color: #2b91af\">ComponentThatUseFancyService</span>(fancyService);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; compoenent.MakeSomething();</p>    <p style=\"margin: 0px\">&#160;</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color: #2b91af\">Assert</span>.That(wasCalled, <span style=\"color: #2b91af\">Is</span>.True);</p>    <p style=\"margin: 0px\">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>    <p style=\"margin: 0px\">&#160;&#160;&#160; }</p> </div>  <p>Or make the fake class record the call, and add a getter to check. Itâs not that complicated.</p>","<p>In the wake of Rinat <a href=\"http://abdullin.com/journal/2012/6/8/technology-demons.html\" target=\"_blank\">Technology Demons</a>, Iâd add Mocking frameworks to the list.</p>\n<p>Â </p>\n<p>There are several reasons to do that.</p>\n<p>Â </p>\n<h3>Stubs</h3>\n<p>One of the usage of Mocking - or isolation â frameworks is stubbing. A\ncomponent that access external resources or has complex behavior will be\nchanged for a fake to have simpler predictable results.</p>\n<p>Â </p>\n<ul>\n<li>When the component interface is small, the stub declaration code is often\nmore complicated that writing a fake implementation directly.</li>\n<li>When the interface has many methods, it makes things easier, but here\nyouâll ignore a code smell. It makes things easy in situation you should not\nreach !</li>\n</ul>\n<p>There are also easy patterns that make the use of mocking irrelevant. A\ncommon one is configuration loading.</p>\n<p>Lots of developers think: âI need a class to access my configuration. Letâs\nmake a class for thisâ:</p>\n<p>Â </p>\n<div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\">\n<p style=\"margin: 0px;\">Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span>\n<span style=\"color: #2b91af;\">Configuration</span></p>\n<p style=\"margin: 0px;\">Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span>\nEndPoint</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]; }</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  }</p>\n<p style=\"margin: 0px;\">Â </p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: green;\">// other properties here//</span></p>\n<p style=\"margin: 0px;\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>Then they realize theyâll have to isolate from ConfigurationManager, so they\nadd a interface :</p>\n<p>Â </p>\n<p>Â </p>\n<div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\">\n<p style=\"margin: 0px;\">Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">interface</span>\n<span style=\"color: #2b91af;\">IConfiguration</span></p>\n<p style=\"margin: 0px;\">Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: blue;\">string</span> EndPoint { <span style=\"color: blue;\">get</span>;\n}</p>\n<p style=\"margin: 0px;\">Â Â Â  }</p>\n<p style=\"margin: 0px;\">Â </p>\n<p style=\"margin: 0px;\">Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span>\n<span style=\"color: #2b91af;\">Configuration</span> : <span style=\"color: #2b91af;\">IConfiguration</span></p>\n<p style=\"margin: 0px;\">Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span>\nEndPoint</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]; }</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  }</p>\n<p style=\"margin: 0px;\">Â </p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: green;\">// other properties here//</span></p>\n<p style=\"margin: 0px;\">Â Â Â  }</p>\n</div>\n<p>And they can moke the configuration using a lot of boring code.</p>\n<p>Â </p>\n<p>what about this ?</p>\n<p>Â </p>\n<p>Â </p>\n<div style=\"font-family: Consolas; font-size: 10pt; color: black; background: white;\">\n<p style=\"margin: 0px;\">Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span>\n<span style=\"color: #2b91af;\">Configuration</span></p>\n<p style=\"margin: 0px;\">Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> EndPoint\n{ <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>;\n}</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: green;\">// other properties here//</span></p>\n<p style=\"margin: 0px;\">Â Â Â  }</p>\n<p style=\"margin: 0px;\">Â </p>\n<p style=\"margin: 0px;\">Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span>\n<span style=\"color: #2b91af;\">ConfigurationLoader</span></p>\n<p style=\"margin: 0px;\">Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  <span style=\"color: blue;\">public</span> <span style=\"color: #2b91af;\">Configuration</span>\nLoad()</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">Configuration</span></p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  Â Â Â  {</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  Â Â Â  Â Â Â  EndPoint =\n<span style=\"color: #2b91af;\">ConfigurationManager</span>.AppSettings[<span style=\"color: #a31515;\">&quot;EndPoint&quot;</span>]</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  Â Â Â  Â Â Â  <span style=\"color: green;\">// other properties here//</span></p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â \nÂ Â Â  Â Â Â  };</p>\n<p style=\"margin: 0px;\">Â Â Â  Â Â Â  }</p>\n<p style=\"margin: 0px;\">Â Â Â  }</p>\n</div>\n<p>Â </p>\n<p>Passing a different configuration in your test is a simple new Configuration\n{}â¦ and you can use the ConfigurationLoader class in you main function.</p>\n<p>Â </p>\n<p>A good thing here, is that you donât suffer a read of the configuration file\nat each call without needing to introduce lazy loading or other tweaks that\nmake things worse..</p>\n<p>Â </p>\n<h3>Mocks</h3>\n<p>When you need to see if a call happened, you can make an implementation of\nthe interface that takes a lambda :</p>\n<p>Â </p>\n<div style=\"font-family: consolas; background: white; color: black; font-size: 10pt\">\n<p style=\"margin: 0px\">Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: blue\">interface</span>\n<span style=\"color: #2b91af\">IFancyService</span></p>\n<p style=\"margin: 0px\">Â Â Â  {</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">void</span> DoSomething(<span style=\"color: blue\">int</span>\narg);</p>\n<p style=\"margin: 0px\">Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">MockFancyService</span> : <span style=\"color: #2b91af\">IFancyService</span></p>\n<p style=\"margin: 0px\">Â Â Â  {</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">private</span> <span style=\"color: #2b91af\">Action</span>&lt;<span style=\"color: blue\">int</span>&gt;\ndoSomething;</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> MockFancyService(<span style=\"color: #2b91af\">Action</span>&lt;<span style=\"color: blue\">int</span>&gt;\ndoSomething)</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">this</span>.doSomething = doSomething;</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: blue\">void</span>\nDoSomething(<span style=\"color: blue\">int</span> arg)</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â \ndoSomething(arg);</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â Â Â  }</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">Â Â Â  <span style=\"color: blue\">public</span> <span style=\"color: blue\">class</span> <span style=\"color: #2b91af\">Test</span></p>\n<p style=\"margin: 0px\">Â Â Â  {</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  <span style=\"color: blue\">void</span> DoSomthingHasBenCalled()</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  {</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">bool</span> wasCalled = <span style=\"color: blue\">false</span>;</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">var</span> fancyService = <span style=\"color: blue\">new</span>\n<span style=\"color: #2b91af\">MockFancyService</span>(i =&gt; { wasCalled =\n<span style=\"color: blue\">true</span>; });</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: blue\">var</span> compoenent = <span style=\"color: blue\">new</span>\n<span style=\"color: #2b91af\">ComponentThatUseFancyService</span>(fancyService);</p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â \ncompoenent.MakeSomething();</p>\n<p style=\"margin: 0px\">Â </p>\n<p style=\"margin: 0px\">\nÂ Â Â Â Â Â Â Â Â Â Â  <span style=\"color: #2b91af\">Assert</span>.That(wasCalled, <span style=\"color: #2b91af\">Is</span>.True);</p>\n<p style=\"margin: 0px\">Â Â Â Â Â Â Â  }</p>\n<p style=\"margin: 0px\">Â Â Â  }</p>\n</div>\n<p>Or make the fake class record the call, and add a getter to check. Itâs not\nthat complicated.</p>","","make simpler get rid mocking the wake rinat technology demons iâd add mocking frameworks the list there are several reasons that stubs one the usage mocking isolation frameworks stubbing component that access external resources has complex behavior will changed for fake have simpler predictable results when the component interface small the stub declaration code often more complicated that writing fake implementation directly when the interface has many methods makes things easier but here youâll ignore code smell makes things easy situation you should not reach there are also easy patterns that make the use mocking irrelevant common one configuration loading lots developers think need class access configuration letâs make class for thisâ public class configuration public string endpoint get return configurationmanager appsettings quot endpoint quot other properties here then they realize theyâll have isolate from configurationmanager they add interface public interface iconfiguration string endpoint get public class configuration iconfiguration public string endpoint get return configurationmanager appsettings quot endpoint quot other properties here and they can moke the configuration using lot boring code what about this public class configuration public string endpoint get set other properties here public class configurationloader public configuration load return new configuration endpoint configurationmanager appsettings quot endpoint quot other properties here passing different configuration your test simple new configuration and you can use the configurationloader class you main function good thing here that you donât suffer read the configuration file each call without needing introduce lazy loading other tweaks that make things worse mocks when you need see call happened you can make implementation the interface that takes lambda public interface ifancyservice void dosomething int arg public class mockfancyservice ifancyservice private action int dosomething public mockfancyservice action int dosomething this dosomething dosomething public void dosomething int arg dosomething arg public class test void dosomthinghasbencalled bool wascalled false var fancyservice new mockfancyservice wascalled true var compoenent new componentthatusefancyservice fancyservice compoenent makesomething assert that wascalled true make the fake class record the call and add getter check itâs not that complicated","a:1:{s:3:\"tag\";a:1:{i:0;s:12:\"Mocks Simple\";}}","1","0","1","1","3","0","0"
"687197","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","52964","2012-06-21 23:57:00","Europe/Paris","2012-06-21 21:57:27","2012-06-21 21:57:28","","post","xhtml","2012/06/21/SimpleCQRS-the-F-version","en","SimpleCQRS the F# version","","","<p><a href=\"https://github.com/thinkbeforecoding/m-r\">Here it is</a> ! As promised after gregâs talk at dddx&#160; (you can already see <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2012\">all the presentations online</a> !), a F# version of SimpleCQRS, a simple, quick EventSourcing + CQRS sample to see it in action.</p>  <p>&#160;</p>  <h3>Why rewrite it in F# ?</h3>  <p>&#160;</p>  <p>This is not just a simple copy of the C# version. The point was first to write it in a functional language, because event sourcing is inherently functional.</p>  <p>&#160;</p>  <p>In C#, an aggregate method looks like this :</p> <script src=\"http://pastie.org/4128313.js\"></script>  <p>&#160;</p>  <p><font face=\"Courier New\"><font size=\"2\"><span class=\"meta meta_definition meta_definition_method meta_definition_method_csharp\" style=\"white-space: pre; line-height: normal\"><font color=\"#000000\"><span class=\"storage storage_modifier storage_modifier_csharp\">public </span><span class=\"storage storage_type storage_type_csharp\">void</span> <span class=\"entity entity_name entity_name_function entity_name_function_csharp\">CheckIn</span><span class=\"meta meta_definition meta_definition_param-list meta_definition_param-list_csharp\">(<span class=\"storage storage_type storage_type_csharp\">int</span> count</span>)</font></span>         <br /></font><font color=\"#000000\" size=\"2\">{        <br /><span class=\"keyword keyword_control keyword_control_csharp\" style=\"white-space: pre; line-height: normal\">&#160;&#160; if</span>(count &lt;= <span class=\"constant constant_numeric constant_numeric_csharp\" style=\"white-space: pre; line-height: normal\">0</span>)        <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"keyword keyword_control keyword_control_csharp\" style=\"white-space: pre; line-height: normal\">throw</span> <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"white-space: pre; line-height: normal\">new</span> InvalidOperationException(        <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"string string_quoted string_quoted_double string_quoted_double_csharp\" style=\"white-space: pre; line-height: normal\">&quot;must have a count greater than 0 to add to inventory&quot;</span>);         <br />&#160;&#160; ApplyChange(<span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"white-space: pre; line-height: normal\">new</span> ItemsCheckedInToInventory(_id, count));         <br />}</font></font></p>  <p>&#160;</p>  <p>The ApplyChange method is defined in the AggregateRoot base class.</p>  <p>It dispatches the event to a state denormalizer and add the Event to uncommitted changes.</p>  <p>&#160;</p>  <p>Here is a denormalizer to apply a state change following an event :</p>  <p>&#160;</p>  <p><font face=\"Courier New\"><span class=\"meta meta_definition meta_definition_method meta_definition_method_csharp\" style=\"white-space: pre; line-height: normal\"><font color=\"#000000\"><font size=\"2\"><span class=\"storage storage_modifier storage_modifier_csharp\">private </span><span class=\"storage storage_type storage_type_csharp\">void</span> <span class=\"entity entity_name entity_name_function entity_name_function_csharp\">Apply</span><span class=\"meta meta_definition meta_definition_param-list meta_definition_param-list_csharp\">(InventoryItemDeactivated e</span>)            <br /></font></font></span><font color=\"#000000\" size=\"2\"> {        <br />&#160;&#160; _activated = <span class=\"constant constant_language constant_language_csharp\" style=\"white-space: pre; line-height: normal\">false</span>;        <br />}</font></font><font face=\"Courier New\"><font style=\"font-size: 12pt\"><font color=\"#000000\">&#160;</font></font></font></p>  <p>&#160;</p>  <p>All this is fine, but why should the aggregate be mutable when the event stream is highly a append only store of immutable events.</p>  <p>&#160;</p>  <p>Watch gregâs talk carefully, both methods can be transformed to an immutable equivalent easily.</p>  <p>&#160;</p>  <p> First the goal of the public method is to determine which event to raise based on command parameters and current state. The CheckIn method can be defined by the following method signature:</p>  <p>int â&gt; State â&gt; Event&#160; or Func&lt;int,State,Event&gt;</p>  <p>&#160;</p>  <p>Instead of calling an Apply change internally, the method simply returns an event :</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">let checkIn count s =     <br />&#160;&#160;&#160; <span class=\"keyword keyword_control keyword_control_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">if</span> count &lt;= <span class=\"constant constant_numeric constant_numeric_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">0</span> then       <br />&#160;&#160;&#160;&#160;&#160;&#160; raise (InvalidOperationException       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class=\"string string_quoted string_quoted_double string_quoted_double_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">&quot;must have a count greater than 0 to add to inventory&quot;</span>)       <br />&#160;&#160;&#160;&#160;&#160;&#160; fire {ItemsCheckedInToInventory.Id= s.Id; Count = count}</font></p>  <p>&#160;</p>  <p>where the fire function simply creates a Event array from a single event :</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">let fire o =      <br />&#160;&#160;&#160; [o :&gt; Event]</font></p>  <p><font color=\"#000000\" face=\"Consolas\"></font></p>  <p>(notice the [o:&gt; smiley here !)</p>  <p><font color=\"#000000\" face=\"Consolas\"></font></p>  <p>An array is returned here so that a method can fire/return several events using a simple :: syntax.</p>  <p>&#160;</p>  <p>The state application can also become immutable. The function gives next state based on event and previous state :</p>  <p>&#160;</p>  <p>State â&gt; Event â&gt; State or Func&lt;State,Event,State&gt;</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">let applyOnInventoryItem s (e: Event) =      <br />&#160;&#160; match e with       <br />&#160;&#160; | :? InventoryItemCreated <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">as</span> e -&gt; {Id = e.Id; Activated = <span class=\"constant constant_language constant_language_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">true</span> }       <br />&#160;&#160; | :? InventoryItemDeactivated <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">as</span> e -&gt; {s with Activated = <span class=\"constant constant_language constant_language_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">false</span>; }       <br />&#160;&#160; | _ â&gt; s</font></p>  <p><font color=\"#000000\" face=\"Consolas\"></font></p>  <p>no need for several methods here, every thing is straight forward. Match the event using its type.</p>  <p>The first event is a creation, so a state record is creates.</p>  <p>The second events copies state s with Activated set to false. No change occurs here, a copy is returned.</p>  <p>The _ match specifies that any other event simply return previous state.</p>  <p>&#160;</p>  <p>Done.</p>  <p>&#160;</p>  <h3>The current state is a left fold of passed events</h3>  <p>Sure and the replayWith method is simply here to do this :</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">let replayWith&#160; =</font></p>  <p><font color=\"#000000\" face=\"Consolas\">&#160;&#160;&#160; Seq.fold</font></p>  <p><font color=\"#000000\" face=\"Consolas\">let replayInventoryItem =</font></p>  <p><font color=\"#000000\" face=\"Consolas\">&#160;&#160;&#160; replayWith applyOnInventoryItem </font><font color=\"#000000\" face=\"Consolas\">{ Id = Guid.Empty; Activated = false}</font></p>  <p>&#160;</p>  <p>the replayInventoryItem is a function that takes a Event seq aka IEnumerable&lt;Event&gt;. It will start with the empty state, then for each event, call the applyOnInventoryItem function with previous state, current event, and iterate with new state.</p>  <p>&#160;</p>  <p>The result is the current state.</p>  <p>&#160;</p>  <h3>Command handlers</h3>  <p>The event handlers use the following functions :</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">let load id =      <br />&#160;&#160; eventStore.GetEventsForAggregate id |&gt;      <br />&#160;&#160; replayInventoryItem</font></p>  <p><font color=\"#000000\" face=\"Consolas\">let save = eventStore.SaveEvents</font></p>  <p><font color=\"#000000\" face=\"Consolas\"></font></p>  <p><font color=\"#000000\" face=\"Consolas\">let applyOn id version f =      <br />&#160;&#160; load id |&gt;      <br />&#160;&#160; f |&gt;      <br />&#160;&#160; save id version</font></p>  <p><font color=\"#000000\" face=\"Consolas\"></font></p>  <p>load simply pass events for the aggregate with identifier id to the replayInventoryItem</p>  <p>save is simply a short cut for the event store SaveEvents method</p>  <p>applyOn loads an aggregate to current state, pass state to f, a function that returns an event seq, then save it to the event store.</p>  <p>&#160;</p>  <p>Here is a sample of its use :</p>  <p>&#160;</p>  <p><font color=\"#000000\" face=\"Consolas\">member x.Handle (c: CheckInItemsToInventory) =</font></p>  <p><font color=\"#000000\" face=\"Consolas\">&#160;&#160; checkIn c.Count |&gt;</font></p>  <p><font color=\"#000000\" face=\"Consolas\">&#160;&#160; applyOn c.InventoryItemId c.OriginalVersion     <br /></font></p>  <p>The checkIn function actually expect an second State argument, it signature is int â&gt; State â&gt; Event seq</p>  <p>&#160;</p>  <p>After passing the c.Count integer argument this is now a State â&gt; Event seq function.</p>  <p>When passed to the applyOn function, the state issued from the load call will be passed to it, resulting in an Event seq that will be passed to the save function.</p>  <p>&#160;</p>  <h3>Conclusion</h3>  <p>There are a few things to notice in this implementation.</p>  <ol>   <li>It is very short, much shorter that C# version.</li>    <li>There is no InventoryItem class. The InventoryItem module contains a State record, the representation of the aggregate internal state, functions to determine raised events, and functions to determine next state based on previous state and event. No base class is needed for event dispatch and uncommitted event handling.</li>    <li>There is no repository. Actually the load and save methods do what a repository does, but itâs so simple that no class is required.</li> </ol>  <p>I did not talk about the read model that is a bit less interesting here.</p>","<p><a href=\"https://github.com/thinkbeforecoding/m-r\">Here it is</a> ! As\npromised after gregâs talk at dddxÂ  (you can already see <a href=\"http://skillsmatter.com/event/design-architecture/ddd-exchange-2012\">all the\npresentations online</a> !), a F# version of SimpleCQRS, a simple, quick\nEventSourcing + CQRS sample to see it in action.</p>\n<p>Â </p>\n<h3>Why rewrite it in F# ?</h3>\n<p>Â </p>\n<p>This is not just a simple copy of the C# version. The point was first to\nwrite it in a functional language, because event sourcing is inherently\nfunctional.</p>\n<p>Â </p>\n<p>In C#, an aggregate method looks like this :</p>\n\n\n<p>Â </p>\n<p><span class=\"meta meta_definition meta_definition_method meta_definition_method_csharp\" style=\"white-space: pre; line-height: normal\"><span class=\"storage storage_modifier storage_modifier_csharp\">public</span> <span class=\"storage storage_type storage_type_csharp\">void</span> <span class=\"entity entity_name entity_name_function entity_name_function_csharp\">CheckIn</span><span class=\"meta meta_definition meta_definition_param-list meta_definition_param-list_csharp\">(<span class=\"storage storage_type storage_type_csharp\">int</span>\ncount</span>)</span><br />\n {<br />\n<span class=\"keyword keyword_control keyword_control_csharp\" style=\"white-space: pre; line-height: normal\">Â Â  if</span>(count &lt;=\n<span class=\"constant constant_numeric constant_numeric_csharp\" style=\"white-space: pre; line-height: normal\">0</span>)<br />\nÂ Â Â Â Â Â Â  <span class=\"keyword keyword_control keyword_control_csharp\" style=\"white-space: pre; line-height: normal\">throw</span> <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"white-space: pre; line-height: normal\">new</span>\nInvalidOperationException(<br />\nÂ Â Â Â Â Â Â Â Â Â Â Â Â \n<span class=\"string string_quoted string_quoted_double string_quoted_double_csharp\" style=\"white-space: pre; line-height: normal\">&quot;must have a count greater than 0 to\nadd to inventory&quot;</span>);<br />\nÂ Â  ApplyChange(<span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"white-space: pre; line-height: normal\">new</span>\nItemsCheckedInToInventory(_id, count));<br />\n}</p>\n<p>Â </p>\n<p>The ApplyChange method is defined in the AggregateRoot base class.</p>\n<p>It dispatches the event to a state denormalizer and add the Event to\nuncommitted changes.</p>\n<p>Â </p>\n<p>Here is a denormalizer to apply a state change following an event :</p>\n<p>Â </p>\n<p><span class=\"meta meta_definition meta_definition_method meta_definition_method_csharp\" style=\"white-space: pre; line-height: normal\"><span class=\"storage storage_modifier storage_modifier_csharp\">private</span> <span class=\"storage storage_type storage_type_csharp\">void</span> <span class=\"entity entity_name entity_name_function entity_name_function_csharp\">Apply</span><span class=\"meta meta_definition meta_definition_param-list meta_definition_param-list_csharp\">(InventoryItemDeactivated\ne</span>)<br /></span> {<br />\nÂ Â  _activated = <span class=\"constant constant_language constant_language_csharp\" style=\"white-space: pre; line-height: normal\">false</span>;<br />\n}Â </p>\n<p>Â </p>\n<p>All this is fine, but why should the aggregate be mutable when the event\nstream is highly a append only store of immutable events.</p>\n<p>Â </p>\n<p>Watch gregâs talk carefully, both methods can be transformed to an immutable\nequivalent easily.</p>\n<p>Â </p>\n<p>First the goal of the public method is to determine which event to raise\nbased on command parameters and current state. The CheckIn method can be\ndefined by the following method signature:</p>\n<p>int â&gt; State â&gt; EventÂ  or Func&lt;int,State,Event&gt;</p>\n<p>Â </p>\n<p>Instead of calling an Apply change internally, the method simply returns an\nevent :</p>\n<p>Â </p>\n<p>let checkIn count s =<br />\nÂ Â Â  <span class=\"keyword keyword_control keyword_control_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">if</span>\ncount &lt;= <span class=\"constant constant_numeric constant_numeric_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">0</span>\nthen<br />\nÂ Â Â Â Â Â  raise (InvalidOperationException<br />\nÂ Â Â Â Â Â Â Â Â Â  <span class=\"string string_quoted string_quoted_double string_quoted_double_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">&quot;must have a\ncount greater than 0 to add to inventory&quot;</span>)<br />\nÂ Â Â Â Â Â  fire {ItemsCheckedInToInventory.Id= s.Id;\nCount = count}</p>\n<p>Â </p>\n<p>where the fire function simply creates a Event array from a single event\n:</p>\n<p>Â </p>\n<p>let fire o =<br />\nÂ Â Â  [o :&gt; Event]</p>\n<p>(notice the [o:&gt; smiley here !)</p>\n<p>An array is returned here so that a method can fire/return several events\nusing a simple :: syntax.</p>\n<p>Â </p>\n<p>The state application can also become immutable. The function gives next\nstate based on event and previous state :</p>\n<p>Â </p>\n<p>State â&gt; Event â&gt; State or Func&lt;State,Event,State&gt;</p>\n<p>Â </p>\n<p>let applyOnInventoryItem s (e: Event) =<br />\nÂ Â  match e with<br />\nÂ Â  | :? InventoryItemCreated <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">as</span> e\n-&gt; {Id = e.Id; Activated = <span class=\"constant constant_language constant_language_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">true</span>\n}<br />\nÂ Â  | :? InventoryItemDeactivated <span class=\"keyword keyword_operator keyword_operator_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">as</span> e\n-&gt; {s with Activated = <span class=\"constant constant_language constant_language_csharp\" style=\"word-wrap: break-word; white-space: pre; line-height: 11.7pt\">false</span>;\n}<br />\nÂ Â  | _ â&gt; s</p>\n<p>no need for several methods here, every thing is straight forward. Match the\nevent using its type.</p>\n<p>The first event is a creation, so a state record is creates.</p>\n<p>The second events copies state s with Activated set to false. No change\noccurs here, a copy is returned.</p>\n<p>The _ match specifies that any other event simply return previous state.</p>\n<p>Â </p>\n<p>Done.</p>\n<p>Â </p>\n<h3>The current state is a left fold of passed events</h3>\n<p>Sure and the replayWith method is simply here to do this :</p>\n<p>Â </p>\n<p>let replayWithÂ  =</p>\n<p>Â Â Â  Seq.fold</p>\n<p>let replayInventoryItem =</p>\n<p>Â Â Â  replayWith applyOnInventoryItem { Id = Guid.Empty;\nActivated = false}</p>\n<p>Â </p>\n<p>the replayInventoryItem is a function that takes a Event seq aka\nIEnumerable&lt;Event&gt;. It will start with the empty state, then for each\nevent, call the applyOnInventoryItem function with previous state, current\nevent, and iterate with new state.</p>\n<p>Â </p>\n<p>The result is the current state.</p>\n<p>Â </p>\n<h3>Command handlers</h3>\n<p>The event handlers use the following functions :</p>\n<p>Â </p>\n<p>let load id =<br />\nÂ Â  eventStore.GetEventsForAggregate id |&gt;<br />\nÂ Â  replayInventoryItem</p>\n<p>let save = eventStore.SaveEvents</p>\n<p>let applyOn id version f =<br />\nÂ Â  load id |&gt;<br />\nÂ Â  f |&gt;<br />\nÂ Â  save id version</p>\n<p>load simply pass events for the aggregate with identifier id to the\nreplayInventoryItem</p>\n<p>save is simply a short cut for the event store SaveEvents method</p>\n<p>applyOn loads an aggregate to current state, pass state to f, a function\nthat returns an event seq, then save it to the event store.</p>\n<p>Â </p>\n<p>Here is a sample of its use :</p>\n<p>Â </p>\n<p>member x.Handle (c: CheckInItemsToInventory) =</p>\n<p>Â Â  checkIn c.Count |&gt;</p>\n<p>Â Â  applyOn c.InventoryItemId c.OriginalVersion<br /></p>\n<p>The checkIn function actually expect an second State argument, it signature\nis int â&gt; State â&gt; Event seq</p>\n<p>Â </p>\n<p>After passing the c.Count integer argument this is now a State â&gt; Event\nseq function.</p>\n<p>When passed to the applyOn function, the state issued from the load call\nwill be passed to it, resulting in an Event seq that will be passed to the save\nfunction.</p>\n<p>Â </p>\n<h3>Conclusion</h3>\n<p>There are a few things to notice in this implementation.</p>\n<ol>\n<li>It is very short, much shorter that C# version.</li>\n<li>There is no InventoryItem class. The InventoryItem module contains a State\nrecord, the representation of the aggregate internal state, functions to\ndetermine raised events, and functions to determine next state based on\nprevious state and event. No base class is needed for event dispatch and\nuncommitted event handling.</li>\n<li>There is no repository. Actually the load and save methods do what a\nrepository does, but itâs so simple that no class is required.</li>\n</ol>\n<p>I did not talk about the read model that is a bit less interesting here.</p>","","simplecqrs the version here promised after gregâs talk dddx you can already see all the presentations online version simplecqrs simple quick eventsourcing cqrs sample see action why rewrite this not just simple copy the version the point was first write functional language because event sourcing inherently functional aggregate method looks like this public void checkin int count count throw new invalidoperationexception quot must have count greater than add inventory quot applychange new itemscheckedintoinventory count the applychange method defined the aggregateroot base class dispatches the event state denormalizer and add the event uncommitted changes here denormalizer apply state change following event private void apply inventoryitemdeactivated activated false all this fine but why should the aggregate mutable when the event stream highly append only store immutable events watch gregâs talk carefully both methods can transformed immutable equivalent easily first the goal the public method determine which event raise based command parameters and current state the checkin method can defined the following method signature int state event func int state event instead calling apply change internally the method simply returns event let checkin count count then raise invalidoperationexception quot must have count greater than add inventory quot fire itemscheckedintoinventory count count where the fire function simply creates event array from single event let fire event notice the smiley here array returned here that method can fire return several events using simple syntax the state application can also become immutable the function gives next state based event and previous state state event state func state event state let applyoninventoryitem event match with inventoryitemcreated activated true inventoryitemdeactivated with activated false need for several methods here every thing straight forward match the event using its type the first event creation state record creates the second events copies state with activated set false change occurs here copy returned the match specifies that any other event simply return previous state done the current state left fold passed events sure and the replaywith method simply here this let replaywith seq fold let replayinventoryitem replaywith applyoninventoryitem guid empty activated false the replayinventoryitem function that takes event seq aka ienumerable event will start with the empty state then for each event call the applyoninventoryitem function with previous state current event and iterate with new state the result the current state command handlers the event handlers use the following functions let load eventstore geteventsforaggregate replayinventoryitem let save eventstore saveevents let applyon version load save version load simply pass events for the aggregate with identifier the replayinventoryitem save simply short cut for the event store saveevents method applyon loads aggregate current state pass state function that returns event seq then save the event store here sample its use member handle checkinitemstoinventory checkin count applyon inventoryitemid originalversion the checkin function actually expect second state argument signature int state event seq after passing the count integer argument this now state event seq function when passed the applyon function the state issued from the load call will passed resulting event seq that will passed the save function conclusion there are few things notice this implementation very short much shorter that version there inventoryitem class the inventoryitem module contains state record the representation the aggregate internal state functions determine raised events and functions determine next state based previous state and event base class needed for event dispatch and uncommitted event handling there repository actually the load and save methods what repository does but itâs simple that class required did not talk about the read model that bit less interesting here","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"CQRS;EventSourcing;F\";}}","1","0","1","1","1","0","0"
"723115","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2013-03-03 22:27:00","Europe/Paris","2013-03-03 21:27:37","2013-03-03 21:28:22","","post","xhtml","2013/03/03/Entities-and-Repository-injection-ndash;-follow-up","en","Entities and Repository injection - follow up","","","<p>&nbsp;</p>\r\n<p>I have <a href=\"http://thinkbeforecoding.com/post/2009/03/04/How-not-to-inject-services-in-entities\" target=\"_blank\">still new comments</a> and there are some <a href=\"http://stackoverflow.com/questions/5694241/ddd-the-rule-that-entities-cant-access-repositories-directly\" target=\"_blank\">Stack Overflow questions</a> on the subject that show the response to the question is still unclearâ¦</p>\r\n<p>&nbsp;</p>\r\n<blockquote>\r\n<p>Should you inject, or even use repositories in you entities ?</p>\r\n</blockquote>  <p>The response is two fold, and both go in the same direction, you shouldnât.</p>\r\n<p>&nbsp;</p>\r\n<p><em>Of course, weâre discussing design here, so if in your specific case you find reasons more important than those invoked here, thereâs always a possibility to decide to go as you wishâ¦</em></p>\r\n<p>&nbsp;</p>\r\n<h3>Injection and DDD patterns</h3>\r\n<p>Where talking Injection and Entities/Repositories here, so the first reason concerns what injection means in a Domain Driven Design environement.</p>\r\n<p>&nbsp;</p>\r\n<p>The <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\">wikipedia definition of the dependency injection pattern</a> only makes references to objects or components without defining explicitly which kind of object or which kind of componentâ¦</p>\r\n<p>&nbsp;</p>\r\n<p>But a famous injection anti pattern can give use more information on what are injected components.</p>\r\n<p>I call the <strong>Service Locator</strong> anti pattern.</p>\r\n<p>&nbsp;</p>\r\n<p>This make it clear that what we are looking for is a way to find service in a supple and configurable way.</p>\r\n<p>I wonât explain here why the service locator is an anti pattern, but it makes it obvious that the use of injection is to provide access to services in the code.</p>\r\n<p>&nbsp;</p>\r\n<p>Since services are supposed to be stateless, their lifecycles are usually quite flexible. A service could be instanciated on each call, on each request or as a single instance without much difference. The injected service dependencies enable to compose services to replace implementations by configuration or for tests.. </p>\r\n<p>But even at runtime. A live configuration change could indicates to replace an injected service on next instantiation.</p>\r\n<p>&nbsp;</p>\r\n<p>Services and repositories are quite obviously not injected with Entities/Aggregates:</p>\r\n<ul>   <li>A repository is here to instantiate entities, itâs its own job, it doesnât need to be injected with entitiesâ¦</li>\r\n<li>When a service needs an entity, it can be injected with a repository, and get the entity through it.</li>\r\n</ul>\r\n<p>But could entities be injected with services or repositories ?</p>\r\n<p>&nbsp;</p>\r\n<p>An aggregate or an entity is not stateless as a service, it is statefull, and its member fields are here to maintain current state.</p>\r\n<p>It seems quite odd to use those fields to store references to services that are obviously not part of the state.</p>\r\n<p>It also links the referenced service lifecycle to the lifecycle of the entity itself.</p>\r\n<p>&nbsp;</p>\r\n<p>Most entities instanciation schemes in web applications are on a per call basis, and since most web application donât do anything between calls, the response to the lifecycle problem is simply that everything in created and destroyed on each call.</p>\r\n<p>But it is only a specific simplistic way to consider object lifecycle. <a href=\"http://thinkbeforecoding.com/post/2010/02/25/Event-Sourcing-and-CQRS-Snapshots\" target=\"_blank\">What if you kept your entities longer in memory and reused them on next call</a> to avoid roundtrips with the data storage ?</p>\r\n<p>Having a reference to a service inside an entity state would make the live reconfiguration far harder to achieve : You would have to trash all current state and reload everything. There is no such problem with services since theyâre meant to be stateless.</p>\r\n<p>&nbsp;</p>\r\n<p>Entities fields are meant to store state, no to reference services. Their lifecycles should not be coupled.</p>\r\n<p>&nbsp;</p>\r\n<h3>Consistency boundary</h3>\r\n<p>&nbsp;</p>\r\n<p>The second reason is about the aggregate consistency boundary.</p>\r\n<p>&nbsp;</p>\r\n<p>Why would you typically need a reference to a repository inside an aggregate ?</p>\r\n<p>&nbsp;</p>\r\n<p>First reason would be to load sub entities when needed. Itâs also called delay load.</p>\r\n<p>&nbsp;</p>\r\n<blockquote>\r\n<p>You shouldnât need delay load in aggregates</p>\r\n</blockquote>  <p>The reason comes from the aggregate definitions. From wikipedia:</p>\r\n<p><em><strong>Aggregate</strong>: A collection of objects that are bound together by a root entity, otherwise known as an aggregate root. The aggregate root guarantees the consistency of changes being made within the aggregate by forbidding external objects from holding references to its members.</em></p>\r\n<p>&nbsp;</p>\r\n<p>The definition talks about object being bound together. Those objects â entities â have strong relationships, or grouping them in an aggregate makes little sense. When the relation is strong, you will need for each</p>\r\n<p>aggregate method to change all objects in coordination, or none. If not, parts of your aggregate should not be here.</p>\r\n<p>If an aggregate needs all its state for each operation, there is strictly no reason to use delay load.</p>\r\n<blockquote>\r\n<p>Load all, use all, save all.</p>\r\n</blockquote>  <p>&nbsp;</p>\r\n<p>The second reason would be to load entities in other aggregates.</p>\r\n<blockquote>\r\n<p>You shouldnât need references to entities in other aggregates</p>\r\n</blockquote>  <p>or at least not directly. The service calling the method on the aggregate will find information needed to call the method (which can contain information coming from other aggregates), but if you need a direct reference to another entity, itâs a clear indication that the aggregated boundary is wrong ! Put that other entity in the aggregate !</p>\r\n<p>&nbsp;</p>\r\n<p>Thus once your aggregate modeling is ok, there is really no reason to use a repository inside an entity.</p>","<p>Â </p>\n<p>I have <a href=\"http://thinkbeforecoding.com/post/2009/03/04/How-not-to-inject-services-in-entities\" target=\"_blank\">still new comments</a> and there are some <a href=\"http://stackoverflow.com/questions/5694241/ddd-the-rule-that-entities-cant-access-repositories-directly\" target=\"_blank\">Stack Overflow questions</a> on the subject that show the\nresponse to the question is still unclearâ¦</p>\n<p>Â </p>\n<blockquote>\n<p>Should you inject, or even use repositories in you entities ?</p>\n</blockquote>\n<p>The response is two fold, and both go in the same direction, you\nshouldnât.</p>\n<p>Â </p>\n<p><em>Of course, weâre discussing design here, so if in your specific case you\nfind reasons more important than those invoked here, thereâs always a\npossibility to decide to go as you wishâ¦</em></p>\n<p>Â </p>\n<h3>Injection and DDD patterns</h3>\n<p>Where talking Injection and Entities/Repositories here, so the first reason\nconcerns what injection means in a Domain Driven Design environement.</p>\n<p>Â </p>\n<p>The <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\">wikipedia definition of the dependency injection pattern</a> only\nmakes references to objects or components without defining explicitly which\nkind of object or which kind of componentâ¦</p>\n<p>Â </p>\n<p>But a famous injection anti pattern can give use more information on what\nare injected components.</p>\n<p>I call the <strong>Service Locator</strong> anti pattern.</p>\n<p>Â </p>\n<p>This make it clear that what we are looking for is a way to find service in\na supple and configurable way.</p>\n<p>I wonât explain here why the service locator is an anti pattern, but it\nmakes it obvious that the use of injection is to provide access to services in\nthe code.</p>\n<p>Â </p>\n<p>Since services are supposed to be stateless, their lifecycles are usually\nquite flexible. A service could be instanciated on each call, on each request\nor as a single instance without much difference. The injected service\ndependencies enable to compose services to replace implementations by\nconfiguration or for tests..</p>\n<p>But even at runtime. A live configuration change could indicates to replace\nan injected service on next instantiation.</p>\n<p>Â </p>\n<p>Services and repositories are quite obviously not injected with\nEntities/Aggregates:</p>\n<ul>\n<li>A repository is here to instantiate entities, itâs its own job, it doesnât\nneed to be injected with entitiesâ¦</li>\n<li>When a service needs an entity, it can be injected with a repository, and\nget the entity through it.</li>\n</ul>\n<p>But could entities be injected with services or repositories ?</p>\n<p>Â </p>\n<p>An aggregate or an entity is not stateless as a service, it is statefull,\nand its member fields are here to maintain current state.</p>\n<p>It seems quite odd to use those fields to store references to services that\nare obviously not part of the state.</p>\n<p>It also links the referenced service lifecycle to the lifecycle of the\nentity itself.</p>\n<p>Â </p>\n<p>Most entities instanciation schemes in web applications are on a per call\nbasis, and since most web application donât do anything between calls, the\nresponse to the lifecycle problem is simply that everything in created and\ndestroyed on each call.</p>\n<p>But it is only a specific simplistic way to consider object lifecycle.\n<a href=\"http://thinkbeforecoding.com/post/2010/02/25/Event-Sourcing-and-CQRS-Snapshots\" target=\"_blank\">What if you kept your entities longer in memory and reused them\non next call</a> to avoid roundtrips with the data storage ?</p>\n<p>Having a reference to a service inside an entity state would make the live\nreconfiguration far harder to achieve : You would have to trash all current\nstate and reload everything. There is no such problem with services since\ntheyâre meant to be stateless.</p>\n<p>Â </p>\n<p>Entities fields are meant to store state, no to reference services. Their\nlifecycles should not be coupled.</p>\n<p>Â </p>\n<h3>Consistency boundary</h3>\n<p>Â </p>\n<p>The second reason is about the aggregate consistency boundary.</p>\n<p>Â </p>\n<p>Why would you typically need a reference to a repository inside an aggregate\n?</p>\n<p>Â </p>\n<p>First reason would be to load sub entities when needed. Itâs also called\ndelay load.</p>\n<p>Â </p>\n<blockquote>\n<p>You shouldnât need delay load in aggregates</p>\n</blockquote>\n<p>The reason comes from the aggregate definitions. From wikipedia:</p>\n<p><em><strong>Aggregate</strong>: A collection of objects that are bound\ntogether by a root entity, otherwise known as an aggregate root. The aggregate\nroot guarantees the consistency of changes being made within the aggregate by\nforbidding external objects from holding references to its members.</em></p>\n<p>Â </p>\n<p>The definition talks about object being bound together. Those objects â\nentities â have strong relationships, or grouping them in an aggregate makes\nlittle sense. When the relation is strong, you will need for each</p>\n<p>aggregate method to change all objects in coordination, or none. If not,\nparts of your aggregate should not be here.</p>\n<p>If an aggregate needs all its state for each operation, there is strictly no\nreason to use delay load.</p>\n<blockquote>\n<p>Load all, use all, save all.</p>\n</blockquote>\n<p>Â </p>\n<p>The second reason would be to load entities in other aggregates.</p>\n<blockquote>\n<p>You shouldnât need references to entities in other aggregates</p>\n</blockquote>\n<p>or at least not directly. The service calling the method on the aggregate\nwill find information needed to call the method (which can contain information\ncoming from other aggregates), but if you need a direct reference to another\nentity, itâs a clear indication that the aggregated boundary is wrong ! Put\nthat other entity in the aggregate !</p>\n<p>Â </p>\n<p>Thus once your aggregate modeling is ok, there is really no reason to use a\nrepository inside an entity.</p>","","entities and repository injection follow have still new comments and there are some stack overflow questions the subject that show the response the question still unclearâ¦ should you inject even use repositories you entities the response two fold and both the same direction you shouldnât course weâre discussing design here your specific case you find reasons more important than those invoked here thereâs always possibility decide you wishâ¦ injection and ddd patterns where talking injection and entities repositories here the first reason concerns what injection means domain driven design environement the wikipedia definition the dependency injection pattern only makes references objects components without defining explicitly which kind object which kind componentâ¦ but famous injection anti pattern can give use more information what are injected components call the service locator anti pattern this make clear that what are looking for way find service supple and configurable way wonât explain here why the service locator anti pattern but makes obvious that the use injection provide access services the code since services are supposed stateless their lifecycles are usually quite flexible service could instanciated each call each request single instance without much difference the injected service dependencies enable compose services replace implementations configuration for tests but even runtime live configuration change could indicates replace injected service next instantiation services and repositories are quite obviously not injected with entities aggregates repository here instantiate entities itâs its own job doesnât need injected with entitiesâ¦ when service needs entity can injected with repository and get the entity through but could entities injected with services repositories aggregate entity not stateless service statefull and its member fields are here maintain current state seems quite odd use those fields store references services that are obviously not part the state also links the referenced service lifecycle the lifecycle the entity itself most entities instanciation schemes web applications are per call basis and since most web application donât anything between calls the response the lifecycle problem simply that everything created and destroyed each call but only specific simplistic way consider object lifecycle what you kept your entities longer memory and reused them next call avoid roundtrips with the data storage having reference service inside entity state would make the live reconfiguration far harder achieve you would have trash all current state and reload everything there such problem with services since theyâre meant stateless entities fields are meant store state reference services their lifecycles should not coupled consistency boundary the second reason about the aggregate consistency boundary why would you typically need reference repository inside aggregate first reason would load sub entities when needed itâs also called delay load you shouldnât need delay load aggregates the reason comes from the aggregate definitions from wikipedia aggregate collection objects that are bound together root entity otherwise known aggregate root the aggregate root guarantees the consistency changes being made within the aggregate forbidding external objects from holding references its members the definition talks about object being bound together those objects entities have strong relationships grouping them aggregate makes little sense when the relation strong you will need for each aggregate method change all objects coordination none not parts your aggregate should not here aggregate needs all its state for each operation there strictly reason use delay load load all use all save all the second reason would load entities other aggregates you shouldnât need references entities other aggregates least not directly the service calling the method the aggregate will find information needed call the method which can contain information coming from other aggregates but you need direct reference another entity itâs clear indication that the aggregated boundary wrong put that other entity the aggregate thus once your aggregate modeling there really reason use repository inside entity","a:1:{s:3:\"tag\";a:1:{i:0;s:20:\"DDD Injection Design\";}}","1","0","1","1","1","0","0"
"727783","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2013-04-03 10:24:00","Europe/Paris","2013-04-03 08:24:43","2013-04-03 08:24:45","","post","xhtml","2013/04/03/Time-is-Money!-DevoxxFr","en","Time is Money! DevoxxFr","","","<p>Last week I made a big 3 hour presentation (oops I forgot the pause..) at the DevoxxFr conference.</p>  <p>&#160;</p>  <p>It was the second edition of this big Java oriented event in Paris, and a big success: 1400 attendees, 180 speakers for 160 presentations.</p>  <p>&#160;</p>  <p>Iâve seen a lot of interesting talks there and met nice people ! I can sincerely recommend it to anyone, even not fluent in Java.</p>  <p>&#160;</p>  <p>I posted <a href=\"http://fr.slideshare.net/jeremiechassaing/le-temps-cest-de-largent\" target=\"_blank\">the slides of my talk on SlideShare</a> â french only.</p>  <p>&#160;</p>  <p>Iâll post a link the the recorded video as soon as itâs available.</p>  <p>&#160;</p>  <p>The slides donât contain the details of the F# live coding of a Uno game, but it was quite similar to my <a href=\"https://github.com/thinkbeforecoding/m-r\" target=\"_blank\">SimpleCQRS F# implementation</a> on GitHub.</p>  <p>&#160;</p>  <p>Someone noticed it was a F# presentation in a JVM conference while there was no F# at the last TechEdâ¦</p>","<p>Last week I made a big 3 hour presentation (oops I forgot the pause..) at\nthe DevoxxFr conference.</p>\n<p>Â </p>\n<p>It was the second edition of this big Java oriented event in Paris, and a\nbig success: 1400 attendees, 180 speakers for 160 presentations.</p>\n<p>Â </p>\n<p>Iâve seen a lot of interesting talks there and met nice people ! I can\nsincerely recommend it to anyone, even not fluent in Java.</p>\n<p>Â </p>\n<p>I posted <a href=\"http://fr.slideshare.net/jeremiechassaing/le-temps-cest-de-largent\" target=\"_blank\">the slides of my talk on SlideShare</a> â french only.</p>\n<p>Â </p>\n<p>Iâll post a link the the recorded video as soon as itâs available.</p>\n<p>Â </p>\n<p>The slides donât contain the details of the F# live coding of a Uno game,\nbut it was quite similar to my <a href=\"https://github.com/thinkbeforecoding/m-r\" target=\"_blank\">SimpleCQRS F#\nimplementation</a> on GitHub.</p>\n<p>Â </p>\n<p>Someone noticed it was a F# presentation in a JVM conference while there was\nno F# at the last TechEdâ¦</p>","","time money devoxxfr last week made big hour presentation oops forgot the pause the devoxxfr conference was the second edition this big java oriented event paris and big success 1400 attendees 180 speakers for 160 presentations iâve seen lot interesting talks there and met nice people can sincerely recommend anyone even not fluent java posted the slides talk slideshare french only iâll post link the the recorded video soon itâs available the slides donât contain the details the live coding uno game but was quite similar simplecqrs implementation github someone noticed was presentation jvm conference while there was the last techedâ¦","a:0:{}","1","0","1","1","2","0","0"
"727925","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","57399","2013-04-04 00:09:00","Europe/Paris","2013-04-03 22:09:52","2013-04-04 12:27:48","","post","xhtml","2013/04/04/C-Static-interfaces-Take-3","en","C# Static interfaces - Take 3","","","<p>You may believe it or not, but the post that drains most of the traffic of this blog, is <a href=\"http://thinkbeforecoding.com/post/2009/10/21/CSharp-Static-interfaces\" target=\"_blank\">the one about C# static interfaces</a> !</p>\r\n<p>&nbsp;</p>\r\n<p>In october 2009, I simply tried to imagine where the idea of C# static interfaces could lead us, and, since then, I have more viewed pages (&gt; 15%) on this post than on my home page !</p>\r\n<p>&nbsp;</p>\r\n<p>And since then, nothing moved in this area in the C# langage, and I donât expect it to happen soon.</p>\r\n<p>&nbsp;</p>\r\n<p>But some other thing happenedâ¦</p>\r\n<p>&nbsp;</p>\r\n<h2>F#</h2>\r\n<p>&nbsp;</p>\r\n<p>Yes F# is out and running on <a href=\"http://fsharp.github.com/fsharpbinding/\" target=\"_blank\">almost</a> <a href=\"http://stackoverflow.com/questions/13429603/f-on-mono-for-android\" target=\"_blank\">all</a> <a href=\"https://github.com/ZachBray/FunScript\" target=\"_blank\">platforms</a>, and it can do what I described in the previous post.</p>\r\n<p>&nbsp;</p>\r\n<p>The thing is called <a href=\"http://msdn.microsoft.com/en-us/library/dd548046(VS.100).aspx\" target=\"_blank\">Statically Resolved Type Parameters</a> and is closer to C++ templates than from C# generics.</p>\r\n<p>&nbsp;</p>\r\n<p>The trick is that you can define an inline function with statically resolved types, denoted by a ^ prefix. The usage of defined methods on the type is not given here by an interface, but by a constraint on the resolved type :</p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:#569cd6;\">inline</span>&nbsp;<span style=\"color:white;\">count</span>&nbsp;(<span style=\"color:white;\">counter</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>)&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:white;\">value</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;(<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">Count</span>&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">int</span>)&nbsp;<span style=\"color:white;\">counter</span>)&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:white;\">value</span></pre>\r\n<p>here , the count function takes a counter of type ^T (statically resolved).</p>\r\n<p>The second line express that ^T actually should have a member Count of type int, and that it will call it on counter to get the result value !</p>\r\n<p>&nbsp;</p>\r\n<p>Magic !</p>\r\n<p>&nbsp;</p>\r\n<p>Now, we can call count on various types that have a Count member property like :</p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">type</span>&nbsp;<span style=\"color:white;\">FakeCounter</span>()&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:#b5cea8;\">42</span>;</pre>\r\n<p>or</p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">type</span>&nbsp;<span style=\"color:white;\">ImmutableCounter</span>(<span style=\"color:white;\">count</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">int</span>)&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">count</span>;\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Next</span>()&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">ImmutableCounter</span>(<span style=\"color:white;\">count</span>&nbsp;<span style=\"color:#b4b4b4;\">+</span>&nbsp;<span style=\"color:#b5cea8;\">1</span>)\r\n</pre>\r\n<p>or</p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">type</span>&nbsp;<span style=\"color:white;\">MutableCounter</span>(<span style=\"color:white;\">count</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">int</span>)&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:#569cd6;\">mutable</span>&nbsp;<span style=\"color:white;\">count</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:#b5cea8;\">0</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">count</span>;\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Next</span>()&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">count</span>&nbsp;<span style=\"color:#b4b4b4;\">&lt;-</span>&nbsp;<span style=\"color:white;\">count</span>&nbsp;<span style=\"color:#b4b4b4;\">+</span>&nbsp;<span style=\"color:#b5cea8;\">1</span>\r\n</pre>\r\n<p><span style=\"color: \">without needing an interface !</span></p>\r\n<p><span style=\"color: \">For instance :</span></p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:white;\">c</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">count</span>&nbsp;(<span style=\"color:#569cd6;\">new</span>&nbsp;<span style=\"color:white;\">FakeCounter</span>())\r\n</pre>\r\n<p>True, this is <strong>compile time duck typing</strong> !</p>\r\n<p>&nbsp;</p>\r\n<p>And it works with methods :</p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:#569cd6;\">inline</span>&nbsp;<span style=\"color:white;\">quack</span>&nbsp;(<span style=\"color:white;\">duck</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>)&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:white;\">value</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;(<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">Quack</span>&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">int</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;<span style=\"color:white;\">string</span>)&nbsp;(<span style=\"color:white;\">duck</span>,&nbsp;<span style=\"color:#b5cea8;\">3</span>))&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:white;\">value</span></pre>\r\n<p><span style=\"color: \">This will call a Quack method that takes int and returns string with the value 3 on any object passed to it that has a method corresponding to the constraint.</span></p>\r\n<p><span style=\"color: \">And magically enough, you can do it with static methods :</span></p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:#569cd6;\">inline</span>&nbsp;<span style=\"color:white;\">nextThenstaticCount</span>&nbsp;(<span style=\"color:white;\">counter</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>)&nbsp;<span style=\"color:#b4b4b4;\">=</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">Next</span>&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">unit</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;<span style=\"color:white;\">unit</span>)&nbsp;<span style=\"color:white;\">counter</span>)\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:white;\">value</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;(<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">static</span>&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;<span style=\"color:white;\">Count</span>&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:white;\">int</span>)&nbsp;())&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:white;\">value</span>\r\n</pre>\r\n<p><span style=\"color: \">this function calls an instance method called Next, then gets the value of a static property called Count and returns the value !</span></p>\r\n<p><span style=\"color: \">It also works with operators :</span></p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:#569cd6;\">let</span>&nbsp;<span style=\"color:#569cd6;\">inline</span>&nbsp;<span style=\"color:white;\">mac</span>&nbsp;<span style=\"color:white;\">acc</span>&nbsp;<span style=\"color:white;\">x</span>&nbsp;<span style=\"color:white;\">y</span>&nbsp;<span style=\"color:#b4b4b4;\">=</span>&nbsp;<span style=\"color:white;\">acc</span>&nbsp;<span style=\"color:#b4b4b4;\">+</span>&nbsp;<span style=\"color:white;\">x</span>&nbsp;<span style=\"color:#b4b4b4;\">*</span>&nbsp;<span style=\"color:white;\">y</span>\r\n</pre>\r\n<p><span style=\"color: \">notice the signature of this function :</span></p>\r\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\"><span style=\"color:white;\">acc</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;<span style=\"color:white;\">x</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;<span style=\"color:white;\">y</span><span style=\"color:#b4b4b4;\">:</span>&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">e</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#569cd6;\">when</span>&nbsp;(&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span>&nbsp;<span style=\"color:#569cd6;\">or</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span>)&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">static</span>&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;(&nbsp;<span style=\"color:#b4b4b4;\">+</span>&nbsp;)&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span>&nbsp;<span style=\"color:#b4b4b4;\">*</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">e</span>)&nbsp;<span style=\"color:#569cd6;\">and</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span>&nbsp;<span style=\"color:#569cd6;\">or</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span>)&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;(<span style=\"color:#569cd6;\">static</span>&nbsp;<span style=\"color:#569cd6;\">member</span>&nbsp;(&nbsp;<span style=\"color:#b4b4b4;\">*</span>&nbsp;)&nbsp;<span style=\"color:#b4b4b4;\">:</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span>&nbsp;<span style=\"color:#b4b4b4;\">*</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span>&nbsp;<span style=\"color:#569cd6;\">-&gt;</span>&nbsp;&nbsp;<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span>)</pre>\r\n<p>It accepts any types as long as they provide expected + and * operators.</p>\r\n<p>&nbsp;</p>\r\n<p>The only thing is that a specific implementation of the function will be compiled for each type on which itâs called. Thatâs why it called statically resolved.</p>\r\n<p>&nbsp;</p>\r\n<p>You can use this kind of method from F# code but not from C#.</p>\r\n<p>&nbsp;</p>\r\n<p>Anywayâ¦</p>\r\n<blockquote>\r\n<p>No need for static interfaces in C#, use F# !</p>\r\n</blockquote>","<p>You may believe it or not, but the post that drains most of the traffic of\nthis blog, is <a href=\"http://thinkbeforecoding.com/post/2009/10/21/CSharp-Static-interfaces\" target=\"_blank\">the one about C# static interfaces</a> !</p>\n<p>Â </p>\n<p>In october 2009, I simply tried to imagine where the idea of C# static\ninterfaces could lead us, and, since then, I have more viewed pages (&gt; 15%)\non this post than on my home page !</p>\n<p>Â </p>\n<p>And since then, nothing moved in this area in the C# langage, and I donât\nexpect it to happen soon.</p>\n<p>Â </p>\n<p>But some other thing happenedâ¦</p>\n<p>Â </p>\n<h2>F#</h2>\n<p>Â </p>\n<p>Yes F# is out and running on <a href=\"http://fsharp.github.com/fsharpbinding/\" target=\"_blank\">almost</a> <a href=\"http://stackoverflow.com/questions/13429603/f-on-mono-for-android\" target=\"_blank\">all</a> <a href=\"https://github.com/ZachBray/FunScript\" target=\"_blank\">platforms</a>, and it can do what I described in the previous\npost.</p>\n<p>Â </p>\n<p>The thing is called <a href=\"http://msdn.microsoft.com/en-us/library/dd548046(VS.100).aspx\" target=\"_blank\">Statically Resolved Type Parameters</a> and is closer to C++ templates\nthan from C# generics.</p>\n<p>Â </p>\n<p>The trick is that you can define an inline function with statically resolved\ntypes, denoted by a ^ prefix. The usage of defined methods on the type is not\ngiven here by an interface, but by a constraint on the resolved type :</p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">let</span> <span style=\"color:#569cd6;\">inline</span> <span style=\"color:white;\">count</span> (<span style=\"color:white;\">counter</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>) <span style=\"color:#b4b4b4;\">=</span>\n    <span style=\"color:#569cd6;\">let</span> <span style=\"color:white;\">value</span> <span style=\"color:#b4b4b4;\">=</span> (<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">Count</span> <span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">int</span>) <span style=\"color:white;\">counter</span>) \n    <span style=\"color:white;\">value</span>\n</pre>\n<p>here , the count function takes a counter of type ^T (statically\nresolved).</p>\n<p>The second line express that ^T actually should have a member Count of type\nint, and that it will call it on counter to get the result value !</p>\n<p>Â </p>\n<p>Magic !</p>\n<p>Â </p>\n<p>Now, we can call count on various types that have a Count member property\nlike :</p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">type</span> <span style=\"color:white;\">FakeCounter</span>() <span style=\"color:#b4b4b4;\">=</span>\n    <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:#b5cea8;\">42</span>;\n</pre>\n<p>or</p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">type</span> <span style=\"color:white;\">ImmutableCounter</span>(<span style=\"color:white;\">count</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">int</span>) <span style=\"color:#b4b4b4;\">=</span>\n    <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">count</span>;\n    <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Next</span>() <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">ImmutableCounter</span>(<span style=\"color:white;\">count</span> <span style=\"color:#b4b4b4;\">+</span> <span style=\"color:#b5cea8;\">1</span>)\n</pre>\n<p>or</p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">type</span> <span style=\"color:white;\">MutableCounter</span>(<span style=\"color:white;\">count</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">int</span>) <span style=\"color:#b4b4b4;\">=</span>\n    <span style=\"color:#569cd6;\">let</span> <span style=\"color:#569cd6;\">mutable</span> <span style=\"color:white;\">count</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:#b5cea8;\">0</span>\n    <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Count</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">count</span>;\n    <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">this</span><span style=\"color:#b4b4b4;\">.</span><span style=\"color:white;\">Next</span>() <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">count</span> <span style=\"color:#b4b4b4;\">&lt;-</span> <span style=\"color:white;\">count</span> <span style=\"color:#b4b4b4;\">+</span> <span style=\"color:#b5cea8;\">1</span>\n</pre>\n<p><span style=\"color:\">without needing an interface !</span></p>\n<p><span style=\"color:\">For instance :</span></p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">let</span> <span style=\"color:white;\">c</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">count</span> (<span style=\"color:#569cd6;\">new</span> <span style=\"color:white;\">FakeCounter</span>())\n</pre>\n<p>True, this is <strong>compile time duck typing</strong> !</p>\n<p>Â </p>\n<p>And it works with methods :</p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">let</span> <span style=\"color:#569cd6;\">inline</span> <span style=\"color:white;\">quack</span> (<span style=\"color:white;\">duck</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>) <span style=\"color:#b4b4b4;\">=</span>\n    <span style=\"color:#569cd6;\">let</span> <span style=\"color:white;\">value</span> <span style=\"color:#b4b4b4;\">=</span> (<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">Quack</span> <span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">int</span> <span style=\"color:#569cd6;\">-&gt;</span> <span style=\"color:white;\">string</span>) (<span style=\"color:white;\">duck</span>, <span style=\"color:#b5cea8;\">3</span>))  \n    <span style=\"color:white;\">value</span>\n</pre>\n<p><span style=\"color:\">This will call a Quack method that takes int and\nreturns string with the value 3 on any object passed to it that has a method\ncorresponding to the constraint.</span></p>\n<p><span style=\"color:\">And magically enough, you can do it with static methods\n:</span></p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">let</span> <span style=\"color:#569cd6;\">inline</span> <span style=\"color:white;\">nextThenstaticCount</span> (<span style=\"color:white;\">counter</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span>) <span style=\"color:#b4b4b4;\">=</span>\n    (<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">Next</span> <span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">unit</span> <span style=\"color:#569cd6;\">-&gt;</span> <span style=\"color:white;\">unit</span>) <span style=\"color:white;\">counter</span>)\n    <span style=\"color:#569cd6;\">let</span> <span style=\"color:white;\">value</span> <span style=\"color:#b4b4b4;\">=</span> (<span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">T</span><span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">static</span> <span style=\"color:#569cd6;\">member</span> <span style=\"color:white;\">Count</span> <span style=\"color:#b4b4b4;\">:</span> <span style=\"color:white;\">int</span>) ()) \n    <span style=\"color:white;\">value</span>\n</pre>\n<p><span style=\"color:\">this function calls an instance method called Next,\nthen gets the value of a static property called Count and returns the value\n!</span></p>\n<p><span style=\"color:\">It also works with operators :</span></p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:#569cd6;\">let</span> <span style=\"color:#569cd6;\">inline</span> <span style=\"color:white;\">mac</span> <span style=\"color:white;\">acc</span> <span style=\"color:white;\">x</span> <span style=\"color:white;\">y</span> <span style=\"color:#b4b4b4;\">=</span> <span style=\"color:white;\">acc</span> <span style=\"color:#b4b4b4;\">+</span> <span style=\"color:white;\">x</span> <span style=\"color:#b4b4b4;\">*</span> <span style=\"color:white;\">y</span>\n</pre>\n<p><span style=\"color:\">notice the signature of this function :</span></p>\n<pre style=\"font-family:Consolas;font-size:13;color:#dadada;background:#1e1e1e;\">\n<span style=\"color:white;\">acc</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span> <span style=\"color:#569cd6;\">-&gt;</span> <span style=\"color:white;\">x</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span> <span style=\"color:#569cd6;\">-&gt;</span> <span style=\"color:white;\">y</span><span style=\"color:#b4b4b4;\">:</span> <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span> <span style=\"color:#569cd6;\">-&gt;</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">e</span>\n    <span style=\"color:#569cd6;\">when</span> ( <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span> <span style=\"color:#569cd6;\">or</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span>) <span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">static</span> <span style=\"color:#569cd6;\">member</span> ( <span style=\"color:#b4b4b4;\">+</span> ) <span style=\"color:#b4b4b4;\">:</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">a</span> <span style=\"color:#b4b4b4;\">*</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span> <span style=\"color:#569cd6;\">-&gt;</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">e</span>) <span style=\"color:#569cd6;\">and</span>\n         ( <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span> <span style=\"color:#569cd6;\">or</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span>) <span style=\"color:#b4b4b4;\">:</span> (<span style=\"color:#569cd6;\">static</span> <span style=\"color:#569cd6;\">member</span> ( <span style=\"color:#b4b4b4;\">*</span> ) <span style=\"color:#b4b4b4;\">:</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">c</span> <span style=\"color:#b4b4b4;\">*</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">d</span> <span style=\"color:#569cd6;\">-&gt;</span>  <span style=\"color:#b4b4b4;\">^</span><span style=\"color:white;\">b</span>)\n</pre>\n<p>It accepts any types as long as they provide expected + and * operators.</p>\n<p>Â </p>\n<p>The only thing is that a specific implementation of the function will be\ncompiled for each type on which itâs called. Thatâs why it called statically\nresolved.</p>\n<p>Â </p>\n<p>You can use this kind of method from F# code but not from C#.</p>\n<p>Â </p>\n<p>Anywayâ¦</p>\n<blockquote>\n<p>No need for static interfaces in C#, use F# !</p>\n</blockquote>","","static interfaces take you may believe not but the post that drains most the traffic this blog the one about static interfaces october 2009 simply tried imagine where the idea static interfaces could lead and since then have more viewed pages this post than home page and since then nothing moved this area the langage and donât expect happen soon but some other thing happenedâ¦ yes out and running almost all platforms and can what described the previous post the thing called statically resolved type parameters and closer templates than from generics the trick that you can define inline function with statically resolved types denoted prefix the usage defined methods the type not given here interface but constraint the resolved type let inline count counter let value member count int counter value here the count function takes counter type statically resolved the second line express that actually should have member count type int and that will call counter get the result value magic now can call count various types that have count member property like type fakecounter member this count type immutablecounter count int member this count count member this next immutablecounter count type mutablecounter count int let mutable count member this count count member this next count count without needing interface for instance let count new fakecounter true this compile time duck typing and works with methods let inline quack duck let value member quack int string duck value this will call quack method that takes int and returns string with the value any object passed that has method corresponding the constraint and magically enough you can with static methods let inline nextthenstaticcount counter member next unit unit counter let value static member count int value this function calls instance method called next then gets the value static property called count and returns the value also works with operators let inline mac acc acc notice the signature this function acc when static member and static member accepts any types long they provide expected and operators the only thing that specific implementation the function will compiled for each type which itâs called thatâs why called statically resolved you can use this kind method from code but not from anywayâ¦ need for static interfaces use","a:1:{s:3:\"tag\";a:3:{i:0;s:17:\"Static interfaces\";i:1;s:6:\"FSharp\";i:2;s:1:\"F\";}}","1","0","1","1","0","0","0"
"728018","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","57399","2013-04-04 14:37:00","Europe/Paris","2013-04-04 12:37:56","2013-04-04 12:42:41","","post","xhtml","2013/04/04/C-Static-interfaces-ndash;-Take-3","en","C# Static interfaces - Take 3 - redirect","","","<p><a href=\"/post/2013/04/04/C-Static-interfaces-Take-3\">The actual post has been moved to a new address</a></p>","<p><a href=\"/post/2013/04/04/C-Static-interfaces-Take-3\">The actual post has\nbeen moved to a new address</a></p>","","static interfaces take redirect the actual post has been moved new address","a:0:{}","1","0","1","1","0","0","0"
"743879","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","58546","2013-07-28 01:00:00","Europe/Paris","2013-07-27 23:00:11","2013-07-28 22:18:56","","post","xhtml","2013/07/28/Event-Sourcing-vs-Command-Sourcing","en","Event Sourcing vs Command Sourcing","","","<p>Last month, I made a presentation about Event Sourcing - a shorter version of my DevoxxFr talk. After me, Etienne and Maher from Sfeir, did a presentation on the same subject and their architecture inspired by LMAX.</p>\r\n<p>I immediately noticed their reference to this <a href=\"http://www.martinfowler.com/eaaDev/EventSourcing.html\">Event Sourcing page by Martin Fowler</a>, and started to see several point of pain lurking in their long term maintenanceâ¦</p>\r\n<p>I wonât make a flaming post against Martin Fowler that has written lots of interesting stuff. Even this article says nothing wrong. It just takes a way that can cause long term pains as expressed in the page itselfâ¦</p>\r\n<h3>Sourcing Events, but which Events ?</h3>\r\n<p>The article starts with a totally valid definition of Event Sourcing:</p>\r\n<blockquote>\r\n<p><em>Capture all changes to an application state as a sequence of events.</em></p>\r\n</blockquote>  <p>The question then isâ¦ where do these events come from ?</p>\r\n<blockquote>\r\n<p>In this case when the service is called, it finds the relevant ship and updates its location. The ship objects record the current known state of the ships.      <br />Introducing Event Sourcing adds a step to this process. Now the service creates an event object to record the change and processes it to update the ship.</p>\r\n</blockquote>\r\n<p> A C# sample a bit further to make it clearer:</p>\r\n<pre class=\"code\">class EventProcessor...\r\nIList log = new ArrayList();\r\npublic void Process(DomainEvent e) {\r\ne.Process();\r\nlog.Add(e);\r\n}\r\n</pre>\r\n<p>As you can notice, the Event is produced before reaching the event processorâ¦</p>\r\n<p>Constrast this with the following version:</p>\r\n<pre class=\"code\">class Cargo\r\n{\r\nIList log = new List<event>();\r\nprivate State currentState;\r\npublic Cargo(IEnumberable<event> events)\r\n{\r\nforeach(var @event in events)\r\nApply((dynamic) @event);\r\n}\r\npublic void Arrive(Port port)\r\n{\r\n// logic to verify the action can be done\r\n// based on current state and command parameters\r\nif (IsAlreadyInPort) throw Exception();\r\n// create an event of what happened with this action\r\n// it should not mutate state,\r\n// but it can capture external state when it arrives\r\n// it's also based on current state and command parameters\r\nvar @event = new ShipArrived(id, port, DateTime.Now)\r\n// apply change du to the event\r\n// it should require only current state and\r\nApply(@event);\r\nlog.Add(@event);\r\n// events will be published to the rest of the system\r\n// from there.. This is where further side effect will\r\n// occure\r\n}\r\nprivate void Apply(ShipArrived @event)\r\n{\r\n// no decision should happen here !\r\ncurrentState.Port = @event.Port;\r\ncurrentstate.LastMove = @event.Time;\r\n}\r\n}\r\n</event></event></pre>\r\n<p>From a functional point of view this pattern can be build from two pure functions:</p>\r\n<pre class=\"code\">Decide:\r\nCommand -&gt; State -&gt; Event list\r\nApplyStateChange:\r\nState -&gt; Event -&gt; State\r\n</pre>\r\n<p>Here, stored event has been produced by the aggregate itself ! The output is stored.</p>\r\n<h3>Nice, but why should I care ?</h3>\r\n<p>After all, since Martin says the first version is okâ¦ letâs go !</p>\r\n<p>This would be without noticing several warnings in the rest of the article.</p>\r\n<h3>External Systems</h3>\r\n<p>from the same page:</p>\r\n<blockquote>\r\n<p>One of the tricky elements to Event Sourcing is how to deal with external systems that don't follow this approach (and most don't). You get problems when you are sending modifier messages to external systems and when you are receiving queries from other systems.</p>\r\n<p>Many of the advantages of Event Sourcing stem from the ability to replay events at will, but if these events cause update messages to be sent to external systems, then things will go wrong because those external systems don't know the difference between real processing and replays.</p>\r\n</blockquote>  <p>The second version doesnât suffer this problemâ¦</p>\r\n<p>Because rebuilding the state (like done in the constructor) only use the Apply method (or the ApplyStateChange function in the functional version)..</p>\r\n<p>This Apply method only works with internal state and produces no external side effects..</p>\r\n<h3>External Queries</h3>\r\n<p>Another problem arising with Martin Fowlerâs proposal:</p>\r\n<blockquote>\r\n<p>The primary problem with external queries is that the data that they return has an effect on the results on handling an event. If I ask for an exchange rate on December 5th and replay that event on December 20th, I will need the exchange rate on Dec 5 not the later one.</p>\r\n</blockquote>  <p>Here again, the second version doesnât suffer the problem..</p>\r\n<p>The data from the external system will be used to build the event. It can be directly stored in it (like the current time in the sample), but can also be used in a computation. For instance, command contains prices in USD, query an current rate from USD to EUR, compute a price in EUR and put it in the event.   <br />The rate at the time of the computation is baked in the event ! No need to remember the rate value afterward, especially no need to complex external system gateway.</p>\r\n<p>It could still be better for debugging purpose to put the used rate explicitly in the event.</p>\r\n<p>But the second version intrinsically handles this issue gracefullyâ¦</p>\r\n<p>   <h3>     <p>External Interactions</p>\r\n</h3>\r\n<blockquote>\r\n<p>Both queries and updates to external systems cause a lot of complication with Event Sourcing. You get the worst of both with interactions that involve both. Such an interaction might be a an external call that both returns a result (a query) but also causes a state change to the external system, such as submitting an order for delivery that return delivery information on that order.&nbsp; </p>\r\n</blockquote>  <p>Problem solved by version 2â¦.</p>\r\n<h3>Code Changes</h3>\r\n<blockquote>\r\n<p>So this discussion has made the assumption that the application processing the events stays the same. Clearly that's not going to be the case. Events handle changes to data, what about changes to code?     <br />[â¦]      <br />The third case is where the logic itself changes over time, a rule along the lines of \"charge $10 before November 18 and $15 afterwords\". This kind of stuff needs to actually go into the domain model itself. The domain model should be able to run events at any time with the correct rules for the event processing. You can do this with conditional logic, but this will get messy if you have much temporal logic. The better route is to hook strategy objects into a <a href=\"http://www.martinfowler.com/eaaDev/TemporalProperty.html\">Temporal Property</a>: something like <code>chargingRules.get(aDate).process(anEvent)</code>. Take a look at <a href=\"http://www.martinfowler.com/eaaDev/AgreementDispatcher.html\">Agreement Dispatcher</a> for this kind of style.</p>\r\n</blockquote>  <p>Woooâ¦ when I read this, itâs a red flag for me ! I never want to deal with this kind of problems !</p>\r\n<p>Especially if theyâre expected to happen for sure !</p>\r\n<p>How does it go with the second version ?</p>\r\n<p>Events are produced by the code that contains the logic. Before November 18, the events emitted where based on code that charge $10. After, the code charges $15.</p>\r\n<p>When using the Apply method, it doesnât have to know how much to charge, itâs already in saved events !</p>\r\n<p>There is no need to keep an history of versions of domain logic - except in your source control !</p>\r\n<p>It can even cop with changes far more complex that the one in this sample. In any case, all data needed to compute current state has been put in the event.</p>\r\n<h3>Correcting logic bugs</h3>\r\n<p>One of the advantages advanced by Martin Fowler, is that you can change how you take the decision after the fact.</p>\r\n<p>But if an event is an event, it already happened, and thereâs no way we can go back in time to change it. We wont be able to change external side effects anyway, so just accept it.</p>\r\n<p>Itâs still possible to apply compensationsâ¦ like accountants. When they charged you to much, they donât use a time machine to make has if nothing happened.. the just add a chargeback entry at the end of the ledger.</p>\r\n<h3>Command Sourcing ?</h3>\r\n<p>I call the pattern proposed by Martin Fowler Command Sourcing. </p>\r\n<p>A Command is a request made to the system to do something. At this point a lot of thing can still happen. It can fail, it can be influenced by external state..</p>\r\n<p>An event is something that happen and that cannot be changed.</p>\r\n<p>You can protest that an Arrival Event is an event, not a command.</p>\r\n<p>Sure, but for the system itâs an <strong>upstream event</strong>. Not something that happened in the system.</p>\r\n<p>Whereâs the difference in the second verions ?</p>\r\n<p>The upstream version will go to a reactor that will produce an Arrive command (notice the present tense) inside the system.   <br />The system will then produce a ShipArrived event (notice the passed tense). This event has been emitted by the system itself.</p>\r\n<p>The Martin Fowlerâs version takes a shortcut: bypassing the reactor emitting a command, but it is equivalent to sourcing commands.</p>\r\n<h3>Martin, this is a call to action !</h3>\r\n<p>Since a lot of people have read, and will read the entry on your web site, can you add something about the pattern described here to reduce the pain of people that will want to start with Event Sourcing ?</p>","<p>Last month, I made a presentation about Event Sourcing - a shorter version\nof my DevoxxFr talk. After me, Etienne and Maher from Sfeir, did a presentation\non the same subject and their architecture inspired by LMAX.</p>\n<p>I immediately noticed their reference to this <a href=\"http://www.martinfowler.com/eaaDev/EventSourcing.html\">Event Sourcing page by\nMartin Fowler</a>, and started to see several point of pain lurking in their\nlong term maintenanceâ¦</p>\n<p>I wonât make a flaming post against Martin Fowler that has written lots of\ninteresting stuff. Even this article says nothing wrong. It just takes a way\nthat can cause long term pains as expressed in the page itselfâ¦</p>\n<h3>Sourcing Events, but which Events ?</h3>\n<p>The article starts with a totally valid definition of Event Sourcing:</p>\n<blockquote>\n<p><em>Capture all changes to an application state as a sequence of\nevents.</em></p>\n</blockquote>\n<p>The question then isâ¦ where do these events come from ?</p>\n<blockquote>\n<p>In this case when the service is called, it finds the relevant ship and\nupdates its location. The ship objects record the current known state of the\nships.<br />\nIntroducing Event Sourcing adds a step to this process. Now the service creates\nan event object to record the change and processes it to update the ship.</p>\n</blockquote>\n<p>A C# sample a bit further to make it clearer:</p>\n<pre class=\"code\">\nclass EventProcessor...\nIList log = new ArrayList();\npublic void Process(DomainEvent e) {\ne.Process();\nlog.Add(e);\n}\n</pre>\n<p>As you can notice, the Event is produced before reaching the event\nprocessorâ¦</p>\n<p>Constrast this with the following version:</p>\n<pre class=\"code\">\nclass Cargo\n{\nIList log = new List();\nprivate State currentState;\npublic Cargo(IEnumberable events)\n{\nforeach(var @event in events)\nApply((dynamic) @event);\n}\npublic void Arrive(Port port)\n{\n// logic to verify the action can be done\n// based on current state and command parameters\nif (IsAlreadyInPort) throw Exception();\n// create an event of what happened with this action\n// it should not mutate state,\n// but it can capture external state when it arrives\n// it's also based on current state and command parameters\nvar @event = new ShipArrived(id, port, DateTime.Now)\n// apply change du to the event\n// it should require only current state and\nApply(@event);\nlog.Add(@event);\n// events will be published to the rest of the system\n// from there.. This is where further side effect will\n// occure\n}\nprivate void Apply(ShipArrived @event)\n{\n// no decision should happen here !\ncurrentState.Port = @event.Port;\ncurrentstate.LastMove = @event.Time;\n}\n}\n</pre>\n<p>From a functional point of view this pattern can be build from two pure\nfunctions:</p>\n<pre class=\"code\">\nDecide:\nCommand -&gt; State -&gt; Event list\nApplyStateChange:\nState -&gt; Event -&gt; State\n</pre>\n<p>Here, stored event has been produced by the aggregate itself ! The output is\nstored.</p>\n<h3>Nice, but why should I care ?</h3>\n<p>After all, since Martin says the first version is okâ¦ letâs go !</p>\n<p>This would be without noticing several warnings in the rest of the\narticle.</p>\n<h3>External Systems</h3>\n<p>from the same page:</p>\n<blockquote>\n<p>One of the tricky elements to Event Sourcing is how to deal with external\nsystems that don't follow this approach (and most don't). You get problems when\nyou are sending modifier messages to external systems and when you are\nreceiving queries from other systems.</p>\n<p>Many of the advantages of Event Sourcing stem from the ability to replay\nevents at will, but if these events cause update messages to be sent to\nexternal systems, then things will go wrong because those external systems\ndon't know the difference between real processing and replays.</p>\n</blockquote>\n<p>The second version doesnât suffer this problemâ¦</p>\n<p>Because rebuilding the state (like done in the constructor) only use the\nApply method (or the ApplyStateChange function in the functional version)..</p>\n<p>This Apply method only works with internal state and produces no external\nside effects..</p>\n<h3>External Queries</h3>\n<p>Another problem arising with Martin Fowlerâs proposal:</p>\n<blockquote>\n<p>The primary problem with external queries is that the data that they return\nhas an effect on the results on handling an event. If I ask for an exchange\nrate on December 5th and replay that event on December 20th, I will need the\nexchange rate on Dec 5 not the later one.</p>\n</blockquote>\n<p>Here again, the second version doesnât suffer the problem..</p>\n<p>The data from the external system will be used to build the event. It can be\ndirectly stored in it (like the current time in the sample), but can also be\nused in a computation. For instance, command contains prices in USD, query an\ncurrent rate from USD to EUR, compute a price in EUR and put it in the\nevent.<br />\nThe rate at the time of the computation is baked in the event ! No need to\nremember the rate value afterward, especially no need to complex external\nsystem gateway.</p>\n<p>It could still be better for debugging purpose to put the used rate\nexplicitly in the event.</p>\n<p>But the second version intrinsically handles this issue gracefullyâ¦</p>\n<p>External Interactions</p>\n<blockquote>\n<p>Both queries and updates to external systems cause a lot of complication\nwith Event Sourcing. You get the worst of both with interactions that involve\nboth. Such an interaction might be a an external call that both returns a\nresult (a query) but also causes a state change to the external system, such as\nsubmitting an order for delivery that return delivery information on that\norder.Â </p>\n</blockquote>\n<p>Problem solved by version 2â¦.</p>\n<h3>Code Changes</h3>\n<blockquote>\n<p>So this discussion has made the assumption that the application processing\nthe events stays the same. Clearly that's not going to be the case. Events\nhandle changes to data, what about changes to code?<br />\n[â¦]<br />\nThe third case is where the logic itself changes over time, a rule along the\nlines of &quot;charge $10 before November 18 and $15 afterwords&quot;. This kind of stuff\nneeds to actually go into the domain model itself. The domain model should be\nable to run events at any time with the correct rules for the event processing.\nYou can do this with conditional logic, but this will get messy if you have\nmuch temporal logic. The better route is to hook strategy objects into a\n<a href=\"http://www.martinfowler.com/eaaDev/TemporalProperty.html\">Temporal\nProperty</a>: something like\n<code>chargingRules.get(aDate).process(anEvent)</code>. Take a look at <a href=\"http://www.martinfowler.com/eaaDev/AgreementDispatcher.html\">Agreement\nDispatcher</a> for this kind of style.</p>\n</blockquote>\n<p>Woooâ¦ when I read this, itâs a red flag for me ! I never want to deal with\nthis kind of problems !</p>\n<p>Especially if theyâre expected to happen for sure !</p>\n<p>How does it go with the second version ?</p>\n<p>Events are produced by the code that contains the logic. Before November 18,\nthe events emitted where based on code that charge $10. After, the code charges\n$15.</p>\n<p>When using the Apply method, it doesnât have to know how much to charge,\nitâs already in saved events !</p>\n<p>There is no need to keep an history of versions of domain logic - except in\nyour source control !</p>\n<p>It can even cop with changes far more complex that the one in this sample.\nIn any case, all data needed to compute current state has been put in the\nevent.</p>\n<h3>Correcting logic bugs</h3>\n<p>One of the advantages advanced by Martin Fowler, is that you can change how\nyou take the decision after the fact.</p>\n<p>But if an event is an event, it already happened, and thereâs no way we can\ngo back in time to change it. We wont be able to change external side effects\nanyway, so just accept it.</p>\n<p>Itâs still possible to apply compensationsâ¦ like accountants. When they\ncharged you to much, they donât use a time machine to make has if nothing\nhappened.. the just add a chargeback entry at the end of the ledger.</p>\n<h3>Command Sourcing ?</h3>\n<p>I call the pattern proposed by Martin Fowler Command Sourcing.</p>\n<p>A Command is a request made to the system to do something. At this point a\nlot of thing can still happen. It can fail, it can be influenced by external\nstate..</p>\n<p>An event is something that happen and that cannot be changed.</p>\n<p>You can protest that an Arrival Event is an event, not a command.</p>\n<p>Sure, but for the system itâs an <strong>upstream event</strong>. Not\nsomething that happened in the system.</p>\n<p>Whereâs the difference in the second verions ?</p>\n<p>The upstream version will go to a reactor that will produce an Arrive\ncommand (notice the present tense) inside the system.<br />\nThe system will then produce a ShipArrived event (notice the passed tense).\nThis event has been emitted by the system itself.</p>\n<p>The Martin Fowlerâs version takes a shortcut: bypassing the reactor emitting\na command, but it is equivalent to sourcing commands.</p>\n<h3>Martin, this is a call to action !</h3>\n<p>Since a lot of people have read, and will read the entry on your web site,\ncan you add something about the pattern described here to reduce the pain of\npeople that will want to start with Event Sourcing ?</p>","","event sourcing command sourcing last month made presentation about event sourcing shorter version devoxxfr talk after etienne and maher from sfeir did presentation the same subject and their architecture inspired lmax immediately noticed their reference this event sourcing page martin fowler and started see several point pain lurking their long term maintenanceâ¦ wonât make flaming post against martin fowler that has written lots interesting stuff even this article says nothing wrong just takes way that can cause long term pains expressed the page itselfâ¦ sourcing events but which events the article starts with totally valid definition event sourcing capture all changes application state sequence events the question then isâ¦ where these events come from this case when the service called finds the relevant ship and updates its location the ship objects record the current known state the ships introducing event sourcing adds step this process now the service creates event object record the change and processes update the ship sample bit further make clearer class eventprocessor ilist log new arraylist public void process domainevent process log add you can notice the event produced before reaching the event processorâ¦ constrast this with the following version class cargo ilist log new list private state currentstate public cargo ienumberable events foreach var event events apply dynamic event public void arrive port port logic verify the action can done based current state and command parameters isalreadyinport throw exception create event what happened with this action should not mutate state but can capture external state when arrives also based current state and command parameters var event new shiparrived port datetime now apply change the event should require only current state and apply event log add event events will published the rest the system from there this where further side effect will occure private void apply shiparrived event decision should happen here currentstate port event port currentstate lastmove event time from functional point view this pattern can build from two pure functions decide command state event list applystatechange state event state here stored event has been produced the aggregate itself the output stored nice but why should care after all since martin says the first version okâ¦ letâs this would without noticing several warnings the rest the article external systems from the same page one the tricky elements event sourcing how deal with external systems that don follow this approach and most don you get problems when you are sending modifier messages external systems and when you are receiving queries from other systems many the advantages event sourcing stem from the ability replay events will but these events cause update messages sent external systems then things will wrong because those external systems don know the difference between real processing and replays the second version doesnât suffer this problemâ¦ because rebuilding the state like done the constructor only use the apply method the applystatechange function the functional version this apply method only works with internal state and produces external side effects external queries another problem arising with martin fowlerâs proposal the primary problem with external queries that the data that they return has effect the results handling event ask for exchange rate december 5th and replay that event december 20th will need the exchange rate dec not the later one here again the second version doesnât suffer the problem the data from the external system will used build the event can directly stored like the current time the sample but can also used computation for instance command contains prices usd query current rate from usd eur compute price eur and put the event the rate the time the computation baked the event need remember the rate value afterward especially need complex external system gateway could still better for debugging purpose put the used rate explicitly the event but the second version intrinsically handles this issue gracefullyâ¦ external interactions both queries and updates external systems cause lot complication with event sourcing you get the worst both with interactions that involve both such interaction might external call that both returns result query but also causes state change the external system such submitting order for delivery that return delivery information that order problem solved version code changes this discussion has made the assumption that the application processing the events stays the same clearly that not going the case events handle changes data what about changes code the third case where the logic itself changes over time rule along the lines quot charge before november and afterwords quot this kind stuff needs actually into the domain model itself the domain model should able run events any time with the correct rules for the event processing you can this with conditional logic but this will get messy you have much temporal logic the better route hook strategy objects into temporal property something like chargingrules get adate process anevent take look agreement dispatcher for this kind style woooâ¦ when read this itâs red flag for never want deal with this kind problems especially theyâre expected happen for sure how does with the second version events are produced the code that contains the logic before november the events emitted where based code that charge after the code charges when using the apply method doesnât have know how much charge itâs already saved events there need keep history versions domain logic except your source control can even cop with changes far more complex that the one this sample any case all data needed compute current state has been put the event correcting logic bugs one the advantages advanced martin fowler that you can change how you take the decision after the fact but event event already happened and thereâs way can back time change wont able change external side effects anyway just accept itâs still possible apply compensationsâ¦ like accountants when they charged you much they donât use time machine make has nothing happened the just add chargeback entry the end the ledger command sourcing call the pattern proposed martin fowler command sourcing command request made the system something this point lot thing can still happen can fail can influenced external state event something that happen and that cannot changed you can protest that arrival event event not command sure but for the system itâs upstream event not something that happened the system whereâs the difference the second verions the upstream version will reactor that will produce arrive command notice the present tense inside the system the system will then produce shiparrived event notice the passed tense this event has been emitted the system itself the martin fowlerâs version takes shortcut bypassing the reactor emitting command but equivalent sourcing commands martin this call action since lot people have read and will read the entry your web site can you add something about the pattern described here reduce the pain people that will want start with event sourcing","a:1:{s:3:\"tag\";a:4:{i:0;s:6:\"Design\";i:1;s:13:\"Martin Fowler\";i:2;s:14:\"Event Sourcing\";i:3;s:4:\"CQRS\";}}","1","1","1","1","8","0","0"
"743944","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","30635","2013-07-29 00:12:00","Europe/Paris","2013-07-28 22:12:13","2013-07-28 22:18:32","","post","xhtml","2013/07/29/Command-Events-and-Context","en","Command Events and Context","","","<p>A remark by <a href=\"https://twitter.com/serialseb\" target=\"_blank\">@serialseb</a> after <a href=\"http://thinkbeforecoding.com/post/2013/07/28/Event-Sourcing-vs-Command-Sourcing\" target=\"_blank\">my previous post</a> :</p>\r\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/thinkb4coding\">@thinkb4coding</a> <a href=\"https://twitter.com/ashic\">@ashic</a> <a href=\"https://twitter.com/cduhard\">@cduhard</a> <a href=\"https://twitter.com/abdullin\">@abdullin</a> <a href=\"https://twitter.com/martinfowler\">@martinfowler</a> I refuse there is a useful differentiation between commands and events.</p>&mdash; serialseb (@serialseb) <a href=\"https://twitter.com/serialseb/statuses/361444940384976896\">July 28, 2013</a></blockquote>\r\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n<p>&nbsp;</p>\r\n<blockquote class=\"twitter-tweet\"><p><a href=\"https://twitter.com/thinkb4coding\">@thinkb4coding</a> <a href=\"https://twitter.com/ashic\">@ashic</a> <a href=\"https://twitter.com/cduhard\">@cduhard</a> <a href=\"https://twitter.com/abdullin\">@abdullin</a> <a href=\"https://twitter.com/martinfowler\">@martinfowler</a> BV I&#39;ve not seen value in the distinction on systems I worked on. Academic at best</p>&mdash; serialseb (@serialseb) <a href=\"https://twitter.com/serialseb/statuses/361445929091481600\">July 28, 2013</a></blockquote>\r\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n<p>First, here is some the distinction between a Command and an Event.</p>\r\n<p>A command express what you want to do. Usually expressed with a verb in the present tense:   <br />WithdrawMoney</p>\r\n<p>A event express what actually happened. Usually expressed with a verb in the past tense;   <br />MoneyWithdrawn</p>\r\n<p>As you can anticipate, what you request is not always what actually happens:   <br />WithdrawMoney($100000000)</p>\r\n<h3>A Command is still an Event ?</h3>\r\n<p>Letâs go a bit meta.</p>\r\n<p>The fact that you decide you want to do something is something that happens in time. So it can also be considered as an event !</p>\r\n<p>Trueâ¦ but whatâs the usefulness of this ?</p>\r\n<p>Someone who would like to study the correlation between your desires and their realizations will model both as events..</p>\r\n<p>This can be the same in a tracking context. Track both causes and effects..</p>\r\n<h3>Should we just ignore the distinction then ?</h3>\r\n<p>Surely not !</p>\r\n<p>Itâs here again a matter of context. Of Bounded Context.</p>\r\n<p>Letâs take a sample with different kind of concepts, Value Object and Entities, to highlight how the same thing can take different modeling forms in different contexts:</p>\r\n<p>Money is usually modeled as a Value Object, which implies equality by Value. I give you $10 you give me $10, weâre even, even if I give you a bill and you give me some coins.</p>\r\n<p>In the context of fraud tracking, this can be very different. Bills have a tracking number, and you can model it as entity.</p>\r\n<p>If you make both context work together youâll go through an Anti Corruption Layer for context mapping. Youâll not model all your accounting with entities for money because some other context models it this way !</p>\r\n<p>In the case of Command and Events, some contexts can be interested in the fact that a decision was made, so this will be modeled as an event. But in the context where this decision happens, the decision is different from the actual outcome, and not being clear about this difference can lead to several issues..</p>\r\n<p>For example if you model a withdrawal with&nbsp; a Withdrawal concept: It is not clear whether it represe,ts the fact that you asked it to happen or the fact that is has actually been done.</p>\r\n<p>Being explicit on it with WithdrawMoney / MoneyWithdrawn removes the ambiguity.</p>\r\n<p>In the context of event sourcing, this distinction is very important as the previous article showed. As is the distinction between upstream events and internal events, since upstream events is input and will only produce things youâd like to happen, so are closer to commands from the system point of view.</p>\r\n<p>Of course if your context is not about time and decision, donât use these concepts that would be useless. Youâre writing a compiler ? Forget about all this. </p>\r\n<h3>Should I have Command DTOs ?</h3>\r\n<p>not necessarily, a command can be modeled as a function/method call. So creating Command object is not mandatory.</p>\r\n<p>It can still be useful for dispatch, storage for diagnostics, functional test etc.</p>","<p>A remark by <a href=\"https://twitter.com/serialseb\" target=\"_blank\">@serialseb</a> after <a href=\"http://thinkbeforecoding.com/post/2013/07/28/Event-Sourcing-vs-Command-Sourcing\" target=\"_blank\">my previous post</a> :</p>\n<blockquote class=\"twitter-tweet\">\n<p><a href=\"https://twitter.com/thinkb4coding\">@thinkb4coding</a> <a href=\"https://twitter.com/ashic\">@ashic</a> <a href=\"https://twitter.com/cduhard\">@cduhard</a> <a href=\"https://twitter.com/abdullin\">@abdullin</a> <a href=\"https://twitter.com/martinfowler\">@martinfowler</a> I refuse there is a useful\ndifferentiation between commands and events.</p>\nâ serialseb (@serialseb) <a href=\"https://twitter.com/serialseb/statuses/361444940384976896\">July 28,\n2013</a></blockquote>\n\n\n<p>Â </p>\n<blockquote class=\"twitter-tweet\">\n<p><a href=\"https://twitter.com/thinkb4coding\">@thinkb4coding</a> <a href=\"https://twitter.com/ashic\">@ashic</a> <a href=\"https://twitter.com/cduhard\">@cduhard</a> <a href=\"https://twitter.com/abdullin\">@abdullin</a> <a href=\"https://twitter.com/martinfowler\">@martinfowler</a> BV I've not seen value in\nthe distinction on systems I worked on. Academic at best</p>\nâ serialseb (@serialseb) <a href=\"https://twitter.com/serialseb/statuses/361445929091481600\">July 28,\n2013</a></blockquote>\n\n\n<p>First, here is some the distinction between a Command and an Event.</p>\n<p>A command express what you want to do. Usually expressed with a verb in the\npresent tense:<br />\nWithdrawMoney</p>\n<p>A event express what actually happened. Usually expressed with a verb in the\npast tense;<br />\nMoneyWithdrawn</p>\n<p>As you can anticipate, what you request is not always what actually\nhappens:<br />\nWithdrawMoney($100000000)</p>\n<h3>A Command is still an Event ?</h3>\n<p>Letâs go a bit meta.</p>\n<p>The fact that you decide you want to do something is something that happens\nin time. So it can also be considered as an event !</p>\n<p>Trueâ¦ but whatâs the usefulness of this ?</p>\n<p>Someone who would like to study the correlation between your desires and\ntheir realizations will model both as events..</p>\n<p>This can be the same in a tracking context. Track both causes and\neffects..</p>\n<h3>Should we just ignore the distinction then ?</h3>\n<p>Surely not !</p>\n<p>Itâs here again a matter of context. Of Bounded Context.</p>\n<p>Letâs take a sample with different kind of concepts, Value Object and\nEntities, to highlight how the same thing can take different modeling forms in\ndifferent contexts:</p>\n<p>Money is usually modeled as a Value Object, which implies equality by Value.\nI give you $10 you give me $10, weâre even, even if I give you a bill and you\ngive me some coins.</p>\n<p>In the context of fraud tracking, this can be very different. Bills have a\ntracking number, and you can model it as entity.</p>\n<p>If you make both context work together youâll go through an Anti Corruption\nLayer for context mapping. Youâll not model all your accounting with entities\nfor money because some other context models it this way !</p>\n<p>In the case of Command and Events, some contexts can be interested in the\nfact that a decision was made, so this will be modeled as an event. But in the\ncontext where this decision happens, the decision is different from the actual\noutcome, and not being clear about this difference can lead to several\nissues..</p>\n<p>For example if you model a withdrawal withÂ  a Withdrawal concept: It is\nnot clear whether it represe,ts the fact that you asked it to happen or the\nfact that is has actually been done.</p>\n<p>Being explicit on it with WithdrawMoney / MoneyWithdrawn removes the\nambiguity.</p>\n<p>In the context of event sourcing, this distinction is very important as the\nprevious article showed. As is the distinction between upstream events and\ninternal events, since upstream events is input and will only produce things\nyouâd like to happen, so are closer to commands from the system point of\nview.</p>\n<p>Of course if your context is not about time and decision, donât use these\nconcepts that would be useless. Youâre writing a compiler ? Forget about all\nthis.</p>\n<h3>Should I have Command DTOs ?</h3>\n<p>not necessarily, a command can be modeled as a function/method call. So\ncreating Command object is not mandatory.</p>\n<p>It can still be useful for dispatch, storage for diagnostics, functional\ntest etc.</p>","","command events and context remark serialseb after previous post thinkb4coding ashic cduhard abdullin martinfowler refuse there useful differentiation between commands and events serialseb serialseb july 2013 thinkb4coding ashic cduhard abdullin martinfowler not seen value the distinction systems worked academic best serialseb serialseb july 2013 first here some the distinction between command and event command express what you want usually expressed with verb the present tense withdrawmoney event express what actually happened usually expressed with verb the past tense moneywithdrawn you can anticipate what you request not always what actually happens withdrawmoney 100000000 command still event letâs bit meta the fact that you decide you want something something that happens time can also considered event trueâ¦ but whatâs the usefulness this someone who would like study the correlation between your desires and their realizations will model both events this can the same tracking context track both causes and effects should just ignore the distinction then surely not itâs here again matter context bounded context letâs take sample with different kind concepts value object and entities highlight how the same thing can take different modeling forms different contexts money usually modeled value object which implies equality value give you you give weâre even even give you bill and you give some coins the context fraud tracking this can very different bills have tracking number and you can model entity you make both context work together youâll through anti corruption layer for context mapping youâll not model all your accounting with entities for money because some other context models this way the case command and events some contexts can interested the fact that decision was made this will modeled event but the context where this decision happens the decision different from the actual outcome and not being clear about this difference can lead several issues for example you model withdrawal with withdrawal concept not clear whether represe the fact that you asked happen the fact that has actually been done being explicit with withdrawmoney moneywithdrawn removes the ambiguity the context event sourcing this distinction very important the previous article showed the distinction between upstream events and internal events since upstream events input and will only produce things youâd like happen are closer commands from the system point view course your context not about time and decision donât use these concepts that would useless youâre writing compiler forget about all this should have command dtos not necessarily command can modeled function method call creating command object not mandatory can still useful for dispatch storage for diagnostics functional test etc","a:1:{s:3:\"tag\";a:4:{i:0;s:6:\"Design\";i:1;s:13:\"Martin Fowler\";i:2;s:14:\"Event Sourcing\";i:3;s:20:\"Domain Driven Design\";}}","1","0","1","1","2","0","0"
"761913","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","34167","2013-12-17 10:09:00","Europe/Paris","2013-12-17 09:09:51","2013-12-18 07:51:01","","post","xhtml","2013/12/17/Generalized-Conway-s-law","en","Generalized Conway's law","","","<p>Disclaimer: This article is not just about Conway's lay which I'd call Classical Conway's law, it's already on Wikipedia. You'll find its Generalized form at the en of the post..</p>\r\n<p>BuildStuff 2013 has been really inspiring. Talking with all those people from different CS culture always raise the level of the conversation.</p>\r\n<p>&nbsp;</p>\r\n<p>Several times came Conway's law into the discussion, as <a href=\"http://hintjens.com/blog:73\" target=\"_blank\">Pieter Hintjens noticed in his blog post yesterday</a>.</p>\r\n<h2>&nbsp;Classical Conway's law</h2>\r\n<p>Conway's law is quite simple. It states that:</p>\r\n<blockquote>\r\n<p>organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations</p>\r\n<p>&nbsp;</p>\r\n<p align=\"right\">Ã partir de lâadresse &lt;<a href=\"http://en.wikipedia.org/wiki/Conway%27s_Law\">http://en.wikipedia.org/wiki/Conway%27s_Law</a>&gt; </p>\r\n</blockquote>  <p>&nbsp;</p>\r\n<p>It's often seen as a joke to mock companies organization, like this famous drawing:</p>\r\n<p>&nbsp;</p>\r\n<p><a href=\"http://www.bonkersworld.net/organizational-charts/\" target=\"_blank\"><img width=\"585\" height=\"570\" src=\"http://www.bonkersworld.net/images/2011.06.27_organizational_charts.png\" /></a></p>\r\n<p>&nbsp;</p>\r\n<h2>But it is more than that.</h2>\r\n<p>First, it can be a force to drive a change in the system.</p>\r\n<p>&nbsp;</p>\r\n<p>When two parts are too strongly tied and mangled together, it's a good idea to move teams apart. Communication friction will increase, and eventually, teams will find way to decouple parts so that friction can be reduced.</p>\r\n<p>&nbsp;</p>\r\n<p>Pieter's example of LSHS vs LSNS is totally an example of this.</p>\r\n<p>&nbsp;</p>\r\n<p>Second, it is both ways.</p>\r\n<p>A messy system structure reflects a messy team organization.</p>\r\n<p>But we can go far beyond.</p>\r\n<p>&nbsp;</p>\r\n<h2>Generalized Conway's law</h2>\r\n<blockquote>\r\n<p>System should match the structure of any external concern it interacts with</p>\r\n</blockquote>  <p>&nbsp;</p>\r\n<p>Of course, the Conway's law is included here. There's a match between people building the system and it's structure.</p>\r\n<p>&nbsp;</p>\r\n<p>But we can here also include design methods like Domain Driven Design which address a different concern the same way: </p>\r\n<p>Align the system structure with the structure of the Domain you're working in/for</p>\r\n<p>&nbsp;</p>\r\n<p>Using Domain Events and Event Sourcing is a way to make explicit something that is usually implicit in most systems: <a href=\"http://thinkbeforecoding.com/post/2011/06/09/Time\" target=\"_blank\">Time</a></p>\r\n<p>&nbsp;</p>\r\n<p>CQRS will reflect the fact that outside the system, getting information and acting on it are two totally different things.</p>\r\n<p>&nbsp;</p>\r\n<p>Architecture in general is also included: find the match between your system and non functional requirements.</p>\r\n<ul>   <li>Deployment </li>\r\n<li>Security </li>\r\n<li>Performance </li>\r\n<li>Maintainability </li>\r\n<li>â¦ </li>\r\n</ul>\r\n<p>At a lower level, it is also known that code clarity reflects the level of the developers understanding.</p>\r\n<p>&nbsp;</p>\r\n<p>All those external forces will shape the system, and any mismatch in structure will create friction.</p>\r\n<p>And any smell in the system is a sign that something is not understood or working well outside of the system.</p>\r\n<p>&nbsp;</p>\r\n<p>Generalized Conway's law gives a higher frame of thought to find what's ok and what's wrong in all the dimensions of building systems in interaction with their environment.</p>","<p>Disclaimer: This article is not just about Conway's lay which I'd call\nClassical Conway's law, it's already on Wikipedia. You'll find its Generalized\nform at the en of the post..</p>\n<p>BuildStuff 2013 has been really inspiring. Talking with all those people\nfrom different CS culture always raise the level of the conversation.</p>\n<p>Â </p>\n<p>Several times came Conway's law into the discussion, as <a href=\"http://hintjens.com/blog:73\" target=\"_blank\">Pieter Hintjens noticed in his\nblog post yesterday</a>.</p>\n<h2>Â Classical Conway's law</h2>\n<p>Conway's law is quite simple. It states that:</p>\n<blockquote>\n<p>organizations which design systems ... are constrained to produce designs\nwhich are copies of the communication structures of these organizations</p>\n<p>Â </p>\n<p style=\"text-align: right\">Ã partir de lâadresse &lt;<a href=\"http://en.wikipedia.org/wiki/Conway%27s_Law\">http://en.wikipedia.org/wiki/Conway%27s_Law</a>&gt;</p>\n</blockquote>\n<p>Â </p>\n<p>It's often seen as a joke to mock companies organization, like this famous\ndrawing:</p>\n<p>Â </p>\n<p><a href=\"http://www.bonkersworld.net/organizational-charts/\" target=\"_blank\"><img width=\"585\" height=\"570\" src=\"http://www.bonkersworld.net/images/2011.06.27_organizational_charts.png\" /></a></p>\n<p>Â </p>\n<h2>But it is more than that.</h2>\n<p>First, it can be a force to drive a change in the system.</p>\n<p>Â </p>\n<p>When two parts are too strongly tied and mangled together, it's a good idea\nto move teams apart. Communication friction will increase, and eventually,\nteams will find way to decouple parts so that friction can be reduced.</p>\n<p>Â </p>\n<p>Pieter's example of LSHS vs LSNS is totally an example of this.</p>\n<p>Â </p>\n<p>Second, it is both ways.</p>\n<p>A messy system structure reflects a messy team organization.</p>\n<p>But we can go far beyond.</p>\n<p>Â </p>\n<h2>Generalized Conway's law</h2>\n<blockquote>\n<p>System should match the structure of any external concern it interacts\nwith</p>\n</blockquote>\n<p>Â </p>\n<p>Of course, the Conway's law is included here. There's a match between people\nbuilding the system and it's structure.</p>\n<p>Â </p>\n<p>But we can here also include design methods like Domain Driven Design which\naddress a different concern the same way:</p>\n<p>Align the system structure with the structure of the Domain you're working\nin/for</p>\n<p>Â </p>\n<p>Using Domain Events and Event Sourcing is a way to make explicit something\nthat is usually implicit in most systems: <a href=\"http://thinkbeforecoding.com/post/2011/06/09/Time\" target=\"_blank\">Time</a></p>\n<p>Â </p>\n<p>CQRS will reflect the fact that outside the system, getting information and\nacting on it are two totally different things.</p>\n<p>Â </p>\n<p>Architecture in general is also included: find the match between your system\nand non functional requirements.</p>\n<ul>\n<li>Deployment</li>\n<li>Security</li>\n<li>Performance</li>\n<li>Maintainability</li>\n<li>â¦</li>\n</ul>\n<p>At a lower level, it is also known that code clarity reflects the level of\nthe developers understanding.</p>\n<p>Â </p>\n<p>All those external forces will shape the system, and any mismatch in\nstructure will create friction.</p>\n<p>And any smell in the system is a sign that something is not understood or\nworking well outside of the system.</p>\n<p>Â </p>\n<p>Generalized Conway's law gives a higher frame of thought to find what's ok\nand what's wrong in all the dimensions of building systems in interaction with\ntheir environment.</p>","","generalized conway law disclaimer this article not just about conway lay which call classical conway law already wikipedia you find its generalized form the the post buildstuff 2013 has been really inspiring talking with all those people from different culture always raise the level the conversation several times came conway law into the discussion pieter hintjens noticed his blog post yesterday classical conway law conway law quite simple states that organizations which design systems are constrained produce designs which are copies the communication structures these organizations partir lâadresse http wikipedia org wiki conway 27s law often seen joke mock companies organization like this famous drawing but more than that first can force drive change the system when two parts are too strongly tied and mangled together good idea move teams apart communication friction will increase and eventually teams will find way decouple parts that friction can reduced pieter example lshs lsns totally example this second both ways messy system structure reflects messy team organization but can far beyond generalized conway law system should match the structure any external concern interacts with course the conway law included here there match between people building the system and structure but can here also include design methods like domain driven design which address different concern the same way align the system structure with the structure the domain you working for using domain events and event sourcing way make explicit something that usually implicit most systems time cqrs will reflect the fact that outside the system getting information and acting are two totally different things architecture general also included find the match between your system and non functional requirements deployment security performance maintainability lower level also known that code clarity reflects the level the developers understanding all those external forces will shape the system and any mismatch structure will create friction and any smell the system sign that something not understood working well outside the system generalized conway law gives higher frame thought find what and what wrong all the dimensions building systems interaction with their environment","a:1:{s:3:\"tag\";a:2:{i:0;s:3:\"DDD\";i:1;s:6:\"Conway\";}}","1","1","1","1","3","0","0"
"764043","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2014-01-04 22:58:00","Europe/Paris","2014-01-04 21:58:05","2014-01-04 21:59:57","","post","xhtml","2014/01/04/Event-Sourcing.-Draw-it","en","Event Sourcing. Draw it","","","<p>Here is a drawing to&nbsp;show the interaction between the Decide and Apply functions:</p>\r\n<p><img width=\"1772\" height=\"987\" title=\"FreshPaint-21-2014.01.04-10.55.10.png, Jan 2014\" style=\"margin: 0 auto; width: 552px; height: 321px; display: block;\" alt=\"\" src=\"/public/FreshPaint-21-2014.01.04-10.55.10.png\" /></p>","<p>Here is a drawing toÂ show the interaction between the Decide and Apply\nfunctions:</p>\n<p><img width=\"1772\" height=\"987\" title=\"FreshPaint-21-2014.01.04-10.55.10.png, Jan 2014\" style=\"margin: 0 auto; width: 552px; height: 321px; display: block;\" alt=\"\" src=\"/public/FreshPaint-21-2014.01.04-10.55.10.png\" /></p>","","event sourcing draw here drawing show the interaction between the decide and apply functions","","1","0","1","1","5","0","0"
"778381","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","58546","2014-04-11 04:34:00","Europe/Paris","2014-04-11 02:34:48","2014-04-11 02:36:18","","post","xhtml","2014/04/11/Monoidal-Event-Sourcing","en","Monoidal Event Sourcing","","","<p>I Could not sleepâ¦ 3am and this ideaâ¦</p>\r\n<p>&nbsp;</p>\r\n<p>Event sourcing is about <strong>fold</strong> but there is no <strong>monoid</strong> around !</p>\r\n<p>&nbsp;</p>\r\n<h3>Whatâs a monoid ?</h3>\r\n<p>&nbsp;</p>\r\n<p>First, for those that didnât had a chance to see <a href=\"https://twitter.com/cyriux\" target=\"_blank\">Cyrille Martaire</a>âs&nbsp; fabulous explanation with beer glasses, or read the great series of post on <a href=\"http://fsharpforfunandprofit.com/posts/monoids-without-tears/\" target=\"_blank\">F# for fun and profit</a>, here is a quick recap:</p>\r\n<p>&nbsp;</p>\r\n<p>We need a <strong>set</strong>.</p>\r\n<p>Letâs take a simple one, positive integers.</p>\r\n<p>&nbsp;</p>\r\n<p>And an <strong>operation</strong>, let say + which takes two positive integers.</p>\r\n<p>&nbsp;</p>\r\n<p>It returnsâ¦ a positive integer. The operation is said to be <strong>closed on the set</strong>.</p>\r\n<p>&nbsp;</p>\r\n<p>Something interesting is that 3 + 8 + 2 = 13 = (3 + 8) + 2 = 3 + (8 + 2).</p>\r\n<p>This is <strong>associativity</strong>: (x + y) + z = x + (y + z)</p>\r\n<p>&nbsp;</p>\r\n<p>Le last interesting thing is 0, the <strong>neutral element</strong>:</p>\r\n<p> x + 0 = 0 + x = x</p>\r\n<p>&nbsp;</p>\r\n<p>(N,+,0) is a <strong>monoid</strong>.</p>\r\n<p>&nbsp;</p>\r\n<p>Let say it again:</p>\r\n<p>(S, *, Ã¸) is a monoid if</p>\r\n<ul>   <li>* is closed on S&nbsp; (* : S â&gt; S &gt; S)</li>\r\n<li>* is associative ( (x * y) * z = x * (y * z) )</li>\r\n<li>Ã¸ is the neutral element of * ( x * Ã¸ = Ã¸ * x = x )</li>\r\n</ul>\r\n<p><em>warning: it doesnât need to be commutative so x * y can be different from y * x !</em></p>\r\n<p>&nbsp;</p>\r\n<p>Some famous monoids:</p>\r\n<p> (int, +, 0)</p>\r\n<p> (int, *, 1)</p>\r\n<p> (lists, concat, empty list)</p>\r\n<p> (strings, concat, empty string)</p>\r\n<p>â¦</p>\r\n<p>&nbsp;</p>\r\n<h3>The link with Event Sourcing</h3>\r\n<p>&nbsp;</p>\r\n<p>Event sourcing is based on an application function apply : State â&gt; Event â&gt; State, which returns the new state based on previous state and an event.</p>\r\n<p>&nbsp;</p>\r\n<p>Current state is then:</p>\r\n<p>fold apply emptyState events</p>\r\n<p>&nbsp;</p>\r\n<p>(for those using C# Linq, fold is the same as .Aggregate)</p>\r\n<p>&nbsp;</p>\r\n<p>Which is great because higher level functions and allâ¦</p>\r\n<p>&nbsp;</p>\r\n<p>But fold is event more powerful with monoids ! For integers, fold is called sum, and the cool thing is that itâs associative !</p>\r\n<p>&nbsp;</p>\r\n<p>With a monoid you can fold subsets, then combine them together after (still in the right order). This is what give the full power of map reduce: move code to the data. Combine in place, then combine results. As long as you have monoids, it works.</p>\r\n<p>&nbsp;</p>\r\n<p>But apply will not be part of a monoid. Itâs not closed on a set.</p>\r\n<p>&nbsp;</p>\r\n<p>To make it closed on a set it should have the following signature:</p>\r\n<p>&nbsp;</p>\r\n<p>apply: State â&gt; State â&gt; State, so we should maybe rename the function combine.</p>\r\n<p>&nbsp;</p>\r\n<h3>Letâs dream</h3>\r\n<p>&nbsp;</p>\r\n<p>Letâs imagine we have a combine operation closed on State.</p>\r\n<p>&nbsp;</p>\r\n<p>Now, event sourcing goes from:</p>\r\n<p>&nbsp;</p>\r\n<p>decide: Command â&gt; State â&gt; Event list</p>\r\n<p>apply: State â&gt; Event â&gt; State</p>\r\n<p>&nbsp;</p>\r\n<p>to:</p>\r\n<p>decide: Command â&gt; State â&gt; Event list</p>\r\n<p>convert: Event â&gt; State</p>\r\n<p>combine: State â&gt; State â&gt; State</p>\r\n<p>&nbsp;</p>\r\n<p>the previous apply function is then just:</p>\r\n<p>apply state event = combine state (convert event)</p>\r\n<p>&nbsp;</p>\r\n<p>and fold distribution gives:</p>\r\n<p>&nbsp;</p>\r\n<p><strong>fold apply emptyState events = fold combine emptyState (map convert events)&nbsp; </strong></p>\r\n<p>&nbsp;</p>\r\n<p>(where map applies the convert fonction to each item of the events list, as does .Select in Linq)</p>\r\n<p>&nbsp;</p>\r\n<p>The great advantage here is that we map then fold which is another name for reduce !</p>\r\n<p>&nbsp;</p>\r\n<p>Application of events can be done in parallel by chuncks and then combined !</p>\r\n<p>&nbsp;</p>\r\n<h3>Is it just a dream ?</h3>\r\n<p>&nbsp;</p>\r\n<p>Surely not.</p>\r\n<p>&nbsp;</p>\r\n<p>Most of the tricky decisions have been taken in the decide function which didnât change. The apply function usually just set state members to values present in the event, or increment/decrement values, or add items to a listâ¦ No business decision is taken in the apply function, and most of the primitive types in state members are already monoids under there usual operationsâ¦</p>\r\n<p>&nbsp;</p>\r\n<p>And a group (tuple, list..) of monoid is also a monoid under a simple composition:</p>\r\n<p>if (N1,*,n1) and (N2,Â¤,n2) are monoids then N1 * N2 is a monoid with an operator &lt;*&gt; ( (x1,x2) &lt;*&gt; (y1,y2) = (x1*y1, x2Â¤y2)) and a neutral element (n1,n2)â¦</p>\r\n<p>&nbsp;</p>\r\n<p>To view it more easily, the convert fonction converts an event to a <strong>Delta</strong>, a difference of the State.</p>\r\n<p>&nbsp;</p>\r\n<p>Those delta can then be aggregated/folded to make a bigger delta.</p>\r\n<p>It can then be applied to a initial value to get the result !</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>The idea seams quite interesting and I never read anything about this.. If anyone knows prior study of the subject, Iâm interested.</p>\r\n<p>&nbsp;</p>\r\n<p>Next time weâll see how to make monoids for some common patterns we can find in the apply function, to use them in the convert function. </p>","<p>I Could not sleepâ¦ 3am and this ideaâ¦</p>\n<p>Â </p>\n<p>Event sourcing is about <strong>fold</strong> but there is no\n<strong>monoid</strong> around !</p>\n<p>Â </p>\n<h3>Whatâs a monoid ?</h3>\n<p>Â </p>\n<p>First, for those that didnât had a chance to see <a href=\"https://twitter.com/cyriux\" target=\"_blank\">Cyrille Martaire</a>âsÂ \nfabulous explanation with beer glasses, or read the great series of post on\n<a href=\"http://fsharpforfunandprofit.com/posts/monoids-without-tears/\" target=\"_blank\">F# for fun and profit</a>, here is a quick recap:</p>\n<p>Â </p>\n<p>We need a <strong>set</strong>.</p>\n<p>Letâs take a simple one, positive integers.</p>\n<p>Â </p>\n<p>And an <strong>operation</strong>, let say + which takes two positive\nintegers.</p>\n<p>Â </p>\n<p>It returnsâ¦ a positive integer. The operation is said to be <strong>closed\non the set</strong>.</p>\n<p>Â </p>\n<p>Something interesting is that 3 + 8 + 2 = 13 = (3 + 8) + 2 = 3 + (8 +\n2).</p>\n<p>This is <strong>associativity</strong>: (x + y) + z = x + (y + z)</p>\n<p>Â </p>\n<p>Le last interesting thing is 0, the <strong>neutral element</strong>:</p>\n<p>x + 0 = 0 + x = x</p>\n<p>Â </p>\n<p>(N,+,0) is a <strong>monoid</strong>.</p>\n<p>Â </p>\n<p>Let say it again:</p>\n<p>(S, *, Ã¸) is a monoid if</p>\n<ul>\n<li>* is closed on SÂ  (* : S â&gt; S &gt; S)</li>\n<li>* is associative ( (x * y) * z = x * (y * z) )</li>\n<li>Ã¸ is the neutral element of * ( x * Ã¸ = Ã¸ * x = x )</li>\n</ul>\n<p><em>warning: it doesnât need to be commutative so x * y can be different\nfrom y * x !</em></p>\n<p>Â </p>\n<p>Some famous monoids:</p>\n<p>(int, +, 0)</p>\n<p>(int, *, 1)</p>\n<p>(lists, concat, empty list)</p>\n<p>(strings, concat, empty string)</p>\n<p>â¦</p>\n<p>Â </p>\n<h3>The link with Event Sourcing</h3>\n<p>Â </p>\n<p>Event sourcing is based on an application function apply : State â&gt; Event\nâ&gt; State, which returns the new state based on previous state and an\nevent.</p>\n<p>Â </p>\n<p>Current state is then:</p>\n<p>fold apply emptyState events</p>\n<p>Â </p>\n<p>(for those using C# Linq, fold is the same as .Aggregate)</p>\n<p>Â </p>\n<p>Which is great because higher level functions and allâ¦</p>\n<p>Â </p>\n<p>But fold is event more powerful with monoids ! For integers, fold is called\nsum, and the cool thing is that itâs associative !</p>\n<p>Â </p>\n<p>With a monoid you can fold subsets, then combine them together after (still\nin the right order). This is what give the full power of map reduce: move code\nto the data. Combine in place, then combine results. As long as you have\nmonoids, it works.</p>\n<p>Â </p>\n<p>But apply will not be part of a monoid. Itâs not closed on a set.</p>\n<p>Â </p>\n<p>To make it closed on a set it should have the following signature:</p>\n<p>Â </p>\n<p>apply: State â&gt; State â&gt; State, so we should maybe rename the function\ncombine.</p>\n<p>Â </p>\n<h3>Letâs dream</h3>\n<p>Â </p>\n<p>Letâs imagine we have a combine operation closed on State.</p>\n<p>Â </p>\n<p>Now, event sourcing goes from:</p>\n<p>Â </p>\n<p>decide: Command â&gt; State â&gt; Event list</p>\n<p>apply: State â&gt; Event â&gt; State</p>\n<p>Â </p>\n<p>to:</p>\n<p>decide: Command â&gt; State â&gt; Event list</p>\n<p>convert: Event â&gt; State</p>\n<p>combine: State â&gt; State â&gt; State</p>\n<p>Â </p>\n<p>the previous apply function is then just:</p>\n<p>apply state event = combine state (convert event)</p>\n<p>Â </p>\n<p>and fold distribution gives:</p>\n<p>Â </p>\n<p><strong>fold apply emptyState events = fold combine emptyState (map convert\nevents)Â </strong></p>\n<p>Â </p>\n<p>(where map applies the convert fonction to each item of the events list, as\ndoes .Select in Linq)</p>\n<p>Â </p>\n<p>The great advantage here is that we map then fold which is another name for\nreduce !</p>\n<p>Â </p>\n<p>Application of events can be done in parallel by chuncks and then combined\n!</p>\n<p>Â </p>\n<h3>Is it just a dream ?</h3>\n<p>Â </p>\n<p>Surely not.</p>\n<p>Â </p>\n<p>Most of the tricky decisions have been taken in the decide function which\ndidnât change. The apply function usually just set state members to values\npresent in the event, or increment/decrement values, or add items to a listâ¦ No\nbusiness decision is taken in the apply function, and most of the primitive\ntypes in state members are already monoids under there usual operationsâ¦</p>\n<p>Â </p>\n<p>And a group (tuple, list..) of monoid is also a monoid under a simple\ncomposition:</p>\n<p>if (N1,*,n1) and (N2,Â¤,n2) are monoids then N1 * N2 is a monoid with an\noperator &lt;*&gt; ( (x1,x2) &lt;*&gt; (y1,y2) = (x1*y1, x2Â¤y2)) and a neutral\nelement (n1,n2)â¦</p>\n<p>Â </p>\n<p>To view it more easily, the convert fonction converts an event to a\n<strong>Delta</strong>, a difference of the State.</p>\n<p>Â </p>\n<p>Those delta can then be aggregated/folded to make a bigger delta.</p>\n<p>It can then be applied to a initial value to get the result !</p>\n<p>Â </p>\n<p>Â </p>\n<p>The idea seams quite interesting and I never read anything about this.. If\nanyone knows prior study of the subject, Iâm interested.</p>\n<p>Â </p>\n<p>Next time weâll see how to make monoids for some common patterns we can find\nin the apply function, to use them in the convert function.</p>","","monoidal event sourcing could not sleepâ¦ 3am and this ideaâ¦ event sourcing about fold but there monoid around whatâs monoid first for those that didnât had chance see cyrille martaireâs fabulous explanation with beer glasses read the great series post for fun and profit here quick recap need set letâs take simple one positive integers and operation let say which takes two positive integers returnsâ¦ positive integer the operation said closed the set something interesting that this associativity last interesting thing the neutral element monoid let say again monoid closed associative the neutral element warning doesnât need commutative can different from some famous monoids int int lists concat empty list strings concat empty string the link with event sourcing event sourcing based application function apply state event state which returns the new state based previous state and event current state then fold apply emptystate events for those using linq fold the same aggregate which great because higher level functions and allâ¦ but fold event more powerful with monoids for integers fold called sum and the cool thing that itâs associative with monoid you can fold subsets then combine them together after still the right order this what give the full power map reduce move code the data combine place then combine results long you have monoids works but apply will not part monoid itâs not closed set make closed set should have the following signature apply state state state should maybe rename the function combine letâs dream letâs imagine have combine operation closed state now event sourcing goes from decide command state event list apply state event state decide command state event list convert event state combine state state state the previous apply function then just apply state event combine state convert event and fold distribution gives fold apply emptystate events fold combine emptystate map convert events where map applies the convert fonction each item the events list does select linq the great advantage here that map then fold which another name for reduce application events can done parallel chuncks and then combined just dream surely not most the tricky decisions have been taken the decide function which didnât change the apply function usually just set state members values present the event increment decrement values add items listâ¦ business decision taken the apply function and most the primitive types state members are already monoids under there usual operationsâ¦ and group tuple list monoid also monoid under simple composition and are monoids then monoid with operator and neutral element view more easily the convert fonction converts event delta difference the state those delta can then aggregated folded make bigger delta can then applied initial value get the result the idea seams quite interesting and never read anything about this anyone knows prior study the subject iâm interested next time weâll see how make monoids for some common patterns can find the apply function use them the convert function","a:1:{s:3:\"tag\";a:4:{i:0;s:14:\"Event Sourcing\";i:1;s:1:\"F\";i:2;s:6:\"Monoid\";i:3;s:3:\"DDD\";}}","1","1","1","1","3","0","0"
"780181","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","58546","2014-04-27 02:16:00","Europe/Paris","2014-04-27 00:16:49","2014-04-27 00:16:50","","post","xhtml","2014/04/27/Monoidal-Event-Sourcing-Examples","en","Monoidal Event Sourcing Examples","","","<p>Last time we tried to imagine how we could change usual event sourcing definition$ to get a monoidal approach.</p>  <p>&#160;</p>  <p>Here are some examples to make it work in real life.</p>  <h2>Monoids properties</h2>  <p>We'll try to do it properly, and test that the proposed solutions are proper monoids.</p>  <p>&#160;</p>  <p>Let's recap what defines a monoid:</p>  <ul>   <li>closure of operation </li>    <li>associativity </li>    <li>neutral element </li> </ul>  <h2>How to test it</h2>  <p>the closure of operation is given by the signature of the operation. In F# it should have a signature like 'a -&gt; 'a â&gt; 'a which represents a function that takes to arguments of type 'a and return a result of the same type 'a.</p>  <p>&#160;</p>  <p>For associativity, we'll use the following test function:</p>  <table class=\"pre\"><tbody>     <tr>       <td class=\"lines\">         <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs1&#39;, 1)\" onmouseout=\"hideTip(event, &#39;fs1&#39;, 1)\" class=\"i\">isAssociative</span> <span class=\"o\">(*)</span> <span onmouseover=\"showTip(event, &#39;fs2&#39;, 2)\" onmouseout=\"hideTip(event, &#39;fs2&#39;, 2)\" class=\"i\">x</span> <span onmouseover=\"showTip(event, &#39;fs3&#39;, 3)\" onmouseout=\"hideTip(event, &#39;fs3&#39;, 3)\" class=\"i\">y</span> <span onmouseover=\"showTip(event, &#39;fs4&#39;, 4)\" onmouseout=\"hideTip(event, &#39;fs4&#39;, 4)\" class=\"i\">z</span> <span class=\"o\">=</span>\n   ((<span onmouseover=\"showTip(event, &#39;fs2&#39;, 5)\" onmouseout=\"hideTip(event, &#39;fs2&#39;, 5)\" class=\"i\">x</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs3&#39;, 6)\" onmouseout=\"hideTip(event, &#39;fs3&#39;, 6)\" class=\"i\">y</span>) <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs4&#39;, 7)\" onmouseout=\"hideTip(event, &#39;fs4&#39;, 7)\" class=\"i\">z</span>) <span class=\"o\">=</span> (<span onmouseover=\"showTip(event, &#39;fs2&#39;, 8)\" onmouseout=\"hideTip(event, &#39;fs2&#39;, 8)\" class=\"i\">x</span> <span class=\"o\">*</span> (<span onmouseover=\"showTip(event, &#39;fs3&#39;, 9)\" onmouseout=\"hideTip(event, &#39;fs3&#39;, 9)\" class=\"i\">y</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs4&#39;, 10)\" onmouseout=\"hideTip(event, &#39;fs4&#39;, 10)\" class=\"i\">z</span>))</pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>It take a function that will be called '<em>' and three values x y z. It will then test the associativity of '</em>' using FsCheck, a F# port of QuickCheck.</p>\n\n<p>&#160;</p>\n\n<p>FsCheck test the given property for a wide range of values. We'll just have to provide the operator, and FsCheck will check it the associativity holds for a lot of values.</p>\n\n<p>&#160;</p>\n\n<p>For the neutral element, will use the following test function:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs5&#39;, 11)\" onmouseout=\"hideTip(event, &#39;fs5&#39;, 11)\" class=\"i\">isNeutralElement</span> <span class=\"o\">(*)</span> <span onmouseover=\"showTip(event, &#39;fs6&#39;, 12)\" onmouseout=\"hideTip(event, &#39;fs6&#39;, 12)\" class=\"i\">neutral</span> <span onmouseover=\"showTip(event, &#39;fs7&#39;, 13)\" onmouseout=\"hideTip(event, &#39;fs7&#39;, 13)\" class=\"i\">x</span> <span class=\"o\">=</span>\n    <span onmouseover=\"showTip(event, &#39;fs7&#39;, 14)\" onmouseout=\"hideTip(event, &#39;fs7&#39;, 14)\" class=\"i\">x</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs6&#39;, 15)\" onmouseout=\"hideTip(event, &#39;fs6&#39;, 15)\" class=\"i\">neutral</span> <span class=\"o\">=</span> <span onmouseover=\"showTip(event, &#39;fs6&#39;, 16)\" onmouseout=\"hideTip(event, &#39;fs6&#39;, 16)\" class=\"i\">neutral</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs7&#39;, 17)\" onmouseout=\"hideTip(event, &#39;fs7&#39;, 17)\" class=\"i\">x</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>Here we'll have to provide the the operator - called '*' inside the function - and the neutral element.</p>\n\n<h2>Trivial cases</h2>\n\n<p>There are some obvious trivial cases.</p>\n\n<p>&#160;</p>\n\n<p>Let's try to follow the number of occurrences of a specific event in state. The number of time a user did </p>\n\n<p>something.</p>\n\n<p>&#160;</p>\n\n<p>The map function is simply:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs8&#39;, 18)\" onmouseout=\"hideTip(event, &#39;fs8&#39;, 18)\" class=\"i\">map</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span onmouseover=\"showTip(event, &#39;fs9&#39;, 19)\" onmouseout=\"hideTip(event, &#39;fs9&#39;, 19)\" class=\"i\">TheUserDidSomething</span> <span class=\"k\">-&gt;</span> <span class=\"n\">1</span>\n    | _ <span class=\"k\">-&gt;</span> <span class=\"n\">0</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>The combine operation is then really simple:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs10&#39;, 20)\" onmouseout=\"hideTip(event, &#39;fs10&#39;, 20)\" class=\"i\">combine</span> <span onmouseover=\"showTip(event, &#39;fs11&#39;, 21)\" onmouseout=\"hideTip(event, &#39;fs11&#39;, 21)\" class=\"i\">acc</span> <span onmouseover=\"showTip(event, &#39;fs12&#39;, 22)\" onmouseout=\"hideTip(event, &#39;fs12&#39;, 22)\" class=\"i\">v</span> <span class=\"o\">=</span> <span onmouseover=\"showTip(event, &#39;fs11&#39;, 23)\" onmouseout=\"hideTip(event, &#39;fs11&#39;, 23)\" class=\"i\">acc</span> <span class=\"o\">+</span> <span onmouseover=\"showTip(event, &#39;fs12&#39;, 24)\" onmouseout=\"hideTip(event, &#39;fs12&#39;, 24)\" class=\"i\">v</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>and the neutral element is obviously 0.</p>\n\n<p>&#160;</p>\n\n<p>No need to check it with FsCheck, (N, +, 0) is a monoid..</p>\n\n<p>&#160;</p>\n\n<p>Another a bit less obvious is when an event sets a value while others don't.</p>\n\n<p>&#160;</p>\n\n<p>For instance, let's keep track of the last user address when a user moves.</p>\n\n<p>&#160;</p>\n\n<p>For combination, we'll use the 'right' function, which always takes it's rightmost argument:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs13&#39;, 25)\" onmouseout=\"hideTip(event, &#39;fs13&#39;, 25)\" class=\"i\">right</span> <span onmouseover=\"showTip(event, &#39;fs7&#39;, 26)\" onmouseout=\"hideTip(event, &#39;fs7&#39;, 26)\" class=\"i\">x</span> <span onmouseover=\"showTip(event, &#39;fs14&#39;, 27)\" onmouseout=\"hideTip(event, &#39;fs14&#39;, 27)\" class=\"i\">y</span> <span class=\"o\">=</span> <span onmouseover=\"showTip(event, &#39;fs14&#39;, 28)\" onmouseout=\"hideTip(event, &#39;fs14&#39;, 28)\" class=\"i\">y</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>The adress should, of course, not change on other events, and for that, we'll use an option:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs15&#39;, 29)\" onmouseout=\"hideTip(event, &#39;fs15&#39;, 29)\" class=\"i\">map'</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span onmouseover=\"showTip(event, &#39;fs16&#39;, 30)\" onmouseout=\"hideTip(event, &#39;fs16&#39;, 30)\" class=\"i\">UserMoved</span> (<span onmouseover=\"showTip(event, &#39;fs17&#39;, 31)\" onmouseout=\"hideTip(event, &#39;fs17&#39;, 31)\" class=\"i\">user</span>, <span onmouseover=\"showTip(event, &#39;fs18&#39;, 32)\" onmouseout=\"hideTip(event, &#39;fs18&#39;, 32)\" class=\"i\">newAddress</span>) <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs19&#39;, 33)\" onmouseout=\"hideTip(event, &#39;fs19&#39;, 33)\" class=\"i\">Some</span> <span onmouseover=\"showTip(event, &#39;fs18&#39;, 34)\" onmouseout=\"hideTip(event, &#39;fs18&#39;, 34)\" class=\"i\">newAddress</span>\n    | _ <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs20&#39;, 35)\" onmouseout=\"hideTip(event, &#39;fs20&#39;, 35)\" class=\"i\">None</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>The right function can then be tweaked to take the right argument only when it has a value:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs21&#39;, 36)\" onmouseout=\"hideTip(event, &#39;fs21&#39;, 36)\" class=\"i\">right'</span> <span onmouseover=\"showTip(event, &#39;fs22&#39;, 37)\" onmouseout=\"hideTip(event, &#39;fs22&#39;, 37)\" class=\"i\">x</span> <span onmouseover=\"showTip(event, &#39;fs23&#39;, 38)\" onmouseout=\"hideTip(event, &#39;fs23&#39;, 38)\" class=\"i\">y</span> <span class=\"o\">=</span>\n    <span class=\"k\">match</span> <span onmouseover=\"showTip(event, &#39;fs22&#39;, 39)\" onmouseout=\"hideTip(event, &#39;fs22&#39;, 39)\" class=\"i\">x</span>,<span onmouseover=\"showTip(event, &#39;fs23&#39;, 40)\" onmouseout=\"hideTip(event, &#39;fs23&#39;, 40)\" class=\"i\">y</span> <span class=\"k\">with</span>\n    | <span onmouseover=\"showTip(event, &#39;fs22&#39;, 41)\" onmouseout=\"hideTip(event, &#39;fs22&#39;, 41)\" class=\"i\">x</span>, <span onmouseover=\"showTip(event, &#39;fs20&#39;, 42)\" onmouseout=\"hideTip(event, &#39;fs20&#39;, 42)\" class=\"i\">None</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs22&#39;, 43)\" onmouseout=\"hideTip(event, &#39;fs22&#39;, 43)\" class=\"i\">x</span>\n    | _, <span onmouseover=\"showTip(event, &#39;fs23&#39;, 44)\" onmouseout=\"hideTip(event, &#39;fs23&#39;, 44)\" class=\"i\">y</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs23&#39;, 45)\" onmouseout=\"hideTip(event, &#39;fs23&#39;, 45)\" class=\"i\">y</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>right' has a signature of 'a option -&gt; 'a option -&gt; 'a option, so it's closed on operation.</p>\n\n<p>&#160;</p>\n\n<p>It's associative since, whatever x y z, (x right' y right' z) return the last defined term, however composed.</p>\n\n<p>&#160;</p>\n\n<p>None is the neutral element. Added to the left, it keeps what's on the right, added to the right, it keeps what's on the left.</p>\n\n<p>&#160;</p>\n\n<p>We can check it with FsCheck:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span onmouseover=\"showTip(event, &#39;fs24&#39;, 46)\" onmouseout=\"hideTip(event, &#39;fs24&#39;, 46)\" class=\"i\">Check</span><span class=\"o\">.</span><span onmouseover=\"showTip(event, &#39;fs25&#39;, 47)\" onmouseout=\"hideTip(event, &#39;fs25&#39;, 47)\" class=\"i\">Quick</span> (<span onmouseover=\"showTip(event, &#39;fs5&#39;, 48)\" onmouseout=\"hideTip(event, &#39;fs5&#39;, 48)\" class=\"i\">isNeutralElement</span> <span onmouseover=\"showTip(event, &#39;fs21&#39;, 49)\" onmouseout=\"hideTip(event, &#39;fs21&#39;, 49)\" class=\"i\">right'</span> <span onmouseover=\"showTip(event, &#39;fs20&#39;, 50)\" onmouseout=\"hideTip(event, &#39;fs20&#39;, 50)\" class=\"i\">None</span>)\n<span onmouseover=\"showTip(event, &#39;fs24&#39;, 51)\" onmouseout=\"hideTip(event, &#39;fs24&#39;, 51)\" class=\"i\">Check</span><span class=\"o\">.</span><span onmouseover=\"showTip(event, &#39;fs25&#39;, 52)\" onmouseout=\"hideTip(event, &#39;fs25&#39;, 52)\" class=\"i\">Quick</span> (<span onmouseover=\"showTip(event, &#39;fs1&#39;, 53)\" onmouseout=\"hideTip(event, &#39;fs1&#39;, 53)\" class=\"i\">isAssociative</span> <span onmouseover=\"showTip(event, &#39;fs21&#39;, 54)\" onmouseout=\"hideTip(event, &#39;fs21&#39;, 54)\" class=\"i\">right'</span>)</pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<h2>A less trivial case</h2>\n\n<p>But what about mixing both ? Some events change the value by increments, while some other set a specific value ? Like a stopwatch that increments with a button to reset it.</p>\n\n<p>&#160;</p>\n\n<p>Can we model this kind of thing as a monoid ?</p>\n\n<p>&#160;</p>\n\n<p>We have an increment or a reset value, let's model it as a discriminated union:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">type</span> <span onmouseover=\"showTip(event, &#39;fs26&#39;, 55)\" onmouseout=\"hideTip(event, &#39;fs26&#39;, 55)\" class=\"i\">ChangeReset</span><span class=\"o\">&lt;</span><span class=\"o\">'</span><span class=\"i\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    | <span onmouseover=\"showTip(event, &#39;fs27&#39;, 56)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 56)\" class=\"i\">Change</span> <span class=\"k\">of</span> <span class=\"o\">'</span><span class=\"i\">T</span>\n    | <span onmouseover=\"showTip(event, &#39;fs28&#39;, 57)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 57)\" class=\"i\">Reset</span> <span class=\"k\">of</span> <span class=\"o\">'</span><span class=\"i\">T</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>&#160;</p>\n\n<p>A map function, that map events to state change, would be something like:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs29&#39;, 58)\" onmouseout=\"hideTip(event, &#39;fs29&#39;, 58)\" class=\"i\">map''</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span onmouseover=\"showTip(event, &#39;fs30&#39;, 59)\" onmouseout=\"hideTip(event, &#39;fs30&#39;, 59)\" class=\"i\">TimePassed</span> <span onmouseover=\"showTip(event, &#39;fs31&#39;, 60)\" onmouseout=\"hideTip(event, &#39;fs31&#39;, 60)\" class=\"i\">duration</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs27&#39;, 61)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 61)\" class=\"i\">Change</span> <span onmouseover=\"showTip(event, &#39;fs31&#39;, 62)\" onmouseout=\"hideTip(event, &#39;fs31&#39;, 62)\" class=\"i\">duration</span>\n    | <span onmouseover=\"showTip(event, &#39;fs32&#39;, 63)\" onmouseout=\"hideTip(event, &#39;fs32&#39;, 63)\" class=\"i\">ButtonPushed</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs28&#39;, 64)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 64)\" class=\"i\">Reset</span> <span class=\"n\">0.</span>\n    | _ <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs27&#39;, 65)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 65)\" class=\"i\">Change</span> <span class=\"n\">0.</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>The first two cases are a direct mapping, for other events, we use the Change 0. values that actually use the neutral element of the underlying monoid. Adding 0 will not change the value.</p>\n\n<p>&#160;</p>\n\n<p>We have here an underlying monoid, here, talking about duration, we use numbers, with addition and 0. </p>\n\n<p>&#160;</p>\n\n<p>But imagine we want to add items to a list, but sometime, reset the list to a specific one like the empty list.</p>\n\n<p>&#160;</p>\n\n<p>we can define a high order combine operation like this:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs33&#39;, 66)\" onmouseout=\"hideTip(event, &#39;fs33&#39;, 66)\" class=\"i\">combine'</span> <span class=\"o\">(*)</span> <span onmouseover=\"showTip(event, &#39;fs34&#39;, 67)\" onmouseout=\"hideTip(event, &#39;fs34&#39;, 67)\" class=\"i\">x</span> <span onmouseover=\"showTip(event, &#39;fs35&#39;, 68)\" onmouseout=\"hideTip(event, &#39;fs35&#39;, 68)\" class=\"i\">y</span> <span class=\"o\">=</span>\n    <span class=\"k\">match</span> <span onmouseover=\"showTip(event, &#39;fs34&#39;, 69)\" onmouseout=\"hideTip(event, &#39;fs34&#39;, 69)\" class=\"i\">x</span>,<span onmouseover=\"showTip(event, &#39;fs35&#39;, 70)\" onmouseout=\"hideTip(event, &#39;fs35&#39;, 70)\" class=\"i\">y</span> <span class=\"k\">with</span>\n    | <span onmouseover=\"showTip(event, &#39;fs27&#39;, 71)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 71)\" class=\"i\">Change</span> <span onmouseover=\"showTip(event, &#39;fs36&#39;, 72)\" onmouseout=\"hideTip(event, &#39;fs36&#39;, 72)\" class=\"i\">xi</span>, <span onmouseover=\"showTip(event, &#39;fs27&#39;, 73)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 73)\" class=\"i\">Change</span> <span onmouseover=\"showTip(event, &#39;fs37&#39;, 74)\" onmouseout=\"hideTip(event, &#39;fs37&#39;, 74)\" class=\"i\">yi</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs27&#39;, 75)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 75)\" class=\"i\">Change</span> (<span class=\"i\">xi</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs37&#39;, 76)\" onmouseout=\"hideTip(event, &#39;fs37&#39;, 76)\" class=\"i\">yi</span>)\n    | <span onmouseover=\"showTip(event, &#39;fs28&#39;, 77)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 77)\" class=\"i\">Reset</span> <span onmouseover=\"showTip(event, &#39;fs38&#39;, 78)\" onmouseout=\"hideTip(event, &#39;fs38&#39;, 78)\" class=\"i\">xv</span>, <span onmouseover=\"showTip(event, &#39;fs27&#39;, 79)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 79)\" class=\"i\">Change</span> <span onmouseover=\"showTip(event, &#39;fs37&#39;, 80)\" onmouseout=\"hideTip(event, &#39;fs37&#39;, 80)\" class=\"i\">yi</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs28&#39;, 81)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 81)\" class=\"i\">Reset</span> (<span class=\"i\">xv</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs37&#39;, 82)\" onmouseout=\"hideTip(event, &#39;fs37&#39;, 82)\" class=\"i\">yi</span>)\n    | _ , <span onmouseover=\"showTip(event, &#39;fs28&#39;, 83)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 83)\" class=\"i\">Reset</span> <span onmouseover=\"showTip(event, &#39;fs39&#39;, 84)\" onmouseout=\"hideTip(event, &#39;fs39&#39;, 84)\" class=\"i\">yv</span> <span class=\"k\">-&gt;</span> <span onmouseover=\"showTip(event, &#39;fs28&#39;, 85)\" onmouseout=\"hideTip(event, &#39;fs28&#39;, 85)\" class=\"i\">Reset</span> <span onmouseover=\"showTip(event, &#39;fs39&#39;, 86)\" onmouseout=\"hideTip(event, &#39;fs39&#39;, 86)\" class=\"i\">yv</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>It combines to changes as a new change using the underlying monoid operation - called '*' here. It combines changes as a change.</p>\n\n<p>&#160;</p>\n\n<p>The second line states, that a value (Reset) combined with a change will apply the change to the value.</p>\n\n<p>&#160;</p>\n\n<p>But the third line says that when a Reset value is on the right of anything, it overrides what's on it's left.</p>\n\n<p>This operation is by it's signature closed on the ChangeReset&lt;'t&gt; type.</p>\n\n<p>&#160;</p>\n\n<p>It's associative, because while combining changes, it has the associativity of the underlying monoid, and when combining Reset values it has the associativity of the right operation.</p>\n\n<p>&#160;</p>\n\n<p>The neutral element is a change with the value of the neutral element of the underlying monoid.</p>\n\n<p>&#160;</p>\n\n<p>We can verify it with FsCheck:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span>\n<span class=\"l\">2: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span onmouseover=\"showTip(event, &#39;fs24&#39;, 87)\" onmouseout=\"hideTip(event, &#39;fs24&#39;, 87)\" class=\"i\">Check</span><span class=\"o\">.</span><span onmouseover=\"showTip(event, &#39;fs25&#39;, 88)\" onmouseout=\"hideTip(event, &#39;fs25&#39;, 88)\" class=\"i\">Quick</span> (<span onmouseover=\"showTip(event, &#39;fs5&#39;, 89)\" onmouseout=\"hideTip(event, &#39;fs5&#39;, 89)\" class=\"i\">isNeutralElement</span> (<span onmouseover=\"showTip(event, &#39;fs33&#39;, 90)\" onmouseout=\"hideTip(event, &#39;fs33&#39;, 90)\" class=\"i\">combine'</span> (<span class=\"o\">+</span>)) (<span onmouseover=\"showTip(event, &#39;fs27&#39;, 91)\" onmouseout=\"hideTip(event, &#39;fs27&#39;, 91)\" class=\"i\">Change</span> <span class=\"n\">0</span>))\n<span onmouseover=\"showTip(event, &#39;fs24&#39;, 92)\" onmouseout=\"hideTip(event, &#39;fs24&#39;, 92)\" class=\"i\">Check</span><span class=\"o\">.</span><span onmouseover=\"showTip(event, &#39;fs25&#39;, 93)\" onmouseout=\"hideTip(event, &#39;fs25&#39;, 93)\" class=\"i\">Quick</span> (<span onmouseover=\"showTip(event, &#39;fs1&#39;, 94)\" onmouseout=\"hideTip(event, &#39;fs1&#39;, 94)\" class=\"i\">isAssociative</span> (<span onmouseover=\"showTip(event, &#39;fs33&#39;, 95)\" onmouseout=\"hideTip(event, &#39;fs33&#39;, 95)\" class=\"i\">combine'</span> (<span class=\"o\">+</span>)))</pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<h2>General structure</h2>\n\n<p>I had some remarks that we needed it to be a group and not only a monoid. The right' and combine function clearly don't define a group because elements don't have a inverse/opposite.</p>\n\n<p>&#160;</p>\n\n<p>What would be the opposite of Reset 5 ? It set the value 5 whatever is on its left.</p>\n\n<p>&#160;</p>\n\n<p>The idea is to take the set of state values S.</p>\n\n<p>&#160;</p>\n\n<p>Then take the set of changes from states in S to other states in S that are represented by the events.</p>\n\n<p>&#160;</p>\n\n<p>Make the union of it. SC = S U C. SC will contain more that valid aggregate states. It will also contain things that are not state, like a value that indicate that the state did not change.</p>\n\n<p>&#160;</p>\n\n<p>But we will ensure the following things: the function that convert to changes will return items of C:</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"i\">map</span><span class=\"o\">:</span> <span onmouseover=\"showTip(event, &#39;fs40&#39;, 96)\" onmouseout=\"hideTip(event, &#39;fs40&#39;, 96)\" class=\"i\">Event</span> <span class=\"k\">-&gt;</span> <span class=\"i\">C</span> </pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>The combine operation will be closed on SC, so it can accept States from S and change from C, and it will be closed on SC: combine: </p>\n\n<p>SC -&gt; SC -&gt; SC</p>\n\n<p>&#160;</p>\n\n<p>But it will also ensure that when a state is given on the left, it will also return a state:</p>\n\n<p>combine:&#160; S -&gt; SC -&gt; S</p>\n\n<p>&#160;</p>\n\n<p>The right' operation ensure this. The state need a value at its start, you can add as many None on the right, it'll still have it's value, and any new value will return this value.</p>\n\n<p>&#160;</p>\n\n<p>For the ChangeReset type, the State is represented by the Reset values -that are actual values- it's S, while changes are represented by the Change values that define C.</p>\n\n<p>&#160;</p>\n\n<p>As long as a Reset value is given at the outmost left, the result will be a Reset value that is part of S.</p>\n\n<p>With this, we don't need a group, but we can do with something that is only slightly more restraint than a monoid, only to keep the semantic of state.</p>\n\n<h2>But we need more that a single value !</h2>\n\n<p>Of course aggregate state is usually composed of more than a single value.</p>\n\n<p>&#160;</p>\n\n<p>Let's start small and consider a pair.</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">type</span> <span onmouseover=\"showTip(event, &#39;fs41&#39;, 97)\" onmouseout=\"hideTip(event, &#39;fs41&#39;, 97)\" class=\"i\">State</span><span class=\"o\">&lt;</span><span class=\"o\">'</span><span class=\"i\">a</span>,<span class=\"o\">'</span><span class=\"i\">b</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">'</span><span class=\"i\">a</span> <span class=\"o\">*</span> <span class=\"o\">'</span><span class=\"i\">b</span></pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>&#160;</p>\n\n<p>If 'a and 'b are monoids we can easily combine them :</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs42&#39;, 98)\" onmouseout=\"hideTip(event, &#39;fs42&#39;, 98)\" class=\"i\">combine''</span> (<span class=\"o\">+</span>) <span class=\"o\">(*)</span> (<span onmouseover=\"showTip(event, &#39;fs43&#39;, 99)\" onmouseout=\"hideTip(event, &#39;fs43&#39;, 99)\" class=\"i\">xa</span>,<span onmouseover=\"showTip(event, &#39;fs44&#39;, 100)\" onmouseout=\"hideTip(event, &#39;fs44&#39;, 100)\" class=\"i\">xb</span>) (<span onmouseover=\"showTip(event, &#39;fs45&#39;, 101)\" onmouseout=\"hideTip(event, &#39;fs45&#39;, 101)\" class=\"i\">ya</span>,<span onmouseover=\"showTip(event, &#39;fs46&#39;, 102)\" onmouseout=\"hideTip(event, &#39;fs46&#39;, 102)\" class=\"i\">yb</span>) <span class=\"o\">=</span> (<span onmouseover=\"showTip(event, &#39;fs43&#39;, 103)\" onmouseout=\"hideTip(event, &#39;fs43&#39;, 103)\" class=\"i\">xa</span> <span class=\"o\">+</span> <span onmouseover=\"showTip(event, &#39;fs45&#39;, 104)\" onmouseout=\"hideTip(event, &#39;fs45&#39;, 104)\" class=\"i\">ya</span>, <span onmouseover=\"showTip(event, &#39;fs44&#39;, 105)\" onmouseout=\"hideTip(event, &#39;fs44&#39;, 105)\" class=\"i\">xb</span> <span class=\"o\">*</span> <span onmouseover=\"showTip(event, &#39;fs46&#39;, 106)\" onmouseout=\"hideTip(event, &#39;fs46&#39;, 106)\" class=\"i\">yb</span>)</pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>where + is the operation on 'a and * the operation on 'b.</p>\n\n<p>&#160;</p>\n\n<p>The neutral element is simply</p>\n\n<table class=\"pre\"><tbody>\n    <tr>\n      <td class=\"lines\">\n        <pre class=\"fssnip\"><span class=\"l\">1: </span></pre>\n      </td>\n\n      <td class=\"snippet\">\n        <pre class=\"fssnip\"><span class=\"k\">let</span> <span onmouseover=\"showTip(event, &#39;fs47&#39;, 107)\" onmouseout=\"hideTip(event, &#39;fs47&#39;, 107)\" class=\"i\">neutral</span> <span onmouseover=\"showTip(event, &#39;fs48&#39;, 108)\" onmouseout=\"hideTip(event, &#39;fs48&#39;, 108)\" class=\"i\">neutrala</span> <span onmouseover=\"showTip(event, &#39;fs49&#39;, 109)\" onmouseout=\"hideTip(event, &#39;fs49&#39;, 109)\" class=\"i\">neutralb</span> <span class=\"o\">=</span> (<span onmouseover=\"showTip(event, &#39;fs48&#39;, 110)\" onmouseout=\"hideTip(event, &#39;fs48&#39;, 110)\" class=\"i\">neutrala</span>, <span onmouseover=\"showTip(event, &#39;fs49&#39;, 111)\" onmouseout=\"hideTip(event, &#39;fs49&#39;, 111)\" class=\"i\">neutralb</span>)</pre>\n      </td>\n    </tr>\n  </tbody></table>\n\n<p>You can easily check that combine is closed on operation, associative, and that neutral is the neutral element.</p>\n\n<p>&#160;</p>\n\n<p>recursively, you can build a triple as a pair of a pair with a single element (('a,'b), 'c), then a quadruple and any tuple.</p>\n\n<p>&#160;</p>\n\n<p>Since a structure - a record - is just a tuple with names, any struct with monoidal members is also a monoid.</p>\n\n<p>&#160;</p>\n\n<p>And since in Event Sourcing, all the tricky decisions are done before emitting an event, applying the event should just be setting values, incrementing / decrementing values, adding / removing items to sets or lists, all those operation are monoidal, hence almost all aggregates should be convertible to monoidal Event Sourcing.</p>\n\n<p>&#160;</p>\n\n<p>Of course it doesn't mean you should do Event Sourcing this way, but it was rather funny to explore this !</p>\n\n<p>&#160;</p>\n\n<p>Have fun !</p>","<p>Last time we tried to imagine how we could change usual event sourcing\ndefinition$ to get a monoidal approach.</p>\n<p>Â </p>\n<p>Here are some examples to make it work in real life.</p>\n<h2>Monoids properties</h2>\n<p>We'll try to do it properly, and test that the proposed solutions are proper\nmonoids.</p>\n<p>Â </p>\n<p>Let's recap what defines a monoid:</p>\n<ul>\n<li>closure of operation</li>\n<li>associativity</li>\n<li>neutral element</li>\n</ul>\n<h2>How to test it</h2>\n<p>the closure of operation is given by the signature of the operation. In F#\nit should have a signature like 'a -&gt; 'a â&gt; 'a which represents a\nfunction that takes to arguments of type 'a and return a result of the same\ntype 'a.</p>\n<p>Â </p>\n<p>For associativity, we'll use the following test function:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">isAssociative</span> <span class=\"o\">(*)</span> <span class=\"i\">x</span> <span class=\"i\">y</span> <span class=\"i\">z</span> <span class=\"o\">=</span>\n   ((<span class=\"i\">x</span> <span class=\"o\">*</span> <span class=\"i\">y</span>) <span class=\"o\">*</span> <span class=\"i\">z</span>) <span class=\"o\">=</span> (<span class=\"i\">x</span> <span class=\"o\">*</span> (<span class=\"i\">y</span> <span class=\"o\">*</span> <span class=\"i\">z</span>))\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>It take a function that will be called '<em>' and three values x y z. It\nwill then test the associativity of '</em>' using FsCheck, a F# port of\nQuickCheck.</p>\n<p>Â </p>\n<p>FsCheck test the given property for a wide range of values. We'll just have\nto provide the operator, and FsCheck will check it the associativity holds for\na lot of values.</p>\n<p>Â </p>\n<p>For the neutral element, will use the following test function:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">isNeutralElement</span> <span class=\"o\">(*)</span> <span class=\"i\">neutral</span> <span class=\"i\">x</span> <span class=\"o\">=</span>\n    <span class=\"i\">x</span> <span class=\"o\">*</span> <span class=\"i\">neutral</span> <span class=\"o\">=</span> <span class=\"i\">neutral</span> <span class=\"o\">*</span> <span class=\"i\">x</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>Here we'll have to provide the the operator - called '*' inside the function\n- and the neutral element.</p>\n<h2>Trivial cases</h2>\n<p>There are some obvious trivial cases.</p>\n<p>Â </p>\n<p>Let's try to follow the number of occurrences of a specific event in state.\nThe number of time a user did</p>\n<p>something.</p>\n<p>Â </p>\n<p>The map function is simply:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">map</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span class=\"i\">TheUserDidSomething</span> <span class=\"k\">-&gt;</span> <span class=\"n\">1</span>\n    | _ <span class=\"k\">-&gt;</span> <span class=\"n\">0</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>The combine operation is then really simple:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">combine</span> <span class=\"i\">acc</span> <span class=\"i\">v</span> <span class=\"o\">=</span> <span class=\"i\">acc</span> <span class=\"o\">+</span> <span class=\"i\">v</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>and the neutral element is obviously 0.</p>\n<p>Â </p>\n<p>No need to check it with FsCheck, (N, +, 0) is a monoid..</p>\n<p>Â </p>\n<p>Another a bit less obvious is when an event sets a value while others\ndon't.</p>\n<p>Â </p>\n<p>For instance, let's keep track of the last user address when a user\nmoves.</p>\n<p>Â </p>\n<p>For combination, we'll use the 'right' function, which always takes it's\nrightmost argument:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">right</span> <span class=\"i\">x</span> <span class=\"i\">y</span> <span class=\"o\">=</span> <span class=\"i\">y</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>The adress should, of course, not change on other events, and for that,\nwe'll use an option:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">map'</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span class=\"i\">UserMoved</span> (<span class=\"i\">user</span>, <span class=\"i\">newAddress</span>) <span class=\"k\">-&gt;</span> <span class=\"i\">Some</span> <span class=\"i\">newAddress</span>\n    | _ <span class=\"k\">-&gt;</span> <span class=\"i\">None</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>The right function can then be tweaked to take the right argument only when\nit has a value:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">right'</span> <span class=\"i\">x</span> <span class=\"i\">y</span> <span class=\"o\">=</span>\n    <span class=\"k\">match</span> <span class=\"i\">x</span>,<span class=\"i\">y</span> <span class=\"k\">with</span>\n    | <span class=\"i\">x</span>, <span class=\"i\">None</span> <span class=\"k\">-&gt;</span> <span class=\"i\">x</span>\n    | _, <span class=\"i\">y</span> <span class=\"k\">-&gt;</span> <span class=\"i\">y</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>right' has a signature of 'a option -&gt; 'a option -&gt; 'a option, so it's\nclosed on operation.</p>\n<p>Â </p>\n<p>It's associative since, whatever x y z, (x right' y right' z) return the\nlast defined term, however composed.</p>\n<p>Â </p>\n<p>None is the neutral element. Added to the left, it keeps what's on the\nright, added to the right, it keeps what's on the left.</p>\n<p>Â </p>\n<p>We can check it with FsCheck:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"i\">Check</span><span class=\"o\">.</span><span class=\"i\">Quick</span> (<span class=\"i\">isNeutralElement</span> <span class=\"i\">right'</span> <span class=\"i\">None</span>)\n<span class=\"i\">Check</span><span class=\"o\">.</span><span class=\"i\">Quick</span> (<span class=\"i\">isAssociative</span> <span class=\"i\">right'</span>)\n</pre></td>\n</tr>\n</tbody>\n</table>\n<h2>A less trivial case</h2>\n<p>But what about mixing both ? Some events change the value by increments,\nwhile some other set a specific value ? Like a stopwatch that increments with a\nbutton to reset it.</p>\n<p>Â </p>\n<p>Can we model this kind of thing as a monoid ?</p>\n<p>Â </p>\n<p>We have an increment or a reset value, let's model it as a discriminated\nunion:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">type</span> <span class=\"i\">ChangeReset</span><span class=\"o\">&lt;</span><span class=\"o\">'</span><span class=\"i\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    | <span class=\"i\">Change</span> <span class=\"k\">of</span> <span class=\"o\">'</span><span class=\"i\">T</span>\n    | <span class=\"i\">Reset</span> <span class=\"k\">of</span> <span class=\"o\">'</span><span class=\"i\">T</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>Â </p>\n<p>A map function, that map events to state change, would be something\nlike:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">map''</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span class=\"i\">TimePassed</span> <span class=\"i\">duration</span> <span class=\"k\">-&gt;</span> <span class=\"i\">Change</span> <span class=\"i\">duration</span>\n    | <span class=\"i\">ButtonPushed</span> <span class=\"k\">-&gt;</span> <span class=\"i\">Reset</span> <span class=\"n\">0.</span>\n    | _ <span class=\"k\">-&gt;</span> <span class=\"i\">Change</span> <span class=\"n\">0.</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>The first two cases are a direct mapping, for other events, we use the\nChange 0. values that actually use the neutral element of the underlying\nmonoid. Adding 0 will not change the value.</p>\n<p>Â </p>\n<p>We have here an underlying monoid, here, talking about duration, we use\nnumbers, with addition and 0.</p>\n<p>Â </p>\n<p>But imagine we want to add items to a list, but sometime, reset the list to\na specific one like the empty list.</p>\n<p>Â </p>\n<p>we can define a high order combine operation like this:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">combine'</span> <span class=\"o\">(*)</span> <span class=\"i\">x</span> <span class=\"i\">y</span> <span class=\"o\">=</span>\n    <span class=\"k\">match</span> <span class=\"i\">x</span>,<span class=\"i\">y</span> <span class=\"k\">with</span>\n    | <span class=\"i\">Change</span> <span class=\"i\">xi</span>, <span class=\"i\">Change</span> <span class=\"i\">yi</span> <span class=\"k\">-&gt;</span> <span class=\"i\">Change</span> (<span class=\"i\">xi</span> <span class=\"o\">*</span> <span class=\"i\">yi</span>)\n    | <span class=\"i\">Reset</span> <span class=\"i\">xv</span>, <span class=\"i\">Change</span> <span class=\"i\">yi</span> <span class=\"k\">-&gt;</span> <span class=\"i\">Reset</span> (<span class=\"i\">xv</span> <span class=\"o\">*</span> <span class=\"i\">yi</span>)\n    | _ , <span class=\"i\">Reset</span> <span class=\"i\">yv</span> <span class=\"k\">-&gt;</span> <span class=\"i\">Reset</span> <span class=\"i\">yv</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>It combines to changes as a new change using the underlying monoid operation\n- called '*' here. It combines changes as a change.</p>\n<p>Â </p>\n<p>The second line states, that a value (Reset) combined with a change will\napply the change to the value.</p>\n<p>Â </p>\n<p>But the third line says that when a Reset value is on the right of anything,\nit overrides what's on it's left.</p>\n<p>This operation is by it's signature closed on the ChangeReset&lt;'t&gt;\ntype.</p>\n<p>Â </p>\n<p>It's associative, because while combining changes, it has the associativity\nof the underlying monoid, and when combining Reset values it has the\nassociativity of the right operation.</p>\n<p>Â </p>\n<p>The neutral element is a change with the value of the neutral element of the\nunderlying monoid.</p>\n<p>Â </p>\n<p>We can verify it with FsCheck:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"i\">Check</span><span class=\"o\">.</span><span class=\"i\">Quick</span> (<span class=\"i\">isNeutralElement</span> (<span class=\"i\">combine'</span> (<span class=\"o\">+</span>)) (<span class=\"i\">Change</span> <span class=\"n\">0</span>))\n<span class=\"i\">Check</span><span class=\"o\">.</span><span class=\"i\">Quick</span> (<span class=\"i\">isAssociative</span> (<span class=\"i\">combine'</span> (<span class=\"o\">+</span>)))\n</pre></td>\n</tr>\n</tbody>\n</table>\n<h2>General structure</h2>\n<p>I had some remarks that we needed it to be a group and not only a monoid.\nThe right' and combine function clearly don't define a group because elements\ndon't have a inverse/opposite.</p>\n<p>Â </p>\n<p>What would be the opposite of Reset 5 ? It set the value 5 whatever is on\nits left.</p>\n<p>Â </p>\n<p>The idea is to take the set of state values S.</p>\n<p>Â </p>\n<p>Then take the set of changes from states in S to other states in S that are\nrepresented by the events.</p>\n<p>Â </p>\n<p>Make the union of it. SC = S U C. SC will contain more that valid aggregate\nstates. It will also contain things that are not state, like a value that\nindicate that the state did not change.</p>\n<p>Â </p>\n<p>But we will ensure the following things: the function that convert to\nchanges will return items of C:</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"i\">map</span><span class=\"o\">:</span> <span class=\"i\">Event</span> <span class=\"k\">-&gt;</span> <span class=\"i\">C</span> \n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>The combine operation will be closed on SC, so it can accept States from S\nand change from C, and it will be closed on SC: combine:</p>\n<p>SC -&gt; SC -&gt; SC</p>\n<p>Â </p>\n<p>But it will also ensure that when a state is given on the left, it will also\nreturn a state:</p>\n<p>combine:Â  S -&gt; SC -&gt; S</p>\n<p>Â </p>\n<p>The right' operation ensure this. The state need a value at its start, you\ncan add as many None on the right, it'll still have it's value, and any new\nvalue will return this value.</p>\n<p>Â </p>\n<p>For the ChangeReset type, the State is represented by the Reset values -that\nare actual values- it's S, while changes are represented by the Change values\nthat define C.</p>\n<p>Â </p>\n<p>As long as a Reset value is given at the outmost left, the result will be a\nReset value that is part of S.</p>\n<p>With this, we don't need a group, but we can do with something that is only\nslightly more restraint than a monoid, only to keep the semantic of state.</p>\n<h2>But we need more that a single value !</h2>\n<p>Of course aggregate state is usually composed of more than a single\nvalue.</p>\n<p>Â </p>\n<p>Let's start small and consider a pair.</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">type</span> <span class=\"i\">State</span><span class=\"o\">&lt;</span><span class=\"o\">'</span><span class=\"i\">a</span>,<span class=\"o\">'</span><span class=\"i\">b</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">'</span><span class=\"i\">a</span> <span class=\"o\">*</span> <span class=\"o\">'</span><span class=\"i\">b</span>\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>Â </p>\n<p>If 'a and 'b are monoids we can easily combine them :</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">combine''</span> (<span class=\"o\">+</span>) <span class=\"o\">(*)</span> (<span class=\"i\">xa</span>,<span class=\"i\">xb</span>) (<span class=\"i\">ya</span>,<span class=\"i\">yb</span>) <span class=\"o\">=</span> (<span class=\"i\">xa</span> <span class=\"o\">+</span> <span class=\"i\">ya</span>, <span class=\"i\">xb</span> <span class=\"o\">*</span> <span class=\"i\">yb</span>)\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>where + is the operation on 'a and * the operation on 'b.</p>\n<p>Â </p>\n<p>The neutral element is simply</p>\n<table class=\"pre\">\n<tbody>\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">neutral</span> <span class=\"i\">neutrala</span> <span class=\"i\">neutralb</span> <span class=\"o\">=</span> (<span class=\"i\">neutrala</span>, <span class=\"i\">neutralb</span>)\n</pre></td>\n</tr>\n</tbody>\n</table>\n<p>You can easily check that combine is closed on operation, associative, and\nthat neutral is the neutral element.</p>\n<p>Â </p>\n<p>recursively, you can build a triple as a pair of a pair with a single\nelement (('a,'b), 'c), then a quadruple and any tuple.</p>\n<p>Â </p>\n<p>Since a structure - a record - is just a tuple with names, any struct with\nmonoidal members is also a monoid.</p>\n<p>Â </p>\n<p>And since in Event Sourcing, all the tricky decisions are done before\nemitting an event, applying the event should just be setting values,\nincrementing / decrementing values, adding / removing items to sets or lists,\nall those operation are monoidal, hence almost all aggregates should be\nconvertible to monoidal Event Sourcing.</p>\n<p>Â </p>\n<p>Of course it doesn't mean you should do Event Sourcing this way, but it was\nrather funny to explore this !</p>\n<p>Â </p>\n<p>Have fun !</p>","","monoidal event sourcing examples last time tried imagine how could change usual event sourcing definition get monoidal approach here are some examples make work real life monoids properties try properly and test that the proposed solutions are proper monoids let recap what defines monoid closure operation associativity neutral element how test the closure operation given the signature the operation should have signature like which represents function that takes arguments type and return result the same type for associativity use the following test function let isassociative take function that will called and three values will then test the associativity using fscheck port quickcheck fscheck test the given property for wide range values just have provide the operator and fscheck will check the associativity holds for lot values for the neutral element will use the following test function let isneutralelement neutral neutral neutral here have provide the the operator called inside the function and the neutral element trivial cases there are some obvious trivial cases let try follow the number occurrences specific event state the number time user did something the map function simply let map function theuserdidsomething the combine operation then really simple let combine acc acc and the neutral element obviously need check with fscheck monoid another bit less obvious when event sets value while others don for instance let keep track the last user address when user moves for combination use the right function which always takes rightmost argument let right the adress should course not change other events and for that use option let map function usermoved user newaddress some newaddress none the right function can then tweaked take the right argument only when has value let right match with none right has signature option option option closed operation associative since whatever right right return the last defined term however composed none the neutral element added the left keeps what the right added the right keeps what the left can check with fscheck check quick isneutralelement right none check quick isassociative right less trivial case but what about mixing both some events change the value increments while some other set specific value like stopwatch that increments with button reset can model this kind thing monoid have increment reset value let model discriminated union type changereset change reset map function that map events state change would something like let map function timepassed duration change duration buttonpushed reset change the first two cases are direct mapping for other events use the change values that actually use the neutral element the underlying monoid adding will not change the value have here underlying monoid here talking about duration use numbers with addition and but imagine want add items list but sometime reset the list specific one like the empty list can define high order combine operation like this let combine match with change change change reset change reset reset reset combines changes new change using the underlying monoid operation called here combines changes change the second line states that value reset combined with change will apply the change the value but the third line says that when reset value the right anything overrides what left this operation signature closed the changereset type associative because while combining changes has the associativity the underlying monoid and when combining reset values has the associativity the right operation the neutral element change with the value the neutral element the underlying monoid can verify with fscheck check quick isneutralelement combine change check quick isassociative combine general structure had some remarks that needed group and not only monoid the right and combine function clearly don define group because elements don have inverse opposite what would the opposite reset set the value whatever its left the idea take the set state values then take the set changes from states other states that are represented the events make the union will contain more that valid aggregate states will also contain things that are not state like value that indicate that the state did not change but will ensure the following things the function that convert changes will return items map event the combine operation will closed can accept states from and change from and will closed combine but will also ensure that when state given the left will also return state combine the right operation ensure this the state need value its start you can add many none the right still have value and any new value will return this value for the changereset type the state represented the reset values that are actual values while changes are represented the change values that define long reset value given the outmost left the result will reset value that part with this don need group but can with something that only slightly more restraint than monoid only keep the semantic state but need more that single value course aggregate state usually composed more than single value let start small and consider pair type state and are monoids can easily combine them let combine where the operation and the operation the neutral element simply let neutral neutrala neutralb neutrala neutralb you can easily check that combine closed operation associative and that neutral the neutral element recursively you can build triple pair pair with single element then quadruple and any tuple since structure record just tuple with names any struct with monoidal members also monoid and since event sourcing all the tricky decisions are done before emitting event applying the event should just setting values incrementing decrementing values adding removing items sets lists all those operation are monoidal hence almost all aggregates should convertible monoidal event sourcing course doesn mean you should event sourcing this way but was rather funny explore this have fun","a:0:{}","1","0","1","1","0","0","0"
"805275","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","57399","2014-12-24 00:00:00","Europe/Paris","2014-12-23 10:17:32","2014-12-23 10:48:08","","post","xhtml","2014/12/23/Speaking-computers-for-more-fun-!","en","Speaking computers for more fun !","","","<p><em>I didn't try it on mono, but it should also work with some tweaking, see details <a href=\"http://go-mono.com/status/status.aspx?reference=4.0&amp;profile=4.5&amp;assembly=System.Speech\">here</a></em></p>\r\n\r\n<p>Xmas is a good time to surprise kids, and what's more fun than a talking computer ?!</p>\r\n\r\n<h2>Hello world !</h2>\r\n\r\n<p>Nothing's easier, and this kind of Hello World will appeal them to programming in a flash :</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"prep\">#r</span> <span class=\"s\">&quot;</span><span class=\"s\">System</span><span class=\"s\">.</span><span class=\"s\">Speech</span><span class=\"s\">&quot;</span>\r\n<span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs1', 1)\" onmouseover=\"showTip(event, 'fs1', 1)\" class=\"i\">System</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs2', 2)\" onmouseover=\"showTip(event, 'fs2', 2)\" class=\"i\">Speech</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs3', 3)\" onmouseover=\"showTip(event, 'fs3', 3)\" class=\"i\">Synthesis</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs4', 4)\" onmouseover=\"showTip(event, 'fs4', 4)\" class=\"i\">synt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span onmouseout=\"hideTip(event, 'fs5', 5)\" onmouseover=\"showTip(event, 'fs5', 5)\" class=\"i\">SpeechSynthesizer</span>()\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs6', 6)\" onmouseover=\"showTip(event, 'fs6', 6)\" class=\"i\">say</span> <span onmouseout=\"hideTip(event, 'fs7', 7)\" onmouseover=\"showTip(event, 'fs7', 7)\" class=\"i\">s</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs4', 8)\" onmouseover=\"showTip(event, 'fs4', 8)\" class=\"i\">synt</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs8', 9)\" onmouseover=\"showTip(event, 'fs8', 9)\" class=\"i\">Speak</span>(<span onmouseout=\"hideTip(event, 'fs7', 10)\" onmouseover=\"showTip(event, 'fs7', 10)\" class=\"i\">s</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs9', 11)\" onmouseover=\"showTip(event, 'fs9', 11)\" class=\"i\">string</span>)\r\n\r\n<span onmouseout=\"hideTip(event, 'fs6', 12)\" onmouseover=\"showTip(event, 'fs6', 12)\" class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">Hello</span><span class=\"s\"> </span><span class=\"s\">world</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span> </pre>\r\n\r\n\r\n<p>Of course, if you're french like me, it'll say this with an awful french accent - something\r\nlike <strong>hÃ©lo ouorld</strong> !</p>\r\n\r\n<p>But you can select a different voice if available by providing hints:</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs1', 13)\" onmouseover=\"showTip(event, 'fs1', 13)\" class=\"i\">System</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs10', 14)\" onmouseover=\"showTip(event, 'fs10', 14)\" class=\"i\">Globalization</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs11', 15)\" onmouseover=\"showTip(event, 'fs11', 15)\" class=\"i\">english</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs12', 16)\" onmouseover=\"showTip(event, 'fs12', 16)\" class=\"i\">CultureInfo</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs13', 17)\" onmouseover=\"showTip(event, 'fs13', 17)\" class=\"i\">GetCultureInfo</span>(<span class=\"s\">&quot;</span><span class=\"s\">en</span><span class=\"s\">-</span><span class=\"s\">US</span><span class=\"s\">&quot;</span>)\r\n\r\n<span onmouseout=\"hideTip(event, 'fs4', 18)\" onmouseover=\"showTip(event, 'fs4', 18)\" class=\"i\">synt</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs14', 19)\" onmouseover=\"showTip(event, 'fs14', 19)\" class=\"i\">SelectVoiceByHints</span>(<span onmouseout=\"hideTip(event, 'fs15', 20)\" onmouseover=\"showTip(event, 'fs15', 20)\" class=\"i\">VoiceGender</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs16', 21)\" onmouseover=\"showTip(event, 'fs16', 21)\" class=\"i\">NotSet</span>, <span onmouseout=\"hideTip(event, 'fs17', 22)\" onmouseover=\"showTip(event, 'fs17', 22)\" class=\"i\">VoiceAge</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs18', 23)\" onmouseover=\"showTip(event, 'fs18', 23)\" class=\"i\">NotSet</span>, <span class=\"n\">1</span>, <span onmouseout=\"hideTip(event, 'fs11', 24)\" onmouseover=\"showTip(event, 'fs11', 24)\" class=\"i\">english</span>)\r\n<span onmouseout=\"hideTip(event, 'fs6', 25)\" onmouseover=\"showTip(event, 'fs6', 25)\" class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">Hello</span><span class=\"s\"> </span><span class=\"s\">world</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span></pre>\r\n\r\n\r\n<p>Far better !</p>\r\n\r\n<h2>Can you beat it ?</h2>\r\n\r\n<p>Now, a talking fizz buzz, up to 100 ! Can you beat it ?</p>\r\n\r\n<pre class=\"fssnip\">\r\n[<span class=\"n\">1</span> <span class=\"o\">..</span> <span class=\"n\">100</span>]\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 26)\" onmouseover=\"showTip(event, 'fs19', 26)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs20', 27)\" onmouseover=\"showTip(event, 'fs20', 27)\" class=\"i\">map</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs21', 28)\" onmouseover=\"showTip(event, 'fs21', 28)\" class=\"i\">n</span> <span class=\"k\">-&gt;</span> \r\n    <span class=\"k\">match</span> <span onmouseout=\"hideTip(event, 'fs21', 29)\" onmouseover=\"showTip(event, 'fs21', 29)\" class=\"i\">n</span><span class=\"o\">%</span><span class=\"n\">3</span>, <span onmouseout=\"hideTip(event, 'fs21', 30)\" onmouseover=\"showTip(event, 'fs21', 30)\" class=\"i\">n</span><span class=\"o\">%</span><span class=\"n\">5</span> <span class=\"k\">with</span>\r\n    | <span class=\"n\">0</span>, <span class=\"n\">0</span> <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">FizzBuzz</span><span class=\"s\">&quot;</span>\r\n    | <span class=\"n\">0</span>, _ <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">Fizz</span><span class=\"s\">&quot;</span>\r\n    | _, <span class=\"n\">0</span> <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">Buzz</span><span class=\"s\">&quot;</span>\r\n    | _ <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs9', 31)\" onmouseover=\"showTip(event, 'fs9', 31)\" class=\"i\">string</span> <span onmouseout=\"hideTip(event, 'fs21', 32)\" onmouseover=\"showTip(event, 'fs21', 32)\" class=\"i\">n</span> )\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 33)\" onmouseover=\"showTip(event, 'fs19', 33)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs22', 34)\" onmouseover=\"showTip(event, 'fs22', 34)\" class=\"i\">iter</span> <span onmouseout=\"hideTip(event, 'fs6', 35)\" onmouseover=\"showTip(event, 'fs6', 35)\" class=\"i\">say</span></pre>\r\n\r\n\r\n<h2>Even harder !</h2>\r\n\r\n<p>Now with a recognizer, we can wait for voice user input.</p>\r\n\r\n<p>The problem with the Grammar API is that it's totally mutable and not really DSL oriented.\r\nLet's correct that :</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs1', 36)\" onmouseover=\"showTip(event, 'fs1', 36)\" class=\"i\">System</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs2', 37)\" onmouseover=\"showTip(event, 'fs2', 37)\" class=\"i\">Speech</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs23', 38)\" onmouseover=\"showTip(event, 'fs23', 38)\" class=\"i\">Recognition</span>\r\n\r\n<span class=\"k\">type</span> <span onmouseout=\"hideTip(event, 'fs24', 39)\" onmouseover=\"showTip(event, 'fs24', 39)\" class=\"i\">Grammar</span> <span class=\"o\">=</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs25', 40)\" onmouseover=\"showTip(event, 'fs25', 40)\" class=\"i\">Phrase</span> <span class=\"k\">of</span> <span class=\"i\">text</span><span class=\"o\">:</span><span onmouseout=\"hideTip(event, 'fs9', 41)\" onmouseover=\"showTip(event, 'fs9', 41)\" class=\"i\">string</span> <span class=\"o\">*</span> <span class=\"i\">result</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs9', 42)\" onmouseover=\"showTip(event, 'fs9', 42)\" class=\"i\">string</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs26', 43)\" onmouseover=\"showTip(event, 'fs26', 43)\" class=\"i\">Lst</span> <span class=\"k\">of</span> <span onmouseout=\"hideTip(event, 'fs24', 44)\" onmouseover=\"showTip(event, 'fs24', 44)\" class=\"i\">Grammar</span> <span onmouseout=\"hideTip(event, 'fs27', 45)\" onmouseover=\"showTip(event, 'fs27', 45)\" class=\"i\">list</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs28', 46)\" onmouseover=\"showTip(event, 'fs28', 46)\" class=\"i\">Alt</span> <span class=\"k\">of</span> <span onmouseout=\"hideTip(event, 'fs24', 47)\" onmouseover=\"showTip(event, 'fs24', 47)\" class=\"i\">Grammar</span> <span onmouseout=\"hideTip(event, 'fs27', 48)\" onmouseover=\"showTip(event, 'fs27', 48)\" class=\"i\">list</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs29', 49)\" onmouseover=\"showTip(event, 'fs29', 49)\" class=\"i\">Repeat</span> <span class=\"k\">of</span> <span onmouseout=\"hideTip(event, 'fs30', 50)\" onmouseover=\"showTip(event, 'fs30', 50)\" class=\"i\">min</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs31', 51)\" onmouseover=\"showTip(event, 'fs31', 51)\" class=\"i\">int</span> <span class=\"o\">*</span> <span onmouseout=\"hideTip(event, 'fs32', 52)\" onmouseover=\"showTip(event, 'fs32', 52)\" class=\"i\">max</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs31', 53)\" onmouseover=\"showTip(event, 'fs31', 53)\" class=\"i\">int</span> <span class=\"o\">*</span> <span onmouseout=\"hideTip(event, 'fs24', 54)\" onmouseover=\"showTip(event, 'fs24', 54)\" class=\"i\">Grammar</span>\r\n\r\n\r\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span onmouseout=\"hideTip(event, 'fs33', 55)\" onmouseover=\"showTip(event, 'fs33', 55)\" class=\"i\">build</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs25', 56)\" onmouseover=\"showTip(event, 'fs25', 56)\" class=\"i\">Phrase</span> (<span onmouseout=\"hideTip(event, 'fs34', 57)\" onmouseover=\"showTip(event, 'fs34', 57)\" class=\"i\">text</span>, <span onmouseout=\"hideTip(event, 'fs35', 58)\" onmouseover=\"showTip(event, 'fs35', 58)\" class=\"i\">result</span>) <span class=\"k\">-&gt;</span> \r\n        <span class=\"c\">// Just build the a single phrase</span>\r\n        <span onmouseout=\"hideTip(event, 'fs36', 59)\" onmouseover=\"showTip(event, 'fs36', 59)\" class=\"i\">GrammarBuilder</span>(<span onmouseout=\"hideTip(event, 'fs37', 60)\" onmouseover=\"showTip(event, 'fs37', 60)\" class=\"i\">SemanticResultValue</span>(<span onmouseout=\"hideTip(event, 'fs34', 61)\" onmouseover=\"showTip(event, 'fs34', 61)\" class=\"i\">text</span>,<span onmouseout=\"hideTip(event, 'fs35', 62)\" onmouseover=\"showTip(event, 'fs35', 62)\" class=\"i\">result</span>))\r\n\r\n    | <span onmouseout=\"hideTip(event, 'fs26', 63)\" onmouseover=\"showTip(event, 'fs26', 63)\" class=\"i\">Lst</span> <span onmouseout=\"hideTip(event, 'fs38', 64)\" onmouseover=\"showTip(event, 'fs38', 64)\" class=\"i\">grammars</span> <span class=\"k\">-&gt;</span> \r\n        <span class=\"c\">// Append parts of grammars one after the other</span>\r\n        <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs39', 65)\" onmouseover=\"showTip(event, 'fs39', 65)\" class=\"i\">builder</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs36', 66)\" onmouseover=\"showTip(event, 'fs36', 66)\" class=\"i\">GrammarBuilder</span>()\r\n        <span onmouseout=\"hideTip(event, 'fs38', 67)\" onmouseover=\"showTip(event, 'fs38', 67)\" class=\"i\">grammars</span>\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 68)\" onmouseover=\"showTip(event, 'fs19', 68)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs20', 69)\" onmouseover=\"showTip(event, 'fs20', 69)\" class=\"i\">map</span> <span onmouseout=\"hideTip(event, 'fs33', 70)\" onmouseover=\"showTip(event, 'fs33', 70)\" class=\"i\">build</span>\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 71)\" onmouseover=\"showTip(event, 'fs19', 71)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs22', 72)\" onmouseover=\"showTip(event, 'fs22', 72)\" class=\"i\">iter</span> <span onmouseout=\"hideTip(event, 'fs39', 73)\" onmouseover=\"showTip(event, 'fs39', 73)\" class=\"i\">builder</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs40', 74)\" onmouseover=\"showTip(event, 'fs40', 74)\" class=\"i\">Append</span>\r\n        <span onmouseout=\"hideTip(event, 'fs39', 75)\" onmouseover=\"showTip(event, 'fs39', 75)\" class=\"i\">builder</span>\r\n\r\n    | <span onmouseout=\"hideTip(event, 'fs28', 76)\" onmouseover=\"showTip(event, 'fs28', 76)\" class=\"i\">Alt</span> <span onmouseout=\"hideTip(event, 'fs41', 77)\" onmouseover=\"showTip(event, 'fs41', 77)\" class=\"i\">alternatives</span> <span class=\"k\">-&gt;</span> \r\n        <span class=\"c\">// Create alternatives</span>\r\n        <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs42', 78)\" onmouseover=\"showTip(event, 'fs42', 78)\" class=\"i\">choices</span> <span class=\"o\">=</span>\r\n            <span onmouseout=\"hideTip(event, 'fs41', 79)\" onmouseover=\"showTip(event, 'fs41', 79)\" class=\"i\">alternatives</span>\r\n            <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 80)\" onmouseover=\"showTip(event, 'fs19', 80)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs20', 81)\" onmouseover=\"showTip(event, 'fs20', 81)\" class=\"i\">map</span> <span onmouseout=\"hideTip(event, 'fs33', 82)\" onmouseover=\"showTip(event, 'fs33', 82)\" class=\"i\">build</span> \r\n            <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 83)\" onmouseover=\"showTip(event, 'fs19', 83)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs43', 84)\" onmouseover=\"showTip(event, 'fs43', 84)\" class=\"i\">toArray</span>\r\n        <span onmouseout=\"hideTip(event, 'fs36', 85)\" onmouseover=\"showTip(event, 'fs36', 85)\" class=\"i\">GrammarBuilder</span>(<span onmouseout=\"hideTip(event, 'fs44', 86)\" onmouseover=\"showTip(event, 'fs44', 86)\" class=\"i\">Choices</span>())\r\n\r\n    | <span onmouseout=\"hideTip(event, 'fs29', 87)\" onmouseover=\"showTip(event, 'fs29', 87)\" class=\"i\">Repeat</span>(<span onmouseout=\"hideTip(event, 'fs45', 88)\" onmouseover=\"showTip(event, 'fs45', 88)\" class=\"i\">min</span>, <span onmouseout=\"hideTip(event, 'fs46', 89)\" onmouseover=\"showTip(event, 'fs46', 89)\" class=\"i\">max</span>, <span onmouseout=\"hideTip(event, 'fs47', 90)\" onmouseover=\"showTip(event, 'fs47', 90)\" class=\"i\">grammar</span>) <span class=\"k\">-&gt;</span> \r\n        <span class=\"c\">// Repeat a part of the grammar</span>\r\n        <span onmouseout=\"hideTip(event, 'fs36', 91)\" onmouseover=\"showTip(event, 'fs36', 91)\" class=\"i\">GrammarBuilder</span>(<span onmouseout=\"hideTip(event, 'fs33', 92)\" onmouseover=\"showTip(event, 'fs33', 92)\" class=\"i\">build</span> <span onmouseout=\"hideTip(event, 'fs47', 93)\" onmouseover=\"showTip(event, 'fs47', 93)\" class=\"i\">grammar</span>, <span onmouseout=\"hideTip(event, 'fs45', 94)\" onmouseover=\"showTip(event, 'fs45', 94)\" class=\"i\">min</span>, <span onmouseout=\"hideTip(event, 'fs46', 95)\" onmouseover=\"showTip(event, 'fs46', 95)\" class=\"i\">max</span>)</pre>\r\n\r\n\r\n<p>This is not a full DSL for speach recognition, you can look at all the GrammarBuilder methods\r\nto add more possibilities.. Even here, I'll use only Phrase and Alt.</p>\r\n\r\n<p>Now, we need a recognizer and wire the grammar with functions that will be called when a part of\r\nthe grammar is recognized or rejected.\r\nIt is mandatory to set grammar's culture to the recognizer's culture.\r\nThere's usually a single recognizer installed by default on your system and it uses installed system's\r\nculture. In my case, it'll be french.</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs48', 96)\" onmouseover=\"showTip(event, 'fs48', 96)\" class=\"i\">recog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span onmouseout=\"hideTip(event, 'fs49', 97)\" onmouseover=\"showTip(event, 'fs49', 97)\" class=\"i\">SpeechRecognizer</span>()\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs50', 98)\" onmouseover=\"showTip(event, 'fs50', 98)\" class=\"i\">recognize</span> <span onmouseout=\"hideTip(event, 'fs47', 99)\" onmouseover=\"showTip(event, 'fs47', 99)\" class=\"i\">grammar</span> <span onmouseout=\"hideTip(event, 'fs51', 100)\" onmouseover=\"showTip(event, 'fs51', 100)\" class=\"i\">recognized</span> <span onmouseout=\"hideTip(event, 'fs52', 101)\" onmouseover=\"showTip(event, 'fs52', 101)\" class=\"i\">rejected</span>  <span class=\"o\">=</span> \r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs39', 102)\" onmouseover=\"showTip(event, 'fs39', 102)\" class=\"i\">builder</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs33', 103)\" onmouseover=\"showTip(event, 'fs33', 103)\" class=\"i\">build</span> <span onmouseout=\"hideTip(event, 'fs47', 104)\" onmouseover=\"showTip(event, 'fs47', 104)\" class=\"i\">grammar</span>\r\n    <span onmouseout=\"hideTip(event, 'fs39', 105)\" onmouseover=\"showTip(event, 'fs39', 105)\" class=\"i\">builder</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs53', 106)\" onmouseover=\"showTip(event, 'fs53', 106)\" class=\"i\">Culture</span> <span class=\"o\">&lt;-</span> <span onmouseout=\"hideTip(event, 'fs48', 107)\" onmouseover=\"showTip(event, 'fs48', 107)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 108)\" onmouseover=\"showTip(event, 'fs54', 108)\" class=\"i\">RecognizerInfo</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs55', 109)\" onmouseover=\"showTip(event, 'fs55', 109)\" class=\"i\">Culture</span>\r\n    <span onmouseout=\"hideTip(event, 'fs56', 110)\" onmouseover=\"showTip(event, 'fs56', 110)\" class=\"i\">printfn</span> <span class=\"s\">&quot;</span><span class=\"s\">%</span><span class=\"s\">A</span><span class=\"s\">&quot;</span> <span onmouseout=\"hideTip(event, 'fs48', 111)\" onmouseover=\"showTip(event, 'fs48', 111)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 112)\" onmouseover=\"showTip(event, 'fs54', 112)\" class=\"i\">RecognizerInfo</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs55', 113)\" onmouseover=\"showTip(event, 'fs55', 113)\" class=\"i\">Culture</span>\r\n    <span onmouseout=\"hideTip(event, 'fs48', 114)\" onmouseover=\"showTip(event, 'fs48', 114)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs57', 115)\" onmouseover=\"showTip(event, 'fs57', 115)\" class=\"i\">LoadGrammar</span>(<span onmouseout=\"hideTip(event, 'fs24', 116)\" onmouseover=\"showTip(event, 'fs24', 116)\" class=\"i\">Grammar</span> <span onmouseout=\"hideTip(event, 'fs39', 117)\" onmouseover=\"showTip(event, 'fs39', 117)\" class=\"i\">builder</span>)\r\n    \r\n    <span onmouseout=\"hideTip(event, 'fs48', 118)\" onmouseover=\"showTip(event, 'fs48', 118)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs58', 119)\" onmouseover=\"showTip(event, 'fs58', 119)\" class=\"i\">SpeechRecognized</span> <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs59', 120)\" onmouseover=\"showTip(event, 'fs59', 120)\" class=\"i\">Event</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs60', 121)\" onmouseover=\"showTip(event, 'fs60', 121)\" class=\"i\">add</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs61', 122)\" onmouseover=\"showTip(event, 'fs61', 122)\" class=\"i\">e</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs51', 123)\" onmouseover=\"showTip(event, 'fs51', 123)\" class=\"i\">recognized</span> <span onmouseout=\"hideTip(event, 'fs61', 124)\" onmouseover=\"showTip(event, 'fs61', 124)\" class=\"i\">e</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs62', 125)\" onmouseover=\"showTip(event, 'fs62', 125)\" class=\"i\">Result</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs63', 126)\" onmouseover=\"showTip(event, 'fs63', 126)\" class=\"i\">Text</span> (<span onmouseout=\"hideTip(event, 'fs9', 127)\" onmouseover=\"showTip(event, 'fs9', 127)\" class=\"i\">string</span> <span onmouseout=\"hideTip(event, 'fs61', 128)\" onmouseover=\"showTip(event, 'fs61', 128)\" class=\"i\">e</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs62', 129)\" onmouseover=\"showTip(event, 'fs62', 129)\" class=\"i\">Result</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs64', 130)\" onmouseover=\"showTip(event, 'fs64', 130)\" class=\"i\">Semantics</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs65', 131)\" onmouseover=\"showTip(event, 'fs65', 131)\" class=\"i\">Value</span>))\r\n    <span onmouseout=\"hideTip(event, 'fs48', 132)\" onmouseover=\"showTip(event, 'fs48', 132)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs66', 133)\" onmouseover=\"showTip(event, 'fs66', 133)\" class=\"i\">SpeechRecognitionRejected</span> <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs59', 134)\" onmouseover=\"showTip(event, 'fs59', 134)\" class=\"i\">Event</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs60', 135)\" onmouseover=\"showTip(event, 'fs60', 135)\" class=\"i\">add</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs67', 136)\" onmouseover=\"showTip(event, 'fs67', 136)\" class=\"i\">e</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs52', 137)\" onmouseover=\"showTip(event, 'fs52', 137)\" class=\"i\">rejected</span> ())\r\n    <span onmouseout=\"hideTip(event, 'fs48', 138)\" onmouseover=\"showTip(event, 'fs48', 138)\" class=\"i\">recog</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs68', 139)\" onmouseover=\"showTip(event, 'fs68', 139)\" class=\"i\">Enabled</span></pre>\r\n\r\n\r\n<p>We can then use this to create a little Christmass quizz thanks to the FSharp.Data FreeBase Type Provider !</p>\r\n\r\n<p>We'll use free base to find a list of Actors who plaid Santa in movies.</p>\r\n\r\n<p>For this, install the FSharp.Data NuGet:</p>\r\n\r\n<p><code>nuget install FSharp.Data -o packages -x</code></p>\r\n\r\n<p>The dll should be in .\packages\FSharp.Data\lib\net40\FSharp.Data.dll</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"prep\">#r</span> <span class=\"s\">@&quot;</span><span class=\"s\">packages</span><span class=\"s\">\</span><span class=\"s\">FSharp</span><span class=\"s\">.</span><span class=\"s\">Data</span><span class=\"s\">\</span><span class=\"s\">lib</span><span class=\"s\">\</span><span class=\"s\">net40</span><span class=\"s\">\</span><span class=\"s\">FSharp</span><span class=\"s\">.</span><span class=\"s\">Data</span><span class=\"s\">.</span><span class=\"s\">dll</span><span class=\"s\">&quot;</span>\r\n<span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs69', 140)\" onmouseover=\"showTip(event, 'fs69', 140)\" class=\"i\">FSharp</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs70', 141)\" onmouseover=\"showTip(event, 'fs70', 141)\" class=\"i\">Data</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs71', 142)\" onmouseover=\"showTip(event, 'fs71', 142)\" class=\"i\">fb</span> <span class=\"o\">=</span><span onmouseout=\"hideTip(event, 'fs72', 143)\" onmouseover=\"showTip(event, 'fs72', 143)\" class=\"i\">FreebaseData</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs73', 144)\" onmouseover=\"showTip(event, 'fs73', 144)\" class=\"i\">GetDataContext</span>()</pre>\r\n\r\n\r\n<p>Let's build the grammar</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs74', 145)\" onmouseover=\"showTip(event, 'fs74', 145)\" class=\"i\">santaActorsFilms</span> <span class=\"o\">=</span>\r\n    <span onmouseout=\"hideTip(event, 'fs71', 146)\" onmouseover=\"showTip(event, 'fs71', 146)\" class=\"i\">fb</span><span class=\"o\">.</span><span class=\"i\">``Arts and Entertainment``</span>\r\n      <span class=\"o\">.</span><span class=\"i\">Film</span>\r\n      <span class=\"o\">.</span><span class=\"i\">``Film characters``</span>\r\n      <span class=\"o\">.</span><span class=\"i\">IndividualsAZ</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs75', 147)\" onmouseover=\"showTip(event, 'fs75', 147)\" class=\"i\">S</span>\r\n      <span class=\"o\">.</span><span class=\"i\">``Santa Claus``</span>\r\n      <span class=\"o\">.</span><span class=\"i\">``Portrayed in films``</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs76', 148)\" onmouseover=\"showTip(event, 'fs76', 148)\" class=\"i\">Seq</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs77', 149)\" onmouseover=\"showTip(event, 'fs77', 149)\" class=\"i\">map</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs78', 150)\" onmouseover=\"showTip(event, 'fs78', 150)\" class=\"i\">c</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs78', 151)\" onmouseover=\"showTip(event, 'fs78', 151)\" class=\"i\">c</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs79', 152)\" onmouseover=\"showTip(event, 'fs79', 152)\" class=\"i\">Actor</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs80', 153)\" onmouseover=\"showTip(event, 'fs80', 153)\" class=\"i\">Name</span>, <span onmouseout=\"hideTip(event, 'fs78', 154)\" onmouseover=\"showTip(event, 'fs78', 154)\" class=\"i\">c</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs81', 155)\" onmouseover=\"showTip(event, 'fs81', 155)\" class=\"i\">Film</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs80', 156)\" onmouseover=\"showTip(event, 'fs80', 156)\" class=\"i\">Name</span>)\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs76', 157)\" onmouseover=\"showTip(event, 'fs76', 157)\" class=\"i\">Seq</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs82', 158)\" onmouseover=\"showTip(event, 'fs82', 158)\" class=\"i\">toList</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs83', 159)\" onmouseover=\"showTip(event, 'fs83', 159)\" class=\"i\">santaActorsGrammar</span> <span class=\"o\">=</span>\r\n    <span onmouseout=\"hideTip(event, 'fs74', 160)\" onmouseover=\"showTip(event, 'fs74', 160)\" class=\"i\">santaActorsFilms</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs19', 161)\" onmouseover=\"showTip(event, 'fs19', 161)\" class=\"i\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs20', 162)\" onmouseover=\"showTip(event, 'fs20', 162)\" class=\"i\">map</span> (<span class=\"k\">fun</span> (<span onmouseout=\"hideTip(event, 'fs84', 163)\" onmouseover=\"showTip(event, 'fs84', 163)\" class=\"i\">actor</span>,<span onmouseout=\"hideTip(event, 'fs85', 164)\" onmouseover=\"showTip(event, 'fs85', 164)\" class=\"i\">film</span>) <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs25', 165)\" onmouseover=\"showTip(event, 'fs25', 165)\" class=\"i\">Phrase</span>(<span onmouseout=\"hideTip(event, 'fs84', 166)\" onmouseover=\"showTip(event, 'fs84', 166)\" class=\"i\">actor</span>, <span onmouseout=\"hideTip(event, 'fs85', 167)\" onmouseover=\"showTip(event, 'fs85', 167)\" class=\"i\">film</span>))\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs28', 168)\" onmouseover=\"showTip(event, 'fs28', 168)\" class=\"i\">Alt</span></pre>\r\n\r\n\r\n<p>Here is the function to call when an actor is recognized.</p>\r\n\r\n<p>I tried to pass a discriminated union as a value, but even if the API uses an object, the documentation\r\nstates that it has to be a bool, an int or a string. I used only strings here.</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs86', 169)\" onmouseover=\"showTip(event, 'fs86', 169)\" class=\"i\">recognized</span> <span onmouseout=\"hideTip(event, 'fs34', 170)\" onmouseover=\"showTip(event, 'fs34', 170)\" class=\"i\">text</span> <span onmouseout=\"hideTip(event, 'fs87', 171)\" onmouseover=\"showTip(event, 'fs87', 171)\" class=\"i\">value</span> <span class=\"o\">=</span>\r\n    <span onmouseout=\"hideTip(event, 'fs6', 172)\" onmouseover=\"showTip(event, 'fs6', 172)\" class=\"i\">say</span> (<span onmouseout=\"hideTip(event, 'fs88', 173)\" onmouseover=\"showTip(event, 'fs88', 173)\" class=\"i\">sprintf</span> <span class=\"s\">&quot;</span><span class=\"s\">True</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\"> </span><span class=\"s\">%</span><span class=\"s\">s</span><span class=\"s\"> </span><span class=\"s\">was</span><span class=\"s\"> </span><span class=\"s\">Santa</span><span class=\"s\"> </span><span class=\"s\">in</span><span class=\"s\"> </span><span class=\"s\">%</span><span class=\"s\">s</span><span class=\"s\">&quot;</span> <span onmouseout=\"hideTip(event, 'fs34', 174)\" onmouseover=\"showTip(event, 'fs34', 174)\" class=\"i\">text</span> <span onmouseout=\"hideTip(event, 'fs87', 175)\" onmouseover=\"showTip(event, 'fs87', 175)\" class=\"i\">value</span>)</pre>\r\n\r\n\r\n<p>Here is the function when the speech could not be matched with the grammar.</p>\r\n\r\n<p>It is also possible to get the audio of the text in this case. I decided to ignore it due to time constraints.</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs89', 176)\" onmouseover=\"showTip(event, 'fs89', 176)\" class=\"i\">rejected</span> () <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs6', 177)\" onmouseover=\"showTip(event, 'fs6', 177)\" class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">No</span><span class=\"s\">,</span><span class=\"s\"> </span><span class=\"s\">Not</span><span class=\"s\"> </span><span class=\"s\">a</span><span class=\"s\"> </span><span class=\"s\">Santa</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span></pre>\r\n\r\n\r\n<p>Now, let's run it !!</p>\r\n\r\n<pre class=\"fssnip\">\r\n<span onmouseout=\"hideTip(event, 'fs50', 178)\" onmouseover=\"showTip(event, 'fs50', 178)\" class=\"i\">recognize</span> <span onmouseout=\"hideTip(event, 'fs83', 179)\" onmouseover=\"showTip(event, 'fs83', 179)\" class=\"i\">santaActorsGrammar</span> <span onmouseout=\"hideTip(event, 'fs86', 180)\" onmouseover=\"showTip(event, 'fs86', 180)\" class=\"i\">recognized</span> <span onmouseout=\"hideTip(event, 'fs89', 181)\" onmouseover=\"showTip(event, 'fs89', 181)\" class=\"i\">rejected</span></pre>\r\n\r\n\r\n<p>At this point the speech recognition configuration should appear if it's the \r\nfirst time you use it.</p>\r\n\r\n<p>Once done you should be able to try the quizz !</p>\r\n\r\n<p>If your OS culture is not english, don't hesitate to use a local accent for\r\nactor's name !</p>\r\n\r\n<h2>Conlusion</h2>\r\n\r\n<p>I hope you had fun with this API, and that you'll want to tweak it for your own demo !</p>\r\n\r\n<p>The full code - using FSharp.Formatting - is on <a href=\"https://gist.github.com/thinkbeforecoding/37ae152c6fe24a649d86\">my gist</a></p>\r\n\r\n<p><strong>Happy Christmass !</strong></p>\r\n\r\n          <div class=\"tip\" id=\"fs1\">namespace System</div>\r\n<div class=\"tip\" id=\"fs2\">namespace System.Speech</div>\r\n<div class=\"tip\" id=\"fs3\">namespace System.Speech.Synthesis</div>\r\n<div class=\"tip\" id=\"fs4\">val synt : SpeechSynthesizer<br /><br />Full name: XMas fun.synt</div>\r\n<div class=\"tip\" id=\"fs5\">Multiple items<br />type SpeechSynthesizer =<br />&#160;&#160;new : unit -&gt; SpeechSynthesizer<br />&#160;&#160;member AddLexicon : uri:Uri * mediaType:string -&gt; unit<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member GetCurrentlySpokenPrompt : unit -&gt; Prompt<br />&#160;&#160;member GetInstalledVoices : unit -&gt; ReadOnlyCollection&lt;InstalledVoice&gt; + 1 overload<br />&#160;&#160;member Pause : unit -&gt; unit<br />&#160;&#160;member Rate : int with get, set<br />&#160;&#160;member RemoveLexicon : uri:Uri -&gt; unit<br />&#160;&#160;member Resume : unit -&gt; unit<br />&#160;&#160;member SelectVoice : name:string -&gt; unit<br />&#160;&#160;...<br /><br />Full name: System.Speech.Synthesis.SpeechSynthesizer<br /><br />--------------------<br />SpeechSynthesizer() : unit</div>\r\n<div class=\"tip\" id=\"fs6\">val say : s:string -&gt; unit<br /><br />Full name: XMas fun.say</div>\r\n<div class=\"tip\" id=\"fs7\">val s : string</div>\r\n<div class=\"tip\" id=\"fs8\">SpeechSynthesizer.Speak(promptBuilder: PromptBuilder) : unit<br />SpeechSynthesizer.Speak(prompt: Prompt) : unit<br />SpeechSynthesizer.Speak(textToSpeak: string) : unit</div>\r\n<div class=\"tip\" id=\"fs9\">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>\r\n<div class=\"tip\" id=\"fs10\">namespace System.Globalization</div>\r\n<div class=\"tip\" id=\"fs11\">val english : CultureInfo<br /><br />Full name: XMas fun.english</div>\r\n<div class=\"tip\" id=\"fs12\">Multiple items<br />type CultureInfo =<br />&#160;&#160;new : name:string -&gt; CultureInfo + 3 overloads<br />&#160;&#160;member Calendar : Calendar<br />&#160;&#160;member ClearCachedData : unit -&gt; unit<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareInfo : CompareInfo<br />&#160;&#160;member CultureTypes : CultureTypes<br />&#160;&#160;member DateTimeFormat : DateTimeFormatInfo with get, set<br />&#160;&#160;member DisplayName : string<br />&#160;&#160;member EnglishName : string<br />&#160;&#160;member Equals : value:obj -&gt; bool<br />&#160;&#160;...<br /><br />Full name: System.Globalization.CultureInfo<br /><br />--------------------<br />CultureInfo(name: string) : unit<br />CultureInfo(culture: int) : unit<br />CultureInfo(name: string, useUserOverride: bool) : unit<br />CultureInfo(culture: int, useUserOverride: bool) : unit</div>\r\n<div class=\"tip\" id=\"fs13\">CultureInfo.GetCultureInfo(name: string) : CultureInfo<br />CultureInfo.GetCultureInfo(culture: int) : CultureInfo<br />CultureInfo.GetCultureInfo(name: string, altName: string) : CultureInfo</div>\r\n<div class=\"tip\" id=\"fs14\">SpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender) : unit<br />SpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge) : unit<br />SpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge, voiceAlternate: int) : unit<br />SpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge, voiceAlternate: int, culture: CultureInfo) : unit</div>\r\n<div class=\"tip\" id=\"fs15\">type VoiceGender =<br />&#160;&#160;| NotSet = 0<br />&#160;&#160;| Male = 1<br />&#160;&#160;| Female = 2<br />&#160;&#160;| Neutral = 3<br /><br />Full name: System.Speech.Synthesis.VoiceGender</div>\r\n<div class=\"tip\" id=\"fs16\">field VoiceGender.NotSet = 0</div>\r\n<div class=\"tip\" id=\"fs17\">type VoiceAge =<br />&#160;&#160;| NotSet = 0<br />&#160;&#160;| Child = 10<br />&#160;&#160;| Teen = 15<br />&#160;&#160;| Adult = 30<br />&#160;&#160;| Senior = 65<br /><br />Full name: System.Speech.Synthesis.VoiceAge</div>\r\n<div class=\"tip\" id=\"fs18\">field VoiceAge.NotSet = 0</div>\r\n<div class=\"tip\" id=\"fs19\">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>\r\n<div class=\"tip\" id=\"fs20\">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>\r\n<div class=\"tip\" id=\"fs21\">val n : int</div>\r\n<div class=\"tip\" id=\"fs22\">val iter : action:(&#39;T -&gt; unit) -&gt; list:&#39;T list -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.List.iter</div>\r\n<div class=\"tip\" id=\"fs23\">namespace System.Speech.Recognition</div>\r\n<div class=\"tip\" id=\"fs24\">type Grammar =<br />&#160;&#160;| Phrase of text: string * result: string<br />&#160;&#160;| Lst of Grammar list<br />&#160;&#160;| Alt of Grammar list<br />&#160;&#160;| Repeat of min: int * max: int * Grammar<br /><br />Full name: XMas fun.Grammar</div>\r\n<div class=\"tip\" id=\"fs25\">union case Grammar.Phrase: text: string * result: string -&gt; Grammar</div>\r\n<div class=\"tip\" id=\"fs26\">union case Grammar.Lst: Grammar list -&gt; Grammar</div>\r\n<div class=\"tip\" id=\"fs27\">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>\r\n<div class=\"tip\" id=\"fs28\">union case Grammar.Alt: Grammar list -&gt; Grammar</div>\r\n<div class=\"tip\" id=\"fs29\">union case Grammar.Repeat: min: int * max: int * Grammar -&gt; Grammar</div>\r\n<div class=\"tip\" id=\"fs30\">val min : e1:&#39;T -&gt; e2:&#39;T -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.min</div>\r\n<div class=\"tip\" id=\"fs31\">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>\r\n<div class=\"tip\" id=\"fs32\">val max : e1:&#39;T -&gt; e2:&#39;T -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.max</div>\r\n<div class=\"tip\" id=\"fs33\">val build : _arg1:Grammar -&gt; GrammarBuilder<br /><br />Full name: XMas fun.build</div>\r\n<div class=\"tip\" id=\"fs34\">val text : string</div>\r\n<div class=\"tip\" id=\"fs35\">val result : string</div>\r\n<div class=\"tip\" id=\"fs36\">Multiple items<br />type GrammarBuilder =<br />&#160;&#160;new : unit -&gt; GrammarBuilder + 7 overloads<br />&#160;&#160;member Append : phrase:string -&gt; unit + 7 overloads<br />&#160;&#160;member AppendDictation : unit -&gt; unit + 1 overload<br />&#160;&#160;member AppendRuleReference : path:string -&gt; unit + 1 overload<br />&#160;&#160;member AppendWildcard : unit -&gt; unit<br />&#160;&#160;member Culture : CultureInfo with get, set<br />&#160;&#160;member DebugShowPhrases : string<br />&#160;&#160;static member Add : phrase:string * builder:GrammarBuilder -&gt; GrammarBuilder + 4 overloads<br /><br />Full name: System.Speech.Recognition.GrammarBuilder<br /><br />--------------------<br />GrammarBuilder() : unit<br />GrammarBuilder(phrase: string) : unit<br />GrammarBuilder(alternateChoices: Choices) : unit<br />GrammarBuilder(key: SemanticResultKey) : unit<br />GrammarBuilder(value: SemanticResultValue) : unit<br />GrammarBuilder(phrase: string, subsetMatchingCriteria: SubsetMatchingMode) : unit<br />GrammarBuilder(phrase: string, minRepeat: int, maxRepeat: int) : unit<br />GrammarBuilder(builder: GrammarBuilder, minRepeat: int, maxRepeat: int) : unit</div>\r\n<div class=\"tip\" id=\"fs37\">Multiple items<br />type SemanticResultValue =<br />&#160;&#160;new : value:obj -&gt; SemanticResultValue + 2 overloads<br />&#160;&#160;member ToGrammarBuilder : unit -&gt; GrammarBuilder<br /><br />Full name: System.Speech.Recognition.SemanticResultValue<br /><br />--------------------<br />SemanticResultValue(value: obj) : unit<br />SemanticResultValue(phrase: string, value: obj) : unit<br />SemanticResultValue(builder: GrammarBuilder, value: obj) : unit</div>\r\n<div class=\"tip\" id=\"fs38\">val grammars : Grammar list</div>\r\n<div class=\"tip\" id=\"fs39\">val builder : GrammarBuilder</div>\r\n<div class=\"tip\" id=\"fs40\">GrammarBuilder.Append(value: SemanticResultValue) : unit<br />GrammarBuilder.Append(key: SemanticResultKey) : unit<br />GrammarBuilder.Append(alternateChoices: Choices) : unit<br />GrammarBuilder.Append(builder: GrammarBuilder) : unit<br />GrammarBuilder.Append(phrase: string) : unit<br />GrammarBuilder.Append(phrase: string, subsetMatchingCriteria: SubsetMatchingMode) : unit<br />GrammarBuilder.Append(builder: GrammarBuilder, minRepeat: int, maxRepeat: int) : unit<br />GrammarBuilder.Append(phrase: string, minRepeat: int, maxRepeat: int) : unit</div>\r\n<div class=\"tip\" id=\"fs41\">val alternatives : Grammar list</div>\r\n<div class=\"tip\" id=\"fs42\">val choices : GrammarBuilder []</div>\r\n<div class=\"tip\" id=\"fs43\">val toArray : list:&#39;T list -&gt; &#39;T []<br /><br />Full name: Microsoft.FSharp.Collections.List.toArray</div>\r\n<div class=\"tip\" id=\"fs44\">Multiple items<br />type Choices =<br />&#160;&#160;new : unit -&gt; Choices + 2 overloads<br />&#160;&#160;member Add : params phrases:string[] -&gt; unit + 1 overload<br />&#160;&#160;member ToGrammarBuilder : unit -&gt; GrammarBuilder<br /><br />Full name: System.Speech.Recognition.Choices<br /><br />--------------------<br />Choices() : unit<br />Choices(params phrases: string []) : unit<br />Choices(params alternateChoices: GrammarBuilder []) : unit</div>\r\n<div class=\"tip\" id=\"fs45\">val min : int</div>\r\n<div class=\"tip\" id=\"fs46\">val max : int</div>\r\n<div class=\"tip\" id=\"fs47\">val grammar : Grammar</div>\r\n<div class=\"tip\" id=\"fs48\">val recog : SpeechRecognizer<br /><br />Full name: XMas fun.recog</div>\r\n<div class=\"tip\" id=\"fs49\">Multiple items<br />type SpeechRecognizer =<br />&#160;&#160;new : unit -&gt; SpeechRecognizer<br />&#160;&#160;member AudioFormat : SpeechAudioFormatInfo<br />&#160;&#160;member AudioLevel : int<br />&#160;&#160;member AudioPosition : TimeSpan<br />&#160;&#160;member AudioState : AudioState<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member EmulateRecognize : inputText:string -&gt; RecognitionResult + 2 overloads<br />&#160;&#160;member EmulateRecognizeAsync : inputText:string -&gt; unit + 2 overloads<br />&#160;&#160;member Enabled : bool with get, set<br />&#160;&#160;member Grammars : ReadOnlyCollection&lt;Grammar&gt;<br />&#160;&#160;...<br /><br />Full name: System.Speech.Recognition.SpeechRecognizer<br /><br />--------------------<br />SpeechRecognizer() : unit</div>\r\n<div class=\"tip\" id=\"fs50\">val recognize : grammar:Grammar -&gt; recognized:(string -&gt; string -&gt; unit) -&gt; rejected:(unit -&gt; unit) -&gt; bool<br /><br />Full name: XMas fun.recognize</div>\r\n<div class=\"tip\" id=\"fs51\">val recognized : (string -&gt; string -&gt; unit)</div>\r\n<div class=\"tip\" id=\"fs52\">val rejected : (unit -&gt; unit)</div>\r\n<div class=\"tip\" id=\"fs53\">property GrammarBuilder.Culture: CultureInfo</div>\r\n<div class=\"tip\" id=\"fs54\">property SpeechRecognizer.RecognizerInfo: RecognizerInfo</div>\r\n<div class=\"tip\" id=\"fs55\">property RecognizerInfo.Culture: CultureInfo</div>\r\n<div class=\"tip\" id=\"fs56\">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>\r\n<div class=\"tip\" id=\"fs57\">SpeechRecognizer.LoadGrammar(grammar: Grammar) : unit</div>\r\n<div class=\"tip\" id=\"fs58\">event SpeechRecognizer.SpeechRecognized: IEvent&lt;System.EventHandler&lt;SpeechRecognizedEventArgs&gt;,SpeechRecognizedEventArgs&gt;</div>\r\n<div class=\"tip\" id=\"fs59\">Multiple items<br />module Event<br /><br />from Microsoft.FSharp.Control<br /><br />--------------------<br />type Event&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;T&gt;<br />&#160;&#160;member Trigger : arg:&#39;T -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_&gt;<br /><br />--------------------<br />type Event&lt;&#39;Delegate,&#39;Args (requires delegate and &#39;Delegate :&gt; Delegate)&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;<br />&#160;&#160;member Trigger : sender:obj * args:&#39;Args -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;Delegate,&#39;Args&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_,_&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;T&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;</div>\r\n<div class=\"tip\" id=\"fs60\">val add : callback:(&#39;T -&gt; unit) -&gt; sourceEvent:IEvent&lt;&#39;Del,&#39;T&gt; -&gt; unit (requires delegate and &#39;Del :&gt; System.Delegate)<br /><br />Full name: Microsoft.FSharp.Control.Event.add</div>\r\n<div class=\"tip\" id=\"fs61\">val e : SpeechRecognizedEventArgs</div>\r\n<div class=\"tip\" id=\"fs62\">property RecognitionEventArgs.Result: RecognitionResult</div>\r\n<div class=\"tip\" id=\"fs63\">property RecognizedPhrase.Text: string</div>\r\n<div class=\"tip\" id=\"fs64\">property RecognizedPhrase.Semantics: SemanticValue</div>\r\n<div class=\"tip\" id=\"fs65\">property SemanticValue.Value: obj</div>\r\n<div class=\"tip\" id=\"fs66\">event SpeechRecognizer.SpeechRecognitionRejected: IEvent&lt;System.EventHandler&lt;SpeechRecognitionRejectedEventArgs&gt;,SpeechRecognitionRejectedEventArgs&gt;</div>\r\n<div class=\"tip\" id=\"fs67\">val e : SpeechRecognitionRejectedEventArgs</div>\r\n<div class=\"tip\" id=\"fs68\">property SpeechRecognizer.Enabled: bool</div>\r\n<div class=\"tip\" id=\"fs69\">namespace FSharp</div>\r\n<div class=\"tip\" id=\"fs70\">namespace FSharp.Data</div>\r\n<div class=\"tip\" id=\"fs71\">val fb : FreebaseData.ServiceTypes.FreebaseService<br /><br />Full name: XMas fun.fb</div>\r\n<div class=\"tip\" id=\"fs72\">type FreebaseData =<br />&#160;&#160;static member GetDataContext : unit -&gt; FreebaseService<br />&#160;&#160;nested type ServiceTypes<br /><br />Full name: FSharp.Data.FreebaseData<br /><em><br /><br />&lt;summary&gt;Typed representation of Freebase data. See http://www.freebase.com for terms and conditions.&lt;/summary&gt;</em></div>\r\n<div class=\"tip\" id=\"fs73\">FreebaseData.GetDataContext() : FreebaseData.ServiceTypes.FreebaseService</div>\r\n<div class=\"tip\" id=\"fs74\">val santaActorsFilms : (string * string) list<br /><br />Full name: XMas fun.santaActorsFilms</div>\r\n<div class=\"tip\" id=\"fs75\">property FreebaseData.ServiceTypes.Film.Film.Film_characterDataIndividualsAZ.S: FreebaseData.ServiceTypes.Film.Film.Film_characterDataIndividualsAZ.Film_characterDataIndividualsIndexedS<br /><em><br /><br />&lt;summary&gt;An indexing of specific named individuals of type &amp;apos;Film character&amp;apos; in the web data store&lt;/summary&gt;</em></div>\r\n<div class=\"tip\" id=\"fs76\">module Seq<br /><br />from Microsoft.FSharp.Collections</div>\r\n<div class=\"tip\" id=\"fs77\">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>\r\n<div class=\"tip\" id=\"fs78\">val c : FreebaseData.ServiceTypes.Film.Film.PerformanceData</div>\r\n<div class=\"tip\" id=\"fs79\">property FreebaseData.ServiceTypes.Film.Film.PerformanceData.Actor: FreebaseData.ServiceTypes.Film.Film.ActorData<br /><em><br /><br />&lt;summary&gt;&lt;/summary&gt;</em></div>\r\n<div class=\"tip\" id=\"fs80\">property Runtime.Freebase.IFreebaseObject.Name: string</div>\r\n<div class=\"tip\" id=\"fs81\">property FreebaseData.ServiceTypes.Film.Film.PerformanceData.Film: FreebaseData.ServiceTypes.Film.Film.FilmData<br /><em><br /><br />&lt;summary&gt;&lt;/summary&gt;</em></div>\r\n<div class=\"tip\" id=\"fs82\">val toList : source:seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toList</div>\r\n<div class=\"tip\" id=\"fs83\">val santaActorsGrammar : Grammar<br /><br />Full name: XMas fun.santaActorsGrammar</div>\r\n<div class=\"tip\" id=\"fs84\">val actor : string</div>\r\n<div class=\"tip\" id=\"fs85\">val film : string</div>\r\n<div class=\"tip\" id=\"fs86\">val recognized : text:string -&gt; value:string -&gt; unit<br /><br />Full name: XMas fun.recognized</div>\r\n<div class=\"tip\" id=\"fs87\">val value : string</div>\r\n<div class=\"tip\" id=\"fs88\">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>\r\n<div class=\"tip\" id=\"fs89\">val rejected : unit -&gt; unit<br /><br />Full name: XMas fun.rejected</div>","<p><em>I didn't try it on mono, but it should also work with some tweaking, see\ndetails <a href=\"http://go-mono.com/status/status.aspx?reference=4.0&amp;profile=4.5&amp;assembly=System.Speech\">\nhere</a></em></p>\n<p>Xmas is a good time to surprise kids, and what's more fun than a talking\ncomputer ?!</p>\n<h2>Hello world !</h2>\n<p>Nothing's easier, and this kind of Hello World will appeal them to\nprogramming in a flash :</p>\n<pre class=\"fssnip\">\n<span class=\"prep\">#r</span> <span class=\"s\">&quot;</span><span class=\"s\">System</span><span class=\"s\">.</span><span class=\"s\">Speech</span><span class=\"s\">&quot;</span>\n<span class=\"k\">open</span> <span class=\"i\">System</span><span class=\"o\">.</span><span class=\"i\">Speech</span><span class=\"o\">.</span><span class=\"i\">Synthesis</span>\n\n<span class=\"k\">let</span> <span class=\"i\">synt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"i\">SpeechSynthesizer</span>()\n<span class=\"k\">let</span> <span class=\"i\">say</span> <span class=\"i\">s</span> <span class=\"o\">=</span> <span class=\"i\">synt</span><span class=\"o\">.</span><span class=\"i\">Speak</span>(<span class=\"i\">s</span><span class=\"o\">:</span> <span class=\"i\">string</span>)\n\n<span class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">Hello</span><span class=\"s\"> </span><span class=\"s\">world</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span> \n</pre>\n<p>Of course, if you're french like me, it'll say this with an awful french\naccent - something like <strong>hÃ©lo ouorld</strong> !</p>\n<p>But you can select a different voice if available by providing hints:</p>\n<pre class=\"fssnip\">\n<span class=\"k\">open</span> <span class=\"i\">System</span><span class=\"o\">.</span><span class=\"i\">Globalization</span>\n<span class=\"k\">let</span> <span class=\"i\">english</span> <span class=\"o\">=</span> <span class=\"i\">CultureInfo</span><span class=\"o\">.</span><span class=\"i\">GetCultureInfo</span>(<span class=\"s\">&quot;</span><span class=\"s\">en</span><span class=\"s\">-</span><span class=\"s\">US</span><span class=\"s\">&quot;</span>)\n\n<span class=\"i\">synt</span><span class=\"o\">.</span><span class=\"i\">SelectVoiceByHints</span>(<span class=\"i\">VoiceGender</span><span class=\"o\">.</span><span class=\"i\">NotSet</span>, <span class=\"i\">VoiceAge</span><span class=\"o\">.</span><span class=\"i\">NotSet</span>, <span class=\"n\">1</span>, <span class=\"i\">english</span>)\n<span class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">Hello</span><span class=\"s\"> </span><span class=\"s\">world</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span>\n</pre>\n<p>Far better !</p>\n<h2>Can you beat it ?</h2>\n<p>Now, a talking fizz buzz, up to 100 ! Can you beat it ?</p>\n<pre class=\"fssnip\">\n[<span class=\"n\">1</span> <span class=\"o\">..</span> <span class=\"n\">100</span>]\n<span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">map</span> (<span class=\"k\">fun</span> <span class=\"i\">n</span> <span class=\"k\">-&gt;</span> \n    <span class=\"k\">match</span> <span class=\"i\">n</span><span class=\"o\">%</span><span class=\"n\">3</span>, <span class=\"i\">n</span><span class=\"o\">%</span><span class=\"n\">5</span> <span class=\"k\">with</span>\n    | <span class=\"n\">0</span>, <span class=\"n\">0</span> <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">FizzBuzz</span><span class=\"s\">&quot;</span>\n    | <span class=\"n\">0</span>, _ <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">Fizz</span><span class=\"s\">&quot;</span>\n    | _, <span class=\"n\">0</span> <span class=\"k\">-&gt;</span> <span class=\"s\">&quot;</span><span class=\"s\">Buzz</span><span class=\"s\">&quot;</span>\n    | _ <span class=\"k\">-&gt;</span> <span class=\"i\">string</span> <span class=\"i\">n</span> )\n<span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">iter</span> <span class=\"i\">say</span>\n</pre>\n<h2>Even harder !</h2>\n<p>Now with a recognizer, we can wait for voice user input.</p>\n<p>The problem with the Grammar API is that it's totally mutable and not really\nDSL oriented. Let's correct that :</p>\n<pre class=\"fssnip\">\n<span class=\"k\">open</span> <span class=\"i\">System</span><span class=\"o\">.</span><span class=\"i\">Speech</span><span class=\"o\">.</span><span class=\"i\">Recognition</span>\n\n<span class=\"k\">type</span> <span class=\"i\">Grammar</span> <span class=\"o\">=</span>\n    | <span class=\"i\">Phrase</span> <span class=\"k\">of</span> <span class=\"i\">text</span><span class=\"o\">:</span><span class=\"i\">string</span> <span class=\"o\">*</span> <span class=\"i\">result</span><span class=\"o\">:</span> <span class=\"i\">string</span>\n    | <span class=\"i\">Lst</span> <span class=\"k\">of</span> <span class=\"i\">Grammar</span> <span class=\"i\">list</span>\n    | <span class=\"i\">Alt</span> <span class=\"k\">of</span> <span class=\"i\">Grammar</span> <span class=\"i\">list</span>\n    | <span class=\"i\">Repeat</span> <span class=\"k\">of</span> <span class=\"i\">min</span><span class=\"o\">:</span> <span class=\"i\">int</span> <span class=\"o\">*</span> <span class=\"i\">max</span><span class=\"o\">:</span> <span class=\"i\">int</span> <span class=\"o\">*</span> <span class=\"i\">Grammar</span>\n\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"i\">build</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n    | <span class=\"i\">Phrase</span> (<span class=\"i\">text</span>, <span class=\"i\">result</span>) <span class=\"k\">-&gt;</span> \n        <span class=\"c\">// Just build the a single phrase</span>\n        <span class=\"i\">GrammarBuilder</span>(<span class=\"i\">SemanticResultValue</span>(<span class=\"i\">text</span>,<span class=\"i\">result</span>))\n\n    | <span class=\"i\">Lst</span> <span class=\"i\">grammars</span> <span class=\"k\">-&gt;</span> \n        <span class=\"c\">// Append parts of grammars one after the other</span>\n        <span class=\"k\">let</span> <span class=\"i\">builder</span> <span class=\"o\">=</span> <span class=\"i\">GrammarBuilder</span>()\n        <span class=\"i\">grammars</span>\n        <span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">map</span> <span class=\"i\">build</span>\n        <span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">iter</span> <span class=\"i\">builder</span><span class=\"o\">.</span><span class=\"i\">Append</span>\n        <span class=\"i\">builder</span>\n\n    | <span class=\"i\">Alt</span> <span class=\"i\">alternatives</span> <span class=\"k\">-&gt;</span> \n        <span class=\"c\">// Create alternatives</span>\n        <span class=\"k\">let</span> <span class=\"i\">choices</span> <span class=\"o\">=</span>\n            <span class=\"i\">alternatives</span>\n            <span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">map</span> <span class=\"i\">build</span> \n            <span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">toArray</span>\n        <span class=\"i\">GrammarBuilder</span>(<span class=\"i\">Choices</span>())\n\n    | <span class=\"i\">Repeat</span>(<span class=\"i\">min</span>, <span class=\"i\">max</span>, <span class=\"i\">grammar</span>) <span class=\"k\">-&gt;</span> \n        <span class=\"c\">// Repeat a part of the grammar</span>\n        <span class=\"i\">GrammarBuilder</span>(<span class=\"i\">build</span> <span class=\"i\">grammar</span>, <span class=\"i\">min</span>, <span class=\"i\">max</span>)\n</pre>\n<p>This is not a full DSL for speach recognition, you can look at all the\nGrammarBuilder methods to add more possibilities.. Even here, I'll use only\nPhrase and Alt.</p>\n<p>Now, we need a recognizer and wire the grammar with functions that will be\ncalled when a part of the grammar is recognized or rejected. It is mandatory to\nset grammar's culture to the recognizer's culture. There's usually a single\nrecognizer installed by default on your system and it uses installed system's\nculture. In my case, it'll be french.</p>\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">recog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"i\">SpeechRecognizer</span>()\n\n<span class=\"k\">let</span> <span class=\"i\">recognize</span> <span class=\"i\">grammar</span> <span class=\"i\">recognized</span> <span class=\"i\">rejected</span>  <span class=\"o\">=</span> \n    <span class=\"k\">let</span> <span class=\"i\">builder</span> <span class=\"o\">=</span> <span class=\"i\">build</span> <span class=\"i\">grammar</span>\n    <span class=\"i\">builder</span><span class=\"o\">.</span><span class=\"i\">Culture</span> <span class=\"o\">&lt;-</span> <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">RecognizerInfo</span><span class=\"o\">.</span><span class=\"i\">Culture</span>\n    <span class=\"i\">printfn</span> <span class=\"s\">&quot;</span><span class=\"s\">%</span><span class=\"s\">A</span><span class=\"s\">&quot;</span> <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">RecognizerInfo</span><span class=\"o\">.</span><span class=\"i\">Culture</span>\n    <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">LoadGrammar</span>(<span class=\"i\">Grammar</span> <span class=\"i\">builder</span>)\n    \n    <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">SpeechRecognized</span> <span class=\"o\">|&gt;</span> <span class=\"i\">Event</span><span class=\"o\">.</span><span class=\"i\">add</span> (<span class=\"k\">fun</span> <span class=\"i\">e</span> <span class=\"k\">-&gt;</span> <span class=\"i\">recognized</span> <span class=\"i\">e</span><span class=\"o\">.</span><span class=\"i\">Result</span><span class=\"o\">.</span><span class=\"i\">Text</span> (<span class=\"i\">string</span> <span class=\"i\">e</span><span class=\"o\">.</span><span class=\"i\">Result</span><span class=\"o\">.</span><span class=\"i\">Semantics</span><span class=\"o\">.</span><span class=\"i\">Value</span>))\n    <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">SpeechRecognitionRejected</span> <span class=\"o\">|&gt;</span> <span class=\"i\">Event</span><span class=\"o\">.</span><span class=\"i\">add</span> (<span class=\"k\">fun</span> <span class=\"i\">e</span> <span class=\"k\">-&gt;</span> <span class=\"i\">rejected</span> ())\n    <span class=\"i\">recog</span><span class=\"o\">.</span><span class=\"i\">Enabled</span>\n</pre>\n<p>We can then use this to create a little Christmass quizz thanks to the\nFSharp.Data FreeBase Type Provider !</p>\n<p>We'll use free base to find a list of Actors who plaid Santa in movies.</p>\n<p>For this, install the FSharp.Data NuGet:</p>\n<p><code>nuget install FSharp.Data -o packages -x</code></p>\n<p>The dll should be in .\packages\FSharp.Data\lib\net40\FSharp.Data.dll</p>\n<pre class=\"fssnip\">\n<span class=\"prep\">#r</span> <span class=\"s\">@&quot;</span><span class=\"s\">packages</span><span class=\"s\">\</span><span class=\"s\">FSharp</span><span class=\"s\">.</span><span class=\"s\">Data</span><span class=\"s\">\</span><span class=\"s\">lib</span><span class=\"s\">\</span><span class=\"s\">net40</span><span class=\"s\">\</span><span class=\"s\">FSharp</span><span class=\"s\">.</span><span class=\"s\">Data</span><span class=\"s\">.</span><span class=\"s\">dll</span><span class=\"s\">&quot;</span>\n<span class=\"k\">open</span> <span class=\"i\">FSharp</span><span class=\"o\">.</span><span class=\"i\">Data</span>\n\n<span class=\"k\">let</span> <span class=\"i\">fb</span> <span class=\"o\">=</span><span class=\"i\">FreebaseData</span><span class=\"o\">.</span><span class=\"i\">GetDataContext</span>()\n</pre>\n<p>Let's build the grammar</p>\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">santaActorsFilms</span> <span class=\"o\">=</span>\n    <span class=\"i\">fb</span><span class=\"o\">.</span><span class=\"i\">``Arts and Entertainment``</span>\n      <span class=\"o\">.</span><span class=\"i\">Film</span>\n      <span class=\"o\">.</span><span class=\"i\">``Film characters``</span>\n      <span class=\"o\">.</span><span class=\"i\">IndividualsAZ</span><span class=\"o\">.</span><span class=\"i\">S</span>\n      <span class=\"o\">.</span><span class=\"i\">``Santa Claus``</span>\n      <span class=\"o\">.</span><span class=\"i\">``Portrayed in films``</span>\n    <span class=\"o\">|&gt;</span> <span class=\"i\">Seq</span><span class=\"o\">.</span><span class=\"i\">map</span> (<span class=\"k\">fun</span> <span class=\"i\">c</span> <span class=\"k\">-&gt;</span> <span class=\"i\">c</span><span class=\"o\">.</span><span class=\"i\">Actor</span><span class=\"o\">.</span><span class=\"i\">Name</span>, <span class=\"i\">c</span><span class=\"o\">.</span><span class=\"i\">Film</span><span class=\"o\">.</span><span class=\"i\">Name</span>)\n    <span class=\"o\">|&gt;</span> <span class=\"i\">Seq</span><span class=\"o\">.</span><span class=\"i\">toList</span>\n\n<span class=\"k\">let</span> <span class=\"i\">santaActorsGrammar</span> <span class=\"o\">=</span>\n    <span class=\"i\">santaActorsFilms</span>\n    <span class=\"o\">|&gt;</span> <span class=\"i\">List</span><span class=\"o\">.</span><span class=\"i\">map</span> (<span class=\"k\">fun</span> (<span class=\"i\">actor</span>,<span class=\"i\">film</span>) <span class=\"k\">-&gt;</span> <span class=\"i\">Phrase</span>(<span class=\"i\">actor</span>, <span class=\"i\">film</span>))\n    <span class=\"o\">|&gt;</span> <span class=\"i\">Alt</span>\n</pre>\n<p>Here is the function to call when an actor is recognized.</p>\n<p>I tried to pass a discriminated union as a value, but even if the API uses\nan object, the documentation states that it has to be a bool, an int or a\nstring. I used only strings here.</p>\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">recognized</span> <span class=\"i\">text</span> <span class=\"i\">value</span> <span class=\"o\">=</span>\n    <span class=\"i\">say</span> (<span class=\"i\">sprintf</span> <span class=\"s\">&quot;</span><span class=\"s\">True</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\"> </span><span class=\"s\">%</span><span class=\"s\">s</span><span class=\"s\"> </span><span class=\"s\">was</span><span class=\"s\"> </span><span class=\"s\">Santa</span><span class=\"s\"> </span><span class=\"s\">in</span><span class=\"s\"> </span><span class=\"s\">%</span><span class=\"s\">s</span><span class=\"s\">&quot;</span> <span class=\"i\">text</span> <span class=\"i\">value</span>)\n</pre>\n<p>Here is the function when the speech could not be matched with the\ngrammar.</p>\n<p>It is also possible to get the audio of the text in this case. I decided to\nignore it due to time constraints.</p>\n<pre class=\"fssnip\">\n<span class=\"k\">let</span> <span class=\"i\">rejected</span> () <span class=\"o\">=</span> <span class=\"i\">say</span> <span class=\"s\">&quot;</span><span class=\"s\">No</span><span class=\"s\">,</span><span class=\"s\"> </span><span class=\"s\">Not</span><span class=\"s\"> </span><span class=\"s\">a</span><span class=\"s\"> </span><span class=\"s\">Santa</span><span class=\"s\"> </span><span class=\"s\">!</span><span class=\"s\">&quot;</span>\n</pre>\n<p>Now, let's run it !!</p>\n<pre class=\"fssnip\">\n<span class=\"i\">recognize</span> <span class=\"i\">santaActorsGrammar</span> <span class=\"i\">recognized</span> <span class=\"i\">rejected</span>\n</pre>\n<p>At this point the speech recognition configuration should appear if it's the\nfirst time you use it.</p>\n<p>Once done you should be able to try the quizz !</p>\n<p>If your OS culture is not english, don't hesitate to use a local accent for\nactor's name !</p>\n<h2>Conlusion</h2>\n<p>I hope you had fun with this API, and that you'll want to tweak it for your\nown demo !</p>\n<p>The full code - using FSharp.Formatting - is on <a href=\"https://gist.github.com/thinkbeforecoding/37ae152c6fe24a649d86\">my\ngist</a></p>\n<p><strong>Happy Christmass !</strong></p>\n<div class=\"tip\" id=\"fs1\">namespace System</div>\n<div class=\"tip\" id=\"fs2\">namespace System.Speech</div>\n<div class=\"tip\" id=\"fs3\">namespace System.Speech.Synthesis</div>\n<div class=\"tip\" id=\"fs4\">val synt : SpeechSynthesizer<br />\n<br />\nFull name: XMas fun.synt</div>\n<div class=\"tip\" id=\"fs5\">Multiple items<br />\ntype SpeechSynthesizer =<br />\nÂ Â new : unit -&gt; SpeechSynthesizer<br />\nÂ Â member AddLexicon : uri:Uri * mediaType:string -&gt; unit<br />\nÂ Â member Dispose : unit -&gt; unit<br />\nÂ Â member GetCurrentlySpokenPrompt : unit -&gt; Prompt<br />\nÂ Â member GetInstalledVoices : unit -&gt;\nReadOnlyCollection&lt;InstalledVoice&gt; + 1 overload<br />\nÂ Â member Pause : unit -&gt; unit<br />\nÂ Â member Rate : int with get, set<br />\nÂ Â member RemoveLexicon : uri:Uri -&gt; unit<br />\nÂ Â member Resume : unit -&gt; unit<br />\nÂ Â member SelectVoice : name:string -&gt; unit<br />\nÂ Â ...<br />\n<br />\nFull name: System.Speech.Synthesis.SpeechSynthesizer<br />\n<br />\n--------------------<br />\nSpeechSynthesizer() : unit</div>\n<div class=\"tip\" id=\"fs6\">val say : s:string -&gt; unit<br />\n<br />\nFull name: XMas fun.say</div>\n<div class=\"tip\" id=\"fs7\">val s : string</div>\n<div class=\"tip\" id=\"fs8\">SpeechSynthesizer.Speak(promptBuilder: PromptBuilder)\n: unit<br />\nSpeechSynthesizer.Speak(prompt: Prompt) : unit<br />\nSpeechSynthesizer.Speak(textToSpeak: string) : unit</div>\n<div class=\"tip\" id=\"fs9\">Multiple items<br />\nval string : value:'T -&gt; string<br />\n<br />\nFull name: Microsoft.FSharp.Core.Operators.string<br />\n<br />\n--------------------<br />\ntype string = System.String<br />\n<br />\nFull name: Microsoft.FSharp.Core.string</div>\n<div class=\"tip\" id=\"fs10\">namespace System.Globalization</div>\n<div class=\"tip\" id=\"fs11\">val english : CultureInfo<br />\n<br />\nFull name: XMas fun.english</div>\n<div class=\"tip\" id=\"fs12\">Multiple items<br />\ntype CultureInfo =<br />\nÂ Â new : name:string -&gt; CultureInfo + 3 overloads<br />\nÂ Â member Calendar : Calendar<br />\nÂ Â member ClearCachedData : unit -&gt; unit<br />\nÂ Â member Clone : unit -&gt; obj<br />\nÂ Â member CompareInfo : CompareInfo<br />\nÂ Â member CultureTypes : CultureTypes<br />\nÂ Â member DateTimeFormat : DateTimeFormatInfo with get, set<br />\nÂ Â member DisplayName : string<br />\nÂ Â member EnglishName : string<br />\nÂ Â member Equals : value:obj -&gt; bool<br />\nÂ Â ...<br />\n<br />\nFull name: System.Globalization.CultureInfo<br />\n<br />\n--------------------<br />\nCultureInfo(name: string) : unit<br />\nCultureInfo(culture: int) : unit<br />\nCultureInfo(name: string, useUserOverride: bool) : unit<br />\nCultureInfo(culture: int, useUserOverride: bool) : unit</div>\n<div class=\"tip\" id=\"fs13\">CultureInfo.GetCultureInfo(name: string) :\nCultureInfo<br />\nCultureInfo.GetCultureInfo(culture: int) : CultureInfo<br />\nCultureInfo.GetCultureInfo(name: string, altName: string) : CultureInfo</div>\n<div class=\"tip\" id=\"fs14\">SpeechSynthesizer.SelectVoiceByHints(gender:\nVoiceGender) : unit<br />\nSpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge) :\nunit<br />\nSpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge,\nvoiceAlternate: int) : unit<br />\nSpeechSynthesizer.SelectVoiceByHints(gender: VoiceGender, age: VoiceAge,\nvoiceAlternate: int, culture: CultureInfo) : unit</div>\n<div class=\"tip\" id=\"fs15\">type VoiceGender =<br />\nÂ Â | NotSet = 0<br />\nÂ Â | Male = 1<br />\nÂ Â | Female = 2<br />\nÂ Â | Neutral = 3<br />\n<br />\nFull name: System.Speech.Synthesis.VoiceGender</div>\n<div class=\"tip\" id=\"fs16\">field VoiceGender.NotSet = 0</div>\n<div class=\"tip\" id=\"fs17\">type VoiceAge =<br />\nÂ Â | NotSet = 0<br />\nÂ Â | Child = 10<br />\nÂ Â | Teen = 15<br />\nÂ Â | Adult = 30<br />\nÂ Â | Senior = 65<br />\n<br />\nFull name: System.Speech.Synthesis.VoiceAge</div>\n<div class=\"tip\" id=\"fs18\">field VoiceAge.NotSet = 0</div>\n<div class=\"tip\" id=\"fs19\">Multiple items<br />\nmodule List<br />\n<br />\nfrom Microsoft.FSharp.Collections<br />\n<br />\n--------------------<br />\ntype List&lt;'T&gt; =<br />\nÂ Â | ( [] )<br />\nÂ Â | ( :: ) of Head: 'T * Tail: 'T list<br />\nÂ Â interface IEnumerable<br />\nÂ Â interface IEnumerable&lt;'T&gt;<br />\nÂ Â member Head : 'T<br />\nÂ Â member IsEmpty : bool<br />\nÂ Â member Item : index:int -&gt; 'T with get<br />\nÂ Â member Length : int<br />\nÂ Â member Tail : 'T list<br />\nÂ Â static member Cons : head:'T * tail:'T list -&gt; 'T list<br />\nÂ Â static member Empty : 'T list<br />\n<br />\nFull name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>\n<div class=\"tip\" id=\"fs20\">val map : mapping:('T -&gt; 'U) -&gt; list:'T list\n-&gt; 'U list<br />\n<br />\nFull name: Microsoft.FSharp.Collections.List.map</div>\n<div class=\"tip\" id=\"fs21\">val n : int</div>\n<div class=\"tip\" id=\"fs22\">val iter : action:('T -&gt; unit) -&gt; list:'T list\n-&gt; unit<br />\n<br />\nFull name: Microsoft.FSharp.Collections.List.iter</div>\n<div class=\"tip\" id=\"fs23\">namespace System.Speech.Recognition</div>\n<div class=\"tip\" id=\"fs24\">type Grammar =<br />\nÂ Â | Phrase of text: string * result: string<br />\nÂ Â | Lst of Grammar list<br />\nÂ Â | Alt of Grammar list<br />\nÂ Â | Repeat of min: int * max: int * Grammar<br />\n<br />\nFull name: XMas fun.Grammar</div>\n<div class=\"tip\" id=\"fs25\">union case Grammar.Phrase: text: string * result:\nstring -&gt; Grammar</div>\n<div class=\"tip\" id=\"fs26\">union case Grammar.Lst: Grammar list -&gt;\nGrammar</div>\n<div class=\"tip\" id=\"fs27\">type 'T list = List&lt;'T&gt;<br />\n<br />\nFull name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>\n<div class=\"tip\" id=\"fs28\">union case Grammar.Alt: Grammar list -&gt;\nGrammar</div>\n<div class=\"tip\" id=\"fs29\">union case Grammar.Repeat: min: int * max: int *\nGrammar -&gt; Grammar</div>\n<div class=\"tip\" id=\"fs30\">val min : e1:'T -&gt; e2:'T -&gt; 'T (requires\ncomparison)<br />\n<br />\nFull name: Microsoft.FSharp.Core.Operators.min</div>\n<div class=\"tip\" id=\"fs31\">Multiple items<br />\nval int : value:'T -&gt; int (requires member op_Explicit)<br />\n<br />\nFull name: Microsoft.FSharp.Core.Operators.int<br />\n<br />\n--------------------<br />\ntype int = int32<br />\n<br />\nFull name: Microsoft.FSharp.Core.int<br />\n<br />\n--------------------<br />\ntype int&lt;'Measure&gt; = int<br />\n<br />\nFull name: Microsoft.FSharp.Core.int&lt;_&gt;</div>\n<div class=\"tip\" id=\"fs32\">val max : e1:'T -&gt; e2:'T -&gt; 'T (requires\ncomparison)<br />\n<br />\nFull name: Microsoft.FSharp.Core.Operators.max</div>\n<div class=\"tip\" id=\"fs33\">val build : _arg1:Grammar -&gt; GrammarBuilder<br />\n<br />\nFull name: XMas fun.build</div>\n<div class=\"tip\" id=\"fs34\">val text : string</div>\n<div class=\"tip\" id=\"fs35\">val result : string</div>\n<div class=\"tip\" id=\"fs36\">Multiple items<br />\ntype GrammarBuilder =<br />\nÂ Â new : unit -&gt; GrammarBuilder + 7 overloads<br />\nÂ Â member Append : phrase:string -&gt; unit + 7 overloads<br />\nÂ Â member AppendDictation : unit -&gt; unit + 1 overload<br />\nÂ Â member AppendRuleReference : path:string -&gt; unit + 1\noverload<br />\nÂ Â member AppendWildcard : unit -&gt; unit<br />\nÂ Â member Culture : CultureInfo with get, set<br />\nÂ Â member DebugShowPhrases : string<br />\nÂ Â static member Add : phrase:string * builder:GrammarBuilder -&gt;\nGrammarBuilder + 4 overloads<br />\n<br />\nFull name: System.Speech.Recognition.GrammarBuilder<br />\n<br />\n--------------------<br />\nGrammarBuilder() : unit<br />\nGrammarBuilder(phrase: string) : unit<br />\nGrammarBuilder(alternateChoices: Choices) : unit<br />\nGrammarBuilder(key: SemanticResultKey) : unit<br />\nGrammarBuilder(value: SemanticResultValue) : unit<br />\nGrammarBuilder(phrase: string, subsetMatchingCriteria: SubsetMatchingMode) :\nunit<br />\nGrammarBuilder(phrase: string, minRepeat: int, maxRepeat: int) : unit<br />\nGrammarBuilder(builder: GrammarBuilder, minRepeat: int, maxRepeat: int) :\nunit</div>\n<div class=\"tip\" id=\"fs37\">Multiple items<br />\ntype SemanticResultValue =<br />\nÂ Â new : value:obj -&gt; SemanticResultValue + 2 overloads<br />\nÂ Â member ToGrammarBuilder : unit -&gt; GrammarBuilder<br />\n<br />\nFull name: System.Speech.Recognition.SemanticResultValue<br />\n<br />\n--------------------<br />\nSemanticResultValue(value: obj) : unit<br />\nSemanticResultValue(phrase: string, value: obj) : unit<br />\nSemanticResultValue(builder: GrammarBuilder, value: obj) : unit</div>\n<div class=\"tip\" id=\"fs38\">val grammars : Grammar list</div>\n<div class=\"tip\" id=\"fs39\">val builder : GrammarBuilder</div>\n<div class=\"tip\" id=\"fs40\">GrammarBuilder.Append(value: SemanticResultValue) :\nunit<br />\nGrammarBuilder.Append(key: SemanticResultKey) : unit<br />\nGrammarBuilder.Append(alternateChoices: Choices) : unit<br />\nGrammarBuilder.Append(builder: GrammarBuilder) : unit<br />\nGrammarBuilder.Append(phrase: string) : unit<br />\nGrammarBuilder.Append(phrase: string, subsetMatchingCriteria:\nSubsetMatchingMode) : unit<br />\nGrammarBuilder.Append(builder: GrammarBuilder, minRepeat: int, maxRepeat: int)\n: unit<br />\nGrammarBuilder.Append(phrase: string, minRepeat: int, maxRepeat: int) :\nunit</div>\n<div class=\"tip\" id=\"fs41\">val alternatives : Grammar list</div>\n<div class=\"tip\" id=\"fs42\">val choices : GrammarBuilder []</div>\n<div class=\"tip\" id=\"fs43\">val toArray : list:'T list -&gt; 'T []<br />\n<br />\nFull name: Microsoft.FSharp.Collections.List.toArray</div>\n<div class=\"tip\" id=\"fs44\">Multiple items<br />\ntype Choices =<br />\nÂ Â new : unit -&gt; Choices + 2 overloads<br />\nÂ Â member Add : params phrases:string[] -&gt; unit + 1 overload<br />\nÂ Â member ToGrammarBuilder : unit -&gt; GrammarBuilder<br />\n<br />\nFull name: System.Speech.Recognition.Choices<br />\n<br />\n--------------------<br />\nChoices() : unit<br />\nChoices(params phrases: string []) : unit<br />\nChoices(params alternateChoices: GrammarBuilder []) : unit</div>\n<div class=\"tip\" id=\"fs45\">val min : int</div>\n<div class=\"tip\" id=\"fs46\">val max : int</div>\n<div class=\"tip\" id=\"fs47\">val grammar : Grammar</div>\n<div class=\"tip\" id=\"fs48\">val recog : SpeechRecognizer<br />\n<br />\nFull name: XMas fun.recog</div>\n<div class=\"tip\" id=\"fs49\">Multiple items<br />\ntype SpeechRecognizer =<br />\nÂ Â new : unit -&gt; SpeechRecognizer<br />\nÂ Â member AudioFormat : SpeechAudioFormatInfo<br />\nÂ Â member AudioLevel : int<br />\nÂ Â member AudioPosition : TimeSpan<br />\nÂ Â member AudioState : AudioState<br />\nÂ Â member Dispose : unit -&gt; unit<br />\nÂ Â member EmulateRecognize : inputText:string -&gt; RecognitionResult\n+ 2 overloads<br />\nÂ Â member EmulateRecognizeAsync : inputText:string -&gt; unit + 2\noverloads<br />\nÂ Â member Enabled : bool with get, set<br />\nÂ Â member Grammars : ReadOnlyCollection&lt;Grammar&gt;<br />\nÂ Â ...<br />\n<br />\nFull name: System.Speech.Recognition.SpeechRecognizer<br />\n<br />\n--------------------<br />\nSpeechRecognizer() : unit</div>\n<div class=\"tip\" id=\"fs50\">val recognize : grammar:Grammar -&gt;\nrecognized:(string -&gt; string -&gt; unit) -&gt; rejected:(unit -&gt; unit)\n-&gt; bool<br />\n<br />\nFull name: XMas fun.recognize</div>\n<div class=\"tip\" id=\"fs51\">val recognized : (string -&gt; string -&gt;\nunit)</div>\n<div class=\"tip\" id=\"fs52\">val rejected : (unit -&gt; unit)</div>\n<div class=\"tip\" id=\"fs53\">property GrammarBuilder.Culture: CultureInfo</div>\n<div class=\"tip\" id=\"fs54\">property SpeechRecognizer.RecognizerInfo:\nRecognizerInfo</div>\n<div class=\"tip\" id=\"fs55\">property RecognizerInfo.Culture: CultureInfo</div>\n<div class=\"tip\" id=\"fs56\">val printfn :\nformat:Printf.TextWriterFormat&lt;'T&gt; -&gt; 'T<br />\n<br />\nFull name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>\n<div class=\"tip\" id=\"fs57\">SpeechRecognizer.LoadGrammar(grammar: Grammar) :\nunit</div>\n<div class=\"tip\" id=\"fs58\">event SpeechRecognizer.SpeechRecognized:\nIEvent&lt;System.EventHandler&lt;SpeechRecognizedEventArgs&gt;,SpeechRecognizedEventArgs&gt;</div>\n<div class=\"tip\" id=\"fs59\">Multiple items<br />\nmodule Event<br />\n<br />\nfrom Microsoft.FSharp.Control<br />\n<br />\n--------------------<br />\ntype Event&lt;'T&gt; =<br />\nÂ Â new : unit -&gt; Event&lt;'T&gt;<br />\nÂ Â member Trigger : arg:'T -&gt; unit<br />\nÂ Â member Publish : IEvent&lt;'T&gt;<br />\n<br />\nFull name: Microsoft.FSharp.Control.Event&lt;_&gt;<br />\n<br />\n--------------------<br />\ntype Event&lt;'Delegate,'Args (requires delegate and 'Delegate :&gt;\nDelegate)&gt; =<br />\nÂ Â new : unit -&gt; Event&lt;'Delegate,'Args&gt;<br />\nÂ Â member Trigger : sender:obj * args:'Args -&gt; unit<br />\nÂ Â member Publish : IEvent&lt;'Delegate,'Args&gt;<br />\n<br />\nFull name: Microsoft.FSharp.Control.Event&lt;_,_&gt;<br />\n<br />\n--------------------<br />\nnew : unit -&gt; Event&lt;'T&gt;<br />\n<br />\n--------------------<br />\nnew : unit -&gt; Event&lt;'Delegate,'Args&gt;</div>\n<div class=\"tip\" id=\"fs60\">val add : callback:('T -&gt; unit) -&gt;\nsourceEvent:IEvent&lt;'Del,'T&gt; -&gt; unit (requires delegate and 'Del :&gt;\nSystem.Delegate)<br />\n<br />\nFull name: Microsoft.FSharp.Control.Event.add</div>\n<div class=\"tip\" id=\"fs61\">val e : SpeechRecognizedEventArgs</div>\n<div class=\"tip\" id=\"fs62\">property RecognitionEventArgs.Result:\nRecognitionResult</div>\n<div class=\"tip\" id=\"fs63\">property RecognizedPhrase.Text: string</div>\n<div class=\"tip\" id=\"fs64\">property RecognizedPhrase.Semantics:\nSemanticValue</div>\n<div class=\"tip\" id=\"fs65\">property SemanticValue.Value: obj</div>\n<div class=\"tip\" id=\"fs66\">event SpeechRecognizer.SpeechRecognitionRejected:\nIEvent&lt;System.EventHandler&lt;SpeechRecognitionRejectedEventArgs&gt;,SpeechRecognitionRejectedEventArgs&gt;</div>\n<div class=\"tip\" id=\"fs67\">val e : SpeechRecognitionRejectedEventArgs</div>\n<div class=\"tip\" id=\"fs68\">property SpeechRecognizer.Enabled: bool</div>\n<div class=\"tip\" id=\"fs69\">namespace FSharp</div>\n<div class=\"tip\" id=\"fs70\">namespace FSharp.Data</div>\n<div class=\"tip\" id=\"fs71\">val fb :\nFreebaseData.ServiceTypes.FreebaseService<br />\n<br />\nFull name: XMas fun.fb</div>\n<div class=\"tip\" id=\"fs72\">type FreebaseData =<br />\nÂ Â static member GetDataContext : unit -&gt; FreebaseService<br />\nÂ Â nested type ServiceTypes<br />\n<br />\nFull name: FSharp.Data.FreebaseData<br />\n<em><br />\n<br />\n&lt;summary&gt;Typed representation of Freebase data. See\nhttp://www.freebase.com for terms and conditions.&lt;/summary&gt;</em></div>\n<div class=\"tip\" id=\"fs73\">FreebaseData.GetDataContext() :\nFreebaseData.ServiceTypes.FreebaseService</div>\n<div class=\"tip\" id=\"fs74\">val santaActorsFilms : (string * string) list<br />\n<br />\nFull name: XMas fun.santaActorsFilms</div>\n<div class=\"tip\" id=\"fs75\">property\nFreebaseData.ServiceTypes.Film.Film.Film_characterDataIndividualsAZ.S:\nFreebaseData.ServiceTypes.Film.Film.Film_characterDataIndividualsAZ.Film_characterDataIndividualsIndexedS<br />\n\n<em><br />\n<br />\n&lt;summary&gt;An indexing of specific named individuals of type &amp;apos;Film\ncharacter&amp;apos; in the web data store&lt;/summary&gt;</em></div>\n<div class=\"tip\" id=\"fs76\">module Seq<br />\n<br />\nfrom Microsoft.FSharp.Collections</div>\n<div class=\"tip\" id=\"fs77\">val map : mapping:('T -&gt; 'U) -&gt;\nsource:seq&lt;'T&gt; -&gt; seq&lt;'U&gt;<br />\n<br />\nFull name: Microsoft.FSharp.Collections.Seq.map</div>\n<div class=\"tip\" id=\"fs78\">val c :\nFreebaseData.ServiceTypes.Film.Film.PerformanceData</div>\n<div class=\"tip\" id=\"fs79\">property\nFreebaseData.ServiceTypes.Film.Film.PerformanceData.Actor:\nFreebaseData.ServiceTypes.Film.Film.ActorData<br />\n<em><br />\n<br />\n&lt;summary&gt;&lt;/summary&gt;</em></div>\n<div class=\"tip\" id=\"fs80\">property Runtime.Freebase.IFreebaseObject.Name:\nstring</div>\n<div class=\"tip\" id=\"fs81\">property\nFreebaseData.ServiceTypes.Film.Film.PerformanceData.Film:\nFreebaseData.ServiceTypes.Film.Film.FilmData<br />\n<em><br />\n<br />\n&lt;summary&gt;&lt;/summary&gt;</em></div>\n<div class=\"tip\" id=\"fs82\">val toList : source:seq&lt;'T&gt; -&gt; 'T\nlist<br />\n<br />\nFull name: Microsoft.FSharp.Collections.Seq.toList</div>\n<div class=\"tip\" id=\"fs83\">val santaActorsGrammar : Grammar<br />\n<br />\nFull name: XMas fun.santaActorsGrammar</div>\n<div class=\"tip\" id=\"fs84\">val actor : string</div>\n<div class=\"tip\" id=\"fs85\">val film : string</div>\n<div class=\"tip\" id=\"fs86\">val recognized : text:string -&gt; value:string\n-&gt; unit<br />\n<br />\nFull name: XMas fun.recognized</div>\n<div class=\"tip\" id=\"fs87\">val value : string</div>\n<div class=\"tip\" id=\"fs88\">val sprintf : format:Printf.StringFormat&lt;'T&gt;\n-&gt; 'T<br />\n<br />\nFull name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>\n<div class=\"tip\" id=\"fs89\">val rejected : unit -&gt; unit<br />\n<br />\nFull name: XMas fun.rejected</div>","","speaking computers for more fun didn try mono but should also work with some tweaking see details here xmas good time surprise kids and what more fun than talking computer hello world nothing easier and this kind hello world will appeal them programming flash quot system speech quot open system speech synthesis let synt new speechsynthesizer let say synt speak string say quot hello world quot course you french like say this with awful french accent something like hÃ©lo ouorld but you can select different voice available providing hints open system globalization let english cultureinfo getcultureinfo quot quot synt selectvoicebyhints voicegender notset voiceage notset english say quot hello world quot far better can you beat now talking fizz buzz 100 can you beat 100 list map fun match with quot fizzbuzz quot quot fizz quot quot buzz quot string list iter say even harder now with recognizer can wait for voice user input the problem with the grammar api that totally mutable and not really dsl oriented let correct that open system speech recognition type grammar phrase text string result string lst grammar list alt grammar list repeat min int max int grammar let rec build function phrase text result just build the single phrase grammarbuilder semanticresultvalue text result lst grammars append parts grammars one after the other let builder grammarbuilder grammars list map build list iter builder append builder alt alternatives create alternatives let choices alternatives list map build list toarray grammarbuilder choices repeat min max grammar repeat part the grammar grammarbuilder build grammar min max this not full dsl for speach recognition you can look all the grammarbuilder methods add more possibilities even here use only phrase and alt now need recognizer and wire the grammar with functions that will called when part the grammar recognized rejected mandatory set grammar culture the recognizer culture there usually single recognizer installed default your system and uses installed system culture case french let recog new speechrecognizer let recognize grammar recognized rejected let builder build grammar builder culture recog recognizerinfo culture printfn quot quot recog recognizerinfo culture recog loadgrammar grammar builder recog speechrecognized event add fun recognized result text string result semantics value recog speechrecognitionrejected event add fun rejected recog enabled can then use this create little christmass quizz thanks the fsharp data freebase type provider use free base find list actors who plaid santa movies for this install the fsharp data nuget nuget install fsharp data packages the dll should packages fsharp data lib net40 fsharp data dll quot packages fsharp data lib net40 fsharp data dll quot open fsharp data let freebasedata getdatacontext let build the grammar let santaactorsfilms arts and entertainment film film characters individualsaz santa claus portrayed films seq map fun actor name film name seq tolist let santaactorsgrammar santaactorsfilms list map fun actor film phrase actor film alt here the function call when actor recognized tried pass discriminated union value but even the api uses object the documentation states that has bool int string used only strings here let recognized text value say sprintf quot true was santa quot text value here the function when the speech could not matched with the grammar also possible get the audio the text this case decided ignore due time constraints let rejected say quot not santa quot now let run recognize santaactorsgrammar recognized rejected this point the speech recognition configuration should appear the first time you use once done you should able try the quizz your culture not english don hesitate use local accent for actor name conlusion hope you had fun with this api and that you want tweak for your own demo the full code using fsharp formatting gist happy christmass namespace system namespace system speech namespace system speech synthesis val synt speechsynthesizer full name xmas fun synt multiple items type speechsynthesizer new unit speechsynthesizer member addlexicon uri uri mediatype string unit member dispose unit unit member getcurrentlyspokenprompt unit prompt member getinstalledvoices unit readonlycollection installedvoice overload member pause unit unit member rate int with get set member removelexicon uri uri unit member resume unit unit member selectvoice name string unit full name system speech synthesis speechsynthesizer speechsynthesizer unit val say string unit full name xmas fun say val string speechsynthesizer speak promptbuilder promptbuilder unit speechsynthesizer speak prompt prompt unit speechsynthesizer speak texttospeak string unit multiple items val string value string full name microsoft fsharp core operators string type string system string full name microsoft fsharp core string namespace system globalization val english cultureinfo full name xmas fun english multiple items type cultureinfo new name string cultureinfo overloads member calendar calendar member clearcacheddata unit unit member clone unit obj member compareinfo compareinfo member culturetypes culturetypes member datetimeformat datetimeformatinfo with get set member displayname string member englishname string member equals value obj bool full name system globalization cultureinfo cultureinfo name string unit cultureinfo culture int unit cultureinfo name string useuseroverride bool unit cultureinfo culture int useuseroverride bool unit cultureinfo getcultureinfo name string cultureinfo cultureinfo getcultureinfo culture int cultureinfo cultureinfo getcultureinfo name string altname string cultureinfo speechsynthesizer selectvoicebyhints gender voicegender unit speechsynthesizer selectvoicebyhints gender voicegender age voiceage unit speechsynthesizer selectvoicebyhints gender voicegender age voiceage voicealternate int unit speechsynthesizer selectvoicebyhints gender voicegender age voiceage voicealternate int culture cultureinfo unit type voicegender notset male female neutral full name system speech synthesis voicegender field voicegender notset type voiceage notset child teen adult senior full name system speech synthesis voiceage field voiceage notset multiple items module list from microsoft fsharp collections type list head tail list interface ienumerable interface ienumerable member head member isempty bool member item index int with get member length int member tail list static member cons head tail list list static member empty list full name microsoft fsharp collections list val map mapping list list list full name microsoft fsharp collections list map val int val iter action unit list list unit full name microsoft fsharp collections list iter namespace system speech recognition type grammar phrase text string result string lst grammar list alt grammar list repeat min int max int grammar full name xmas fun grammar union case grammar phrase text string result string grammar union case grammar lst grammar list grammar type list list full name microsoft fsharp collections list union case grammar alt grammar list grammar union case grammar repeat min int max int grammar grammar val min requires comparison full name microsoft fsharp core operators min multiple items val int value int requires member explicit full name microsoft fsharp core operators int type int int32 full name microsoft fsharp core int type int measure int full name microsoft fsharp core int val max requires comparison full name microsoft fsharp core operators max val build arg1 grammar grammarbuilder full name xmas fun build val text string val result string multiple items type grammarbuilder new unit grammarbuilder overloads member append phrase string unit overloads member appenddictation unit unit overload member appendrulereference path string unit overload member appendwildcard unit unit member culture cultureinfo with get set member debugshowphrases string static member add phrase string builder grammarbuilder grammarbuilder overloads full name system speech recognition grammarbuilder grammarbuilder unit grammarbuilder phrase string unit grammarbuilder alternatechoices choices unit grammarbuilder key semanticresultkey unit grammarbuilder value semanticresultvalue unit grammarbuilder phrase string subsetmatchingcriteria subsetmatchingmode unit grammarbuilder phrase string minrepeat int maxrepeat int unit grammarbuilder builder grammarbuilder minrepeat int maxrepeat int unit multiple items type semanticresultvalue new value obj semanticresultvalue overloads member togrammarbuilder unit grammarbuilder full name system speech recognition semanticresultvalue semanticresultvalue value obj unit semanticresultvalue phrase string value obj unit semanticresultvalue builder grammarbuilder value obj unit val grammars grammar list val builder grammarbuilder grammarbuilder append value semanticresultvalue unit grammarbuilder append key semanticresultkey unit grammarbuilder append alternatechoices choices unit grammarbuilder append builder grammarbuilder unit grammarbuilder append phrase string unit grammarbuilder append phrase string subsetmatchingcriteria subsetmatchingmode unit grammarbuilder append builder grammarbuilder minrepeat int maxrepeat int unit grammarbuilder append phrase string minrepeat int maxrepeat int unit val alternatives grammar list val choices grammarbuilder val toarray list list full name microsoft fsharp collections list toarray multiple items type choices new unit choices overloads member add params phrases string unit overload member togrammarbuilder unit grammarbuilder full name system speech recognition choices choices unit choices params phrases string unit choices params alternatechoices grammarbuilder unit val min int val max int val grammar grammar val recog speechrecognizer full name xmas fun recog multiple items type speechrecognizer new unit speechrecognizer member audioformat speechaudioformatinfo member audiolevel int member audioposition timespan member audiostate audiostate member dispose unit unit member emulaterecognize inputtext string recognitionresult overloads member emulaterecognizeasync inputtext string unit overloads member enabled bool with get set member grammars readonlycollection grammar full name system speech recognition speechrecognizer speechrecognizer unit val recognize grammar grammar recognized string string unit rejected unit unit bool full name xmas fun recognize val recognized string string unit val rejected unit unit property grammarbuilder culture cultureinfo property speechrecognizer recognizerinfo recognizerinfo property recognizerinfo culture cultureinfo val printfn format printf textwriterformat full name microsoft fsharp core extratopleveloperators printfn speechrecognizer loadgrammar grammar grammar unit event speechrecognizer speechrecognized ievent system eventhandler speechrecognizedeventargs speechrecognizedeventargs multiple items module event from microsoft fsharp control type event new unit event member trigger arg unit member publish ievent full name microsoft fsharp control event type event delegate args requires delegate and delegate delegate new unit event delegate args member trigger sender obj args args unit member publish ievent delegate args full name microsoft fsharp control event new unit event new unit event delegate args val add callback unit sourceevent ievent del unit requires delegate and del system delegate full name microsoft fsharp control event add val speechrecognizedeventargs property recognitioneventargs result recognitionresult property recognizedphrase text string property recognizedphrase semantics semanticvalue property semanticvalue value obj event speechrecognizer speechrecognitionrejected ievent system eventhandler speechrecognitionrejectedeventargs speechrecognitionrejectedeventargs val speechrecognitionrejectedeventargs property speechrecognizer enabled bool namespace fsharp namespace fsharp data val freebasedata servicetypes freebaseservice full name xmas fun type freebasedata static member getdatacontext unit freebaseservice nested type servicetypes full name fsharp data freebasedata summary typed representation freebase data see http www freebase com for terms and conditions summary freebasedata getdatacontext freebasedata servicetypes freebaseservice val santaactorsfilms string string list full name xmas fun santaactorsfilms property freebasedata servicetypes film film film characterdataindividualsaz freebasedata servicetypes film film film characterdataindividualsaz film characterdataindividualsindexeds summary indexing specific named individuals type amp apos film character amp apos the web data store summary module seq from microsoft fsharp collections val map mapping source seq seq full name microsoft fsharp collections seq map val freebasedata servicetypes film film performancedata property freebasedata servicetypes film film performancedata actor freebasedata servicetypes film film actordata summary summary property runtime freebase ifreebaseobject name string property freebasedata servicetypes film film performancedata film freebasedata servicetypes film film filmdata summary summary val tolist source seq list full name microsoft fsharp collections seq tolist val santaactorsgrammar grammar full name xmas fun santaactorsgrammar val actor string val film string val recognized text string value string unit full name xmas fun recognized val value string val sprintf format printf stringformat full name microsoft fsharp core extratopleveloperators sprintf val rejected unit unit full name xmas fun rejected","a:0:{}","1","0","1","1","2","0","0"
"839235","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","57399","2015-12-17 10:44:00","Europe/Paris","2015-12-17 09:44:43","2015-12-17 09:50:44","","post","xhtml","2015/12/17/Ukulele-Fun-for-XMas-!","en","Ukulele Fun for XMas !","","","<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <!-- \r\n      The Ukulele\r\n parameters will be replaced with the \r\n      document title extracted from the <h1> element or\r\n      file name, if there is no <h1> heading\r\n    -->\r\n    <title>Ukulele\r\n</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <script src=\"http://code.jquery.com/jquery-1.8.0.js\"></script>\r\n    <script src=\"http://code.jquery.com/ui/1.8.23/jquery-ui.js\"></script>\r\n    <script src=\"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/js/bootstrap.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\r\n    <link href=\"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/css/bootstrap-combined.min.css\" rel=\"stylesheet\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"content/style.css\" />\r\n    <script src=\"content/tips.js\" type=\"text/javascript\"></script>\r\n    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->\r\n    <!--[if lt IE 9]>\r\n      <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\r\n    <![endif]-->\r\n  </head>\r\n  <body>\r\n    <div class=\"container\">\r\n      <div class=\"row\" style=\"margin-top:30px\">\r\n        <div class=\"span1\"></div>\r\n        <div class=\"span10\" id=\"main\">\r\n          <h1>Ukulele</h1>\r\n\r\n<p><em>This post is part of the <a href=\"https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/\">F# Advent Calendar in English 2015</a> project.</em>\r\n<em>Check out all the other great posts there! And special thanks to Sergey Tihon for organizing this.</em></p>\r\n\r\n<p>Hi something fun and not too technical for end the year !</p>\r\n\r\n<p>As everyone knows, the <a href=\"https://www.google.fr/search?q=santa+claus+ukulele&amp;biw=1024&amp;bih=677&amp;tbm=isch&amp;source=lnms&amp;sa=X&amp;ved=0ahUKEwiHw5H8p-HJAhVE0xQKHZTdDuEQ_AUIBigB\">favorite instrument of Santa Claus is Ukulele</a> !\r\nSo let's play some music, and especialy some Ukulele !</p>\r\n\r\n<p>First thing first, let's create functions for notes. We start with C at octave 0, \r\nand have a progression by half tones.</p>\r\n\r\n<p>So C is 0, D is 2, E is 4.</p>\r\n\r\n<p>Since there is only a half tone between E and F, F is 5.</p>\r\n\r\n<p>F is 7, A is 9, B is 11, and we reach next octave at 12, which is C 1 :</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n<span class=\"l\">7: </span>\r\n<span class=\"l\">8: </span>\r\n<span class=\"l\">9: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs1', 1)\" onmouseover=\"showTip(event, 'fs1', 1)\" class=\"i\">System</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs2', 2)\" onmouseover=\"showTip(event, 'fs2', 2)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 3)\" onmouseover=\"showTip(event, 'fs3', 3)\" class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"n\">12</span> <span class=\"o\">*</span> <span onmouseout=\"hideTip(event, 'fs3', 4)\" onmouseover=\"showTip(event, 'fs3', 4)\" class=\"i\">n</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs4', 5)\" onmouseover=\"showTip(event, 'fs4', 5)\" class=\"f\">D</span> <span onmouseout=\"hideTip(event, 'fs3', 6)\" onmouseover=\"showTip(event, 'fs3', 6)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 7)\" onmouseover=\"showTip(event, 'fs2', 7)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 8)\" onmouseover=\"showTip(event, 'fs3', 8)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">2</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs5', 9)\" onmouseover=\"showTip(event, 'fs5', 9)\" class=\"f\">E</span> <span onmouseout=\"hideTip(event, 'fs3', 10)\" onmouseover=\"showTip(event, 'fs3', 10)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 11)\" onmouseover=\"showTip(event, 'fs2', 11)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 12)\" onmouseover=\"showTip(event, 'fs3', 12)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs6', 13)\" onmouseover=\"showTip(event, 'fs6', 13)\" class=\"f\">F</span> <span onmouseout=\"hideTip(event, 'fs3', 14)\" onmouseover=\"showTip(event, 'fs3', 14)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 15)\" onmouseover=\"showTip(event, 'fs2', 15)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 16)\" onmouseover=\"showTip(event, 'fs3', 16)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">5</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs7', 17)\" onmouseover=\"showTip(event, 'fs7', 17)\" class=\"f\">G</span> <span onmouseout=\"hideTip(event, 'fs3', 18)\" onmouseover=\"showTip(event, 'fs3', 18)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 19)\" onmouseover=\"showTip(event, 'fs2', 19)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 20)\" onmouseover=\"showTip(event, 'fs3', 20)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">7</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs8', 21)\" onmouseover=\"showTip(event, 'fs8', 21)\" class=\"f\">A</span> <span onmouseout=\"hideTip(event, 'fs3', 22)\" onmouseover=\"showTip(event, 'fs3', 22)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 23)\" onmouseover=\"showTip(event, 'fs2', 23)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 24)\" onmouseover=\"showTip(event, 'fs3', 24)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">9</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs9', 25)\" onmouseover=\"showTip(event, 'fs9', 25)\" class=\"f\">B</span> <span onmouseout=\"hideTip(event, 'fs3', 26)\" onmouseover=\"showTip(event, 'fs3', 26)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 27)\" onmouseover=\"showTip(event, 'fs2', 27)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs3', 28)\" onmouseover=\"showTip(event, 'fs3', 28)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">11</span> \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>For sharps and flat, lets define two functions that had and remove a half tone</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs10', 29)\" onmouseover=\"showTip(event, 'fs10', 29)\" class=\"f\">sharp</span> <span onmouseout=\"hideTip(event, 'fs3', 30)\" onmouseover=\"showTip(event, 'fs3', 30)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs3', 31)\" onmouseover=\"showTip(event, 'fs3', 31)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs11', 32)\" onmouseover=\"showTip(event, 'fs11', 32)\" class=\"f\">flat</span> <span onmouseout=\"hideTip(event, 'fs3', 33)\" onmouseover=\"showTip(event, 'fs3', 33)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs3', 34)\" onmouseover=\"showTip(event, 'fs3', 34)\" class=\"i\">n</span> <span class=\"o\">-</span> <span class=\"n\">1</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>We can now create names for each note :</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs12', 35)\" onmouseover=\"showTip(event, 'fs12', 35)\" class=\"f\">Cd</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs2', 36)\" onmouseover=\"showTip(event, 'fs2', 36)\" class=\"f\">C</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs10', 37)\" onmouseover=\"showTip(event, 'fs10', 37)\" class=\"f\">sharp</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs13', 38)\" onmouseover=\"showTip(event, 'fs13', 38)\" class=\"f\">Db</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs4', 39)\" onmouseover=\"showTip(event, 'fs4', 39)\" class=\"f\">D</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs11', 40)\" onmouseover=\"showTip(event, 'fs11', 40)\" class=\"f\">flat</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs14', 41)\" onmouseover=\"showTip(event, 'fs14', 41)\" class=\"f\">Dd</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs4', 42)\" onmouseover=\"showTip(event, 'fs4', 42)\" class=\"f\">D</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs10', 43)\" onmouseover=\"showTip(event, 'fs10', 43)\" class=\"f\">sharp</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs15', 44)\" onmouseover=\"showTip(event, 'fs15', 44)\" class=\"f\">Eb</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs5', 45)\" onmouseover=\"showTip(event, 'fs5', 45)\" class=\"f\">E</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs11', 46)\" onmouseover=\"showTip(event, 'fs11', 46)\" class=\"f\">flat</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs16', 47)\" onmouseover=\"showTip(event, 'fs16', 47)\" class=\"f\">Fd</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs6', 48)\" onmouseover=\"showTip(event, 'fs6', 48)\" class=\"f\">F</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs10', 49)\" onmouseover=\"showTip(event, 'fs10', 49)\" class=\"f\">sharp</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs17', 50)\" onmouseover=\"showTip(event, 'fs17', 50)\" class=\"f\">Gb</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs7', 51)\" onmouseover=\"showTip(event, 'fs7', 51)\" class=\"f\">G</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs11', 52)\" onmouseover=\"showTip(event, 'fs11', 52)\" class=\"f\">flat</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs18', 53)\" onmouseover=\"showTip(event, 'fs18', 53)\" class=\"f\">Gd</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs7', 54)\" onmouseover=\"showTip(event, 'fs7', 54)\" class=\"f\">G</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs10', 55)\" onmouseover=\"showTip(event, 'fs10', 55)\" class=\"f\">sharp</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs19', 56)\" onmouseover=\"showTip(event, 'fs19', 56)\" class=\"f\">Ab</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs8', 57)\" onmouseover=\"showTip(event, 'fs8', 57)\" class=\"f\">A</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs11', 58)\" onmouseover=\"showTip(event, 'fs11', 58)\" class=\"f\">flat</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs20', 59)\" onmouseover=\"showTip(event, 'fs20', 59)\" class=\"f\">Ad</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs8', 60)\" onmouseover=\"showTip(event, 'fs8', 60)\" class=\"f\">A</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs10', 61)\" onmouseover=\"showTip(event, 'fs10', 61)\" class=\"f\">sharp</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs21', 62)\" onmouseover=\"showTip(event, 'fs21', 62)\" class=\"f\">Bb</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs9', 63)\" onmouseover=\"showTip(event, 'fs9', 63)\" class=\"f\">B</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs11', 64)\" onmouseover=\"showTip(event, 'fs11', 64)\" class=\"f\">flat</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>There is no E sharp or F flat because it is F and E respectively, same thing for B and C...</p>\r\n\r\n<p>Will create a structure with a custome comparison/equality that doesn't\r\ntake the octave into account by using a 12 modulus, this will prove usefull to work with chords:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n<span class=\"l\">18: </span>\r\n<span class=\"l\">19: </span>\r\n<span class=\"l\">20: </span>\r\n<span class=\"l\">21: </span>\r\n<span class=\"l\">22: </span>\r\n<span class=\"l\">23: </span>\r\n<span class=\"l\">24: </span>\r\n<span class=\"l\">25: </span>\r\n<span class=\"l\">26: </span>\r\n<span class=\"l\">27: </span>\r\n<span class=\"l\">28: </span>\r\n<span class=\"l\">29: </span>\r\n<span class=\"l\">30: </span>\r\n<span class=\"l\">31: </span>\r\n<span class=\"l\">32: </span>\r\n<span class=\"l\">33: </span>\r\n<span class=\"l\">34: </span>\r\n<span class=\"l\">35: </span>\r\n<span class=\"l\">36: </span>\r\n<span class=\"l\">37: </span>\r\n<span class=\"l\">38: </span>\r\n<span class=\"l\">39: </span>\r\n<span class=\"l\">40: </span>\r\n<span class=\"l\">41: </span>\r\n<span class=\"l\">42: </span>\r\n<span class=\"l\">43: </span>\r\n<span class=\"l\">44: </span>\r\n<span class=\"l\">45: </span>\r\n<span class=\"l\">46: </span>\r\n<span class=\"l\">47: </span>\r\n<span class=\"l\">48: </span>\r\n<span class=\"l\">49: </span>\r\n<span class=\"l\">50: </span>\r\n<span class=\"l\">51: </span>\r\n<span class=\"l\">52: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\">[&lt;<span onmouseout=\"hideTip(event, 'fs22', 65)\" onmouseover=\"showTip(event, 'fs22', 65)\" class=\"t\">Struct</span>&gt;]\r\n[&lt;<span onmouseout=\"hideTip(event, 'fs23', 66)\" onmouseover=\"showTip(event, 'fs23', 66)\" class=\"t\">CustomComparison</span>&gt;]\r\n[&lt;<span onmouseout=\"hideTip(event, 'fs24', 67)\" onmouseover=\"showTip(event, 'fs24', 67)\" class=\"t\">CustomEquality</span>&gt;]\r\n[&lt;<span onmouseout=\"hideTip(event, 'fs25', 68)\" onmouseover=\"showTip(event, 'fs25', 68)\" class=\"t\">StructuredFormatDisplay</span>(<span class=\"s\">&quot;{Display}&quot;</span>)&gt;]\r\n<span class=\"k\">type</span> <span onmouseout=\"hideTip(event, 'fs26', 69)\" onmouseover=\"showTip(event, 'fs26', 69)\" class=\"t\">Note</span>(<span onmouseout=\"hideTip(event, 'fs27', 70)\" onmouseover=\"showTip(event, 'fs27', 70)\" class=\"i\">note</span> <span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs28', 71)\" onmouseover=\"showTip(event, 'fs28', 71)\" class=\"t\">int</span>) <span class=\"o\">=</span>\r\n    <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs29', 72)\" onmouseover=\"showTip(event, 'fs29', 72)\" class=\"i\">Note</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs27', 73)\" onmouseover=\"showTip(event, 'fs27', 73)\" class=\"i\">note</span>\r\n    \r\n    <span class=\"k\">override</span> <span onmouseout=\"hideTip(event, 'fs30', 74)\" onmouseover=\"showTip(event, 'fs30', 74)\" class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs31', 75)\" onmouseover=\"showTip(event, 'fs31', 75)\" class=\"f\">GetHashCode</span>() <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs27', 76)\" onmouseover=\"showTip(event, 'fs27', 76)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> \r\n\r\n    <span class=\"k\">override</span> <span onmouseout=\"hideTip(event, 'fs30', 77)\" onmouseover=\"showTip(event, 'fs30', 77)\" class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs32', 78)\" onmouseover=\"showTip(event, 'fs32', 78)\" class=\"f\">Equals</span> <span onmouseout=\"hideTip(event, 'fs33', 79)\" onmouseover=\"showTip(event, 'fs33', 79)\" class=\"i\">other</span> <span class=\"o\">=</span>\r\n        <span class=\"k\">match</span> <span onmouseout=\"hideTip(event, 'fs33', 80)\" onmouseover=\"showTip(event, 'fs33', 80)\" class=\"i\">other</span> <span class=\"k\">with</span>\r\n        | <span class=\"o\">:?</span> <span onmouseout=\"hideTip(event, 'fs26', 81)\" onmouseover=\"showTip(event, 'fs26', 81)\" class=\"t\">Note</span> <span class=\"k\">as</span> <span onmouseout=\"hideTip(event, 'fs34', 82)\" onmouseover=\"showTip(event, 'fs34', 82)\" class=\"i\">other</span> <span class=\"k\">-&gt;</span>\r\n            <span onmouseout=\"hideTip(event, 'fs27', 83)\" onmouseover=\"showTip(event, 'fs27', 83)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs34', 84)\" onmouseover=\"showTip(event, 'fs34', 84)\" class=\"i\">other</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 85)\" onmouseover=\"showTip(event, 'fs35', 85)\" class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>\r\n        | _ <span class=\"k\">-&gt;</span> <span class=\"k\">false</span>\r\n\r\n    <span class=\"k\">static</span> <span class=\"k\">member</span> <span onmouseout=\"hideTip(event, 'fs36', 86)\" onmouseover=\"showTip(event, 'fs36', 86)\" class=\"i\">names</span> <span class=\"o\">=</span> \r\n        [| <span class=\"s\">&quot;C&quot;</span>\r\n           <span class=\"s\">&quot;C#&quot;</span>\r\n           <span class=\"s\">&quot;D&quot;</span>\r\n           <span class=\"s\">&quot;D#&quot;</span>\r\n           <span class=\"s\">&quot;E&quot;</span>\r\n           <span class=\"s\">&quot;F&quot;</span>\r\n           <span class=\"s\">&quot;F#&quot;</span>\r\n           <span class=\"s\">&quot;G&quot;</span>\r\n           <span class=\"s\">&quot;G#&quot;</span>\r\n           <span class=\"s\">&quot;A&quot;</span>\r\n           <span class=\"s\">&quot;A#&quot;</span>\r\n           <span class=\"s\">&quot;B&quot;</span> |]\r\n    <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs37', 87)\" onmouseover=\"showTip(event, 'fs37', 87)\" class=\"i\">Display</span> <span class=\"o\">=</span> \r\n        <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs38', 88)\" onmouseover=\"showTip(event, 'fs38', 88)\" class=\"i\">name</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs26', 89)\" onmouseover=\"showTip(event, 'fs26', 89)\" class=\"t\">Note</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs39', 90)\" onmouseover=\"showTip(event, 'fs39', 90)\" class=\"i\">names</span><span class=\"o\">.</span>[<span onmouseout=\"hideTip(event, 'fs27', 91)\" onmouseover=\"showTip(event, 'fs27', 91)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>]\r\n        <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs40', 92)\" onmouseover=\"showTip(event, 'fs40', 92)\" class=\"i\">octave</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs27', 93)\" onmouseover=\"showTip(event, 'fs27', 93)\" class=\"i\">note</span> <span class=\"o\">/</span> <span class=\"n\">12</span>\r\n        <span onmouseout=\"hideTip(event, 'fs41', 94)\" onmouseover=\"showTip(event, 'fs41', 94)\" class=\"f\">sprintf</span> <span class=\"s\">&quot;</span><span class=\"pf\">%s</span><span class=\"s\"> </span><span class=\"pf\">%d</span><span class=\"s\">&quot;</span> <span onmouseout=\"hideTip(event, 'fs38', 95)\" onmouseover=\"showTip(event, 'fs38', 95)\" class=\"i\">name</span> <span onmouseout=\"hideTip(event, 'fs40', 96)\" onmouseover=\"showTip(event, 'fs40', 96)\" class=\"i\">octave</span>\r\n\r\n    <span class=\"k\">override</span> <span onmouseout=\"hideTip(event, 'fs42', 97)\" onmouseover=\"showTip(event, 'fs42', 97)\" class=\"i\">this</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs43', 98)\" onmouseover=\"showTip(event, 'fs43', 98)\" class=\"f\">ToString</span>() <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs42', 99)\" onmouseover=\"showTip(event, 'fs42', 99)\" class=\"i\">this</span><span class=\"o\">.</span><span class=\"i\">Display</span>\r\n        \r\n    <span class=\"k\">interface</span> <span onmouseout=\"hideTip(event, 'fs44', 100)\" onmouseover=\"showTip(event, 'fs44', 100)\" class=\"t\">IEquatable</span><span class=\"o\">&lt;</span><span onmouseout=\"hideTip(event, 'fs26', 101)\" onmouseover=\"showTip(event, 'fs26', 101)\" class=\"t\">Note</span><span class=\"o\">&gt;</span> <span class=\"k\">with</span>\r\n        <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs45', 102)\" onmouseover=\"showTip(event, 'fs45', 102)\" class=\"f\">Equals</span> <span onmouseout=\"hideTip(event, 'fs34', 103)\" onmouseover=\"showTip(event, 'fs34', 103)\" class=\"i\">other</span> <span class=\"o\">=</span>\r\n            <span onmouseout=\"hideTip(event, 'fs27', 104)\" onmouseover=\"showTip(event, 'fs27', 104)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs34', 105)\" onmouseover=\"showTip(event, 'fs34', 105)\" class=\"i\">other</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 106)\" onmouseover=\"showTip(event, 'fs35', 106)\" class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>\r\n    <span class=\"k\">interface</span> <span onmouseout=\"hideTip(event, 'fs46', 107)\" onmouseover=\"showTip(event, 'fs46', 107)\" class=\"t\">IComparable</span><span class=\"o\">&lt;</span><span onmouseout=\"hideTip(event, 'fs26', 108)\" onmouseover=\"showTip(event, 'fs26', 108)\" class=\"t\">Note</span><span class=\"o\">&gt;</span> <span class=\"k\">with</span>\r\n        <span class=\"k\">member</span> <span onmouseout=\"hideTip(event, 'fs30', 109)\" onmouseover=\"showTip(event, 'fs30', 109)\" class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs47', 110)\" onmouseover=\"showTip(event, 'fs47', 110)\" class=\"f\">CompareTo</span> <span onmouseout=\"hideTip(event, 'fs34', 111)\" onmouseover=\"showTip(event, 'fs34', 111)\" class=\"i\">other</span> <span class=\"o\">=</span>\r\n            <span onmouseout=\"hideTip(event, 'fs48', 112)\" onmouseover=\"showTip(event, 'fs48', 112)\" class=\"f\">compare</span> (<span onmouseout=\"hideTip(event, 'fs27', 113)\" onmouseover=\"showTip(event, 'fs27', 113)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) (<span onmouseout=\"hideTip(event, 'fs34', 114)\" onmouseover=\"showTip(event, 'fs34', 114)\" class=\"i\">other</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 115)\" onmouseover=\"showTip(event, 'fs35', 115)\" class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) \r\n    <span class=\"k\">interface</span> <span onmouseout=\"hideTip(event, 'fs46', 116)\" onmouseover=\"showTip(event, 'fs46', 116)\" class=\"t\">IComparable</span> <span class=\"k\">with</span>\r\n        <span class=\"k\">member</span> <span onmouseout=\"hideTip(event, 'fs30', 117)\" onmouseover=\"showTip(event, 'fs30', 117)\" class=\"i\">__</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs49', 118)\" onmouseover=\"showTip(event, 'fs49', 118)\" class=\"f\">CompareTo</span> <span onmouseout=\"hideTip(event, 'fs33', 119)\" onmouseover=\"showTip(event, 'fs33', 119)\" class=\"i\">other</span> <span class=\"o\">=</span>\r\n            <span class=\"k\">match</span> <span onmouseout=\"hideTip(event, 'fs33', 120)\" onmouseover=\"showTip(event, 'fs33', 120)\" class=\"i\">other</span> <span class=\"k\">with</span>\r\n            | <span class=\"o\">:?</span> <span onmouseout=\"hideTip(event, 'fs26', 121)\" onmouseover=\"showTip(event, 'fs26', 121)\" class=\"t\">Note</span> <span class=\"k\">as</span> <span onmouseout=\"hideTip(event, 'fs34', 122)\" onmouseover=\"showTip(event, 'fs34', 122)\" class=\"i\">other</span> <span class=\"k\">-&gt;</span> \r\n                <span onmouseout=\"hideTip(event, 'fs48', 123)\" onmouseover=\"showTip(event, 'fs48', 123)\" class=\"f\">compare</span> (<span onmouseout=\"hideTip(event, 'fs27', 124)\" onmouseover=\"showTip(event, 'fs27', 124)\" class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) (<span onmouseout=\"hideTip(event, 'fs34', 125)\" onmouseover=\"showTip(event, 'fs34', 125)\" class=\"i\">other</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 126)\" onmouseover=\"showTip(event, 'fs35', 126)\" class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>)\r\n            | _ <span class=\"k\">-&gt;</span> <span class=\"n\">1</span> \r\n\r\n    <span class=\"k\">static</span> <span class=\"k\">member</span> (<span class=\"o\">+</span>) (<span onmouseout=\"hideTip(event, 'fs50', 127)\" onmouseover=\"showTip(event, 'fs50', 127)\" class=\"i\">string</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs26', 128)\" onmouseover=\"showTip(event, 'fs26', 128)\" class=\"t\">Note</span>, <span onmouseout=\"hideTip(event, 'fs51', 129)\" onmouseover=\"showTip(event, 'fs51', 129)\" class=\"i\">fret</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs28', 130)\" onmouseover=\"showTip(event, 'fs28', 130)\" class=\"t\">int</span>) <span class=\"o\">=</span>\r\n        <span onmouseout=\"hideTip(event, 'fs26', 131)\" onmouseover=\"showTip(event, 'fs26', 131)\" class=\"t\">Note</span> (<span onmouseout=\"hideTip(event, 'fs50', 132)\" onmouseover=\"showTip(event, 'fs50', 132)\" class=\"i\">string</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 133)\" onmouseover=\"showTip(event, 'fs35', 133)\" class=\"i\">Note</span> <span class=\"o\">+</span> <span onmouseout=\"hideTip(event, 'fs51', 134)\" onmouseover=\"showTip(event, 'fs51', 134)\" class=\"i\">fret</span>)\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs52', 135)\" onmouseover=\"showTip(event, 'fs52', 135)\" class=\"f\">notes</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs53', 136)\" onmouseover=\"showTip(event, 'fs53', 136)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 137)\" onmouseover=\"showTip(event, 'fs54', 137)\" class=\"f\">map</span> <span onmouseout=\"hideTip(event, 'fs26', 138)\" onmouseover=\"showTip(event, 'fs26', 138)\" class=\"t\">Note</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<h2>Ukulele Strings</h2>\r\n\r\n<p>A Ukulele has 4 strings.</p>\r\n\r\n<p>The funy thing is that the 1st one is higher than the second one, where on most string instruments\r\nstrings are in progressive order.</p>\r\n\r\n<p>This is simply due to the limited size of the Ukulele, a low first string would not sound good, so\r\nit is adjusted to the next octave.</p>\r\n\r\n<p>This gives use the following:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs55', 139)\" onmouseover=\"showTip(event, 'fs55', 139)\" class=\"i\">strings</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs52', 140)\" onmouseover=\"showTip(event, 'fs52', 140)\" class=\"f\">notes</span> [<span onmouseout=\"hideTip(event, 'fs7', 141)\" onmouseover=\"showTip(event, 'fs7', 141)\" class=\"f\">G</span> <span class=\"n\">4</span>;<span onmouseout=\"hideTip(event, 'fs2', 142)\" onmouseover=\"showTip(event, 'fs2', 142)\" class=\"f\">C</span> <span class=\"n\">4</span>;<span onmouseout=\"hideTip(event, 'fs5', 143)\" onmouseover=\"showTip(event, 'fs5', 143)\" class=\"f\">E</span> <span class=\"n\">4</span>; <span onmouseout=\"hideTip(event, 'fs8', 144)\" onmouseover=\"showTip(event, 'fs8', 144)\" class=\"f\">A</span> <span class=\"n\">4</span>]\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<h2>Chords</h2>\r\n\r\n<p>Instead of hard-encoding ukulele chords, we will compute them !</p>\r\n\r\n<p>So a bit of theory about chords.</p>\r\n\r\n<p>Chords are defined by their root note and the chord quality (major, minor).</p>\r\n\r\n<p>The chords start on the root note, and the chord quality indicates the distance to other notes\r\nto include in the chord.</p>\r\n\r\n<p>On string instrument, the order and the height of the actual notes are not really important for\r\nthe chord to be ok. So we can use a note at any octave.</p>\r\n\r\n<p>Now, let's define the chord qualities.</p>\r\n\r\n<p>First, Major, uses the root note, 3rd and 5th,\r\nfor instance for C, it will be C, E, G, which gives intervals of 0, 4 and 7 half tones from root.</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs56', 145)\" onmouseover=\"showTip(event, 'fs56', 145)\" class=\"f\">quality</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs52', 146)\" onmouseover=\"showTip(event, 'fs52', 146)\" class=\"f\">notes</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs57', 147)\" onmouseover=\"showTip(event, 'fs57', 147)\" class=\"t\">Set</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs58', 148)\" onmouseover=\"showTip(event, 'fs58', 148)\" class=\"f\">ofList</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs59', 149)\" onmouseover=\"showTip(event, 'fs59', 149)\" class=\"f\">M</span> <span onmouseout=\"hideTip(event, 'fs3', 150)\" onmouseover=\"showTip(event, 'fs3', 150)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs56', 151)\" onmouseover=\"showTip(event, 'fs56', 151)\" class=\"f\">quality</span> [<span onmouseout=\"hideTip(event, 'fs3', 152)\" onmouseover=\"showTip(event, 'fs3', 152)\" class=\"i\">n</span> ; <span onmouseout=\"hideTip(event, 'fs3', 153)\" onmouseover=\"showTip(event, 'fs3', 153)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>; <span onmouseout=\"hideTip(event, 'fs3', 154)\" onmouseover=\"showTip(event, 'fs3', 154)\" class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>] \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>Then, Minor, uses the root note, the lower 3rd and 5th.\r\nFor C it will be C, E flat, G, so intervals of 0, 3 and 7 half tones for root.</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs60', 155)\" onmouseover=\"showTip(event, 'fs60', 155)\" class=\"f\">m</span> <span onmouseout=\"hideTip(event, 'fs3', 156)\" onmouseover=\"showTip(event, 'fs3', 156)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs56', 157)\" onmouseover=\"showTip(event, 'fs56', 157)\" class=\"f\">quality</span> [<span onmouseout=\"hideTip(event, 'fs3', 158)\" onmouseover=\"showTip(event, 'fs3', 158)\" class=\"i\">n</span>; <span onmouseout=\"hideTip(event, 'fs3', 159)\" onmouseover=\"showTip(event, 'fs3', 159)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">3</span>; <span onmouseout=\"hideTip(event, 'fs3', 160)\" onmouseover=\"showTip(event, 'fs3', 160)\" class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>] \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>The 7th adds a 4th note on the Major:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs61', 161)\" onmouseover=\"showTip(event, 'fs61', 161)\" class=\"f\">M7</span> <span onmouseout=\"hideTip(event, 'fs3', 162)\" onmouseover=\"showTip(event, 'fs3', 162)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs56', 163)\" onmouseover=\"showTip(event, 'fs56', 163)\" class=\"f\">quality</span> [<span onmouseout=\"hideTip(event, 'fs3', 164)\" onmouseover=\"showTip(event, 'fs3', 164)\" class=\"i\">n</span>; <span onmouseout=\"hideTip(event, 'fs3', 165)\" onmouseover=\"showTip(event, 'fs3', 165)\" class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>; <span onmouseout=\"hideTip(event, 'fs3', 166)\" onmouseover=\"showTip(event, 'fs3', 166)\" class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>; <span onmouseout=\"hideTip(event, 'fs3', 167)\" onmouseover=\"showTip(event, 'fs3', 167)\" class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">11</span> ]\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<h2>Frets</h2>\r\n\r\n<p>As on a gitare, a ukulele has frets, places where you press the string with your finger\r\nto change the tone of a string.</p>\r\n\r\n<p>0 usually represent when you don't press a string at all, and pinching the string will play\r\nthe string note.</p>\r\n\r\n<p>When pressing fret 1, the note is one half tone higher, fret 2, two half tone (or one tone) higher.</p>\r\n\r\n<p>So pressing the second fret on the C 4 string give a D 4.</p>\r\n\r\n<p>Our first function will try pressing on frets to find frets for notes that belong to the chord</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs62', 168)\" onmouseover=\"showTip(event, 'fs62', 168)\" class=\"f\">findFrets</span> <span onmouseout=\"hideTip(event, 'fs63', 169)\" onmouseover=\"showTip(event, 'fs63', 169)\" class=\"i\">chord</span> (<span onmouseout=\"hideTip(event, 'fs50', 170)\" onmouseover=\"showTip(event, 'fs50', 170)\" class=\"i\">string</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs26', 171)\" onmouseover=\"showTip(event, 'fs26', 171)\" class=\"t\">Note</span>) <span class=\"o\">=</span>\r\n    [<span class=\"n\">0..</span><span class=\"n\">10</span>]\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 172)\" onmouseover=\"showTip(event, 'fs53', 172)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs64', 173)\" onmouseover=\"showTip(event, 'fs64', 173)\" class=\"f\">filter</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs51', 174)\" onmouseover=\"showTip(event, 'fs51', 174)\" class=\"i\">fret</span> <span class=\"k\">-&gt;</span> \r\n        <span onmouseout=\"hideTip(event, 'fs57', 175)\" onmouseover=\"showTip(event, 'fs57', 175)\" class=\"t\">Set</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs65', 176)\" onmouseover=\"showTip(event, 'fs65', 176)\" class=\"f\">contains</span> (<span onmouseout=\"hideTip(event, 'fs50', 177)\" onmouseover=\"showTip(event, 'fs50', 177)\" class=\"i\">string</span> <span class=\"o\">+</span> <span onmouseout=\"hideTip(event, 'fs51', 178)\" onmouseover=\"showTip(event, 'fs51', 178)\" class=\"i\">fret</span>) <span onmouseout=\"hideTip(event, 'fs63', 179)\" onmouseover=\"showTip(event, 'fs63', 179)\" class=\"i\">chord</span>)\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 180)\" onmouseover=\"showTip(event, 'fs53', 180)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 181)\" onmouseover=\"showTip(event, 'fs54', 181)\" class=\"f\">map</span> (<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs51', 182)\" onmouseover=\"showTip(event, 'fs51', 182)\" class=\"i\">fret</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs51', 183)\" onmouseover=\"showTip(event, 'fs51', 183)\" class=\"i\">fret</span>, <span onmouseout=\"hideTip(event, 'fs50', 184)\" onmouseover=\"showTip(event, 'fs50', 184)\" class=\"i\">string</span> <span class=\"o\">+</span> <span onmouseout=\"hideTip(event, 'fs51', 185)\" onmouseover=\"showTip(event, 'fs51', 185)\" class=\"i\">fret</span>)\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>The result is list of pair, (fret, note) that can be used on the strnig</p>\r\n\r\n<p>The second function will explore the combinaison of frets/note and keep only those\r\nthat contains all notes of the chords.</p>\r\n\r\n<p>Ex: for a C Major chord, we need at least a C, a E and a G.</p>\r\n\r\n<p>using frets 0 on string G, 0 on string C, 3 on string E, and 3 on string A, we get G, C, G, C.</p>\r\n\r\n<p>All notes are part of the chord, but there is no E... not enough. 0,0,0,3 is a better solution.</p>\r\n\r\n<p>The function explore all possible solution by checking notes on string that belong to the chord,\r\nand each time remove a note from the chord. At the end, there should be no missing note.</p>\r\n\r\n<p>At each level sub solutions are sorted by a cost. Standard Ukulele chords try to place fingers\r\nas close to the top as possible. So lewer frets are better.</p>\r\n\r\n<p>The cost function for a chords is to sum square of frets.\r\nIf there is any solution, we keep the one with the lowest cost.</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"k\">rec</span> <span onmouseout=\"hideTip(event, 'fs66', 186)\" onmouseover=\"showTip(event, 'fs66', 186)\" class=\"f\">filterChord</span> <span onmouseout=\"hideTip(event, 'fs67', 187)\" onmouseover=\"showTip(event, 'fs67', 187)\" class=\"i\">chord</span> <span onmouseout=\"hideTip(event, 'fs68', 188)\" onmouseover=\"showTip(event, 'fs68', 188)\" class=\"i\">missingNotes</span> <span onmouseout=\"hideTip(event, 'fs69', 189)\" onmouseover=\"showTip(event, 'fs69', 189)\" class=\"i\">solution</span> <span onmouseout=\"hideTip(event, 'fs70', 190)\" onmouseover=\"showTip(event, 'fs70', 190)\" class=\"i\">stringFrets</span>  <span class=\"o\">=</span>\r\n    <span class=\"k\">match</span> <span onmouseout=\"hideTip(event, 'fs70', 191)\" onmouseover=\"showTip(event, 'fs70', 191)\" class=\"i\">stringFrets</span> <span class=\"k\">with</span>\r\n    | [] <span class=\"k\">-&gt;</span> \r\n        <span class=\"k\">if</span> <span onmouseout=\"hideTip(event, 'fs57', 192)\" onmouseover=\"showTip(event, 'fs57', 192)\" class=\"t\">Set</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs71', 193)\" onmouseover=\"showTip(event, 'fs71', 193)\" class=\"f\">isEmpty</span> <span onmouseout=\"hideTip(event, 'fs68', 194)\" onmouseover=\"showTip(event, 'fs68', 194)\" class=\"i\">missingNotes</span> <span class=\"k\">then</span> \r\n            <span onmouseout=\"hideTip(event, 'fs72', 195)\" onmouseover=\"showTip(event, 'fs72', 195)\" class=\"p\">Some</span> (<span onmouseout=\"hideTip(event, 'fs53', 196)\" onmouseover=\"showTip(event, 'fs53', 196)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs73', 197)\" onmouseover=\"showTip(event, 'fs73', 197)\" class=\"f\">rev</span> <span onmouseout=\"hideTip(event, 'fs69', 198)\" onmouseover=\"showTip(event, 'fs69', 198)\" class=\"i\">solution</span>)\r\n        <span class=\"k\">else</span>\r\n            <span onmouseout=\"hideTip(event, 'fs74', 199)\" onmouseover=\"showTip(event, 'fs74', 199)\" class=\"p\">None</span>\r\n    | <span onmouseout=\"hideTip(event, 'fs75', 200)\" onmouseover=\"showTip(event, 'fs75', 200)\" class=\"i\">string</span> <span class=\"o\">::</span> <span onmouseout=\"hideTip(event, 'fs76', 201)\" onmouseover=\"showTip(event, 'fs76', 201)\" class=\"i\">tail</span> <span class=\"k\">-&gt;</span> \r\n        <span onmouseout=\"hideTip(event, 'fs77', 202)\" onmouseover=\"showTip(event, 'fs77', 202)\" class=\"i\">string</span>\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 203)\" onmouseover=\"showTip(event, 'fs53', 203)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs64', 204)\" onmouseover=\"showTip(event, 'fs64', 204)\" class=\"f\">filter</span> (<span class=\"k\">fun</span> (_,<span onmouseout=\"hideTip(event, 'fs78', 205)\" onmouseover=\"showTip(event, 'fs78', 205)\" class=\"i\">note</span>) <span class=\"k\">-&gt;</span> \r\n            <span onmouseout=\"hideTip(event, 'fs67', 206)\" onmouseover=\"showTip(event, 'fs67', 206)\" class=\"i\">chord</span> <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs57', 207)\" onmouseover=\"showTip(event, 'fs57', 207)\" class=\"t\">Set</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs65', 208)\" onmouseover=\"showTip(event, 'fs65', 208)\" class=\"f\">contains</span> <span onmouseout=\"hideTip(event, 'fs78', 209)\" onmouseover=\"showTip(event, 'fs78', 209)\" class=\"i\">note</span>)\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 210)\" onmouseover=\"showTip(event, 'fs53', 210)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs79', 211)\" onmouseover=\"showTip(event, 'fs79', 211)\" class=\"f\">choose</span> (<span class=\"k\">fun</span> (<span onmouseout=\"hideTip(event, 'fs51', 212)\" onmouseover=\"showTip(event, 'fs51', 212)\" class=\"i\">fret</span>,<span onmouseout=\"hideTip(event, 'fs78', 213)\" onmouseover=\"showTip(event, 'fs78', 213)\" class=\"i\">note</span>) <span class=\"k\">-&gt;</span> \r\n            <span onmouseout=\"hideTip(event, 'fs66', 214)\" onmouseover=\"showTip(event, 'fs66', 214)\" class=\"f\">filterChord</span> <span onmouseout=\"hideTip(event, 'fs67', 215)\" onmouseover=\"showTip(event, 'fs67', 215)\" class=\"i\">chord</span> (<span onmouseout=\"hideTip(event, 'fs57', 216)\" onmouseover=\"showTip(event, 'fs57', 216)\" class=\"t\">Set</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs80', 217)\" onmouseover=\"showTip(event, 'fs80', 217)\" class=\"f\">remove</span> <span onmouseout=\"hideTip(event, 'fs78', 218)\" onmouseover=\"showTip(event, 'fs78', 218)\" class=\"i\">note</span> <span onmouseout=\"hideTip(event, 'fs68', 219)\" onmouseover=\"showTip(event, 'fs68', 219)\" class=\"i\">missingNotes</span>) ((<span onmouseout=\"hideTip(event, 'fs51', 220)\" onmouseover=\"showTip(event, 'fs51', 220)\" class=\"i\">fret</span>,<span onmouseout=\"hideTip(event, 'fs78', 221)\" onmouseover=\"showTip(event, 'fs78', 221)\" class=\"i\">note</span>) <span class=\"o\">::</span> <span onmouseout=\"hideTip(event, 'fs69', 222)\" onmouseover=\"showTip(event, 'fs69', 222)\" class=\"i\">solution</span>) <span onmouseout=\"hideTip(event, 'fs76', 223)\" onmouseover=\"showTip(event, 'fs76', 223)\" class=\"i\">tail</span>)\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 224)\" onmouseover=\"showTip(event, 'fs53', 224)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs81', 225)\" onmouseover=\"showTip(event, 'fs81', 225)\" class=\"f\">sortBy</span>(<span class=\"k\">fun</span> <span onmouseout=\"hideTip(event, 'fs82', 226)\" onmouseover=\"showTip(event, 'fs82', 226)\" class=\"i\">s</span> <span class=\"k\">-&gt;</span> \r\n            <span onmouseout=\"hideTip(event, 'fs53', 227)\" onmouseover=\"showTip(event, 'fs53', 227)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs83', 228)\" onmouseover=\"showTip(event, 'fs83', 228)\" class=\"f\">sumBy</span> (<span class=\"k\">fun</span> (<span onmouseout=\"hideTip(event, 'fs51', 229)\" onmouseover=\"showTip(event, 'fs51', 229)\" class=\"i\">fret</span>,_) <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs51', 230)\" onmouseover=\"showTip(event, 'fs51', 230)\" class=\"i\">fret</span><span class=\"o\">*</span><span onmouseout=\"hideTip(event, 'fs51', 231)\" onmouseover=\"showTip(event, 'fs51', 231)\" class=\"i\">fret</span>) <span onmouseout=\"hideTip(event, 'fs82', 232)\" onmouseover=\"showTip(event, 'fs82', 232)\" class=\"i\">s</span>)\r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 233)\" onmouseover=\"showTip(event, 'fs53', 233)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs84', 234)\" onmouseover=\"showTip(event, 'fs84', 234)\" class=\"f\">tryHead</span>\r\n       \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>making a cord is now simple.</p>\r\n\r\n<p>Compute the note in the chord using quality and root.</p>\r\n\r\n<p>For each string, map possible frets the belong to the chord, then filter it.</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n<span class=\"l\">7: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs85', 235)\" onmouseover=\"showTip(event, 'fs85', 235)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs86', 236)\" onmouseover=\"showTip(event, 'fs86', 236)\" class=\"f\">root</span> <span onmouseout=\"hideTip(event, 'fs87', 237)\" onmouseover=\"showTip(event, 'fs87', 237)\" class=\"f\">quality</span> <span class=\"o\">=</span>    \r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs63', 238)\" onmouseover=\"showTip(event, 'fs63', 238)\" class=\"i\">chord</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs87', 239)\" onmouseover=\"showTip(event, 'fs87', 239)\" class=\"f\">quality</span> (<span onmouseout=\"hideTip(event, 'fs86', 240)\" onmouseover=\"showTip(event, 'fs86', 240)\" class=\"f\">root</span> <span class=\"n\">4</span>)\r\n    <span onmouseout=\"hideTip(event, 'fs55', 241)\" onmouseover=\"showTip(event, 'fs55', 241)\" class=\"i\">strings</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 242)\" onmouseover=\"showTip(event, 'fs53', 242)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 243)\" onmouseover=\"showTip(event, 'fs54', 243)\" class=\"f\">map</span> (<span onmouseout=\"hideTip(event, 'fs62', 244)\" onmouseover=\"showTip(event, 'fs62', 244)\" class=\"f\">findFrets</span> <span onmouseout=\"hideTip(event, 'fs63', 245)\" onmouseover=\"showTip(event, 'fs63', 245)\" class=\"i\">chord</span>)\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs66', 246)\" onmouseover=\"showTip(event, 'fs66', 246)\" class=\"f\">filterChord</span> <span onmouseout=\"hideTip(event, 'fs63', 247)\" onmouseover=\"showTip(event, 'fs63', 247)\" class=\"i\">chord</span> <span onmouseout=\"hideTip(event, 'fs63', 248)\" onmouseover=\"showTip(event, 'fs63', 248)\" class=\"i\">chord</span> []\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs88', 249)\" onmouseover=\"showTip(event, 'fs88', 249)\" class=\"t\">Option</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs89', 250)\" onmouseover=\"showTip(event, 'fs89', 250)\" class=\"f\">get</span>\r\n    \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>We can now try with classic chords:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs90', 251)\" onmouseover=\"showTip(event, 'fs90', 251)\" class=\"i\">CM</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs85', 252)\" onmouseover=\"showTip(event, 'fs85', 252)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs2', 253)\" onmouseover=\"showTip(event, 'fs2', 253)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs59', 254)\" onmouseover=\"showTip(event, 'fs59', 254)\" class=\"f\">M</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>and the result is:</p>\r\n\r\n<table class=\"pre\"><tr><td><pre><code>[(0, G 4); (0, C 4); (0, E 4); (3, C 5)]</code></pre></td></tr></table>\r\n\r\n<p>Now C minor:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs91', 255)\" onmouseover=\"showTip(event, 'fs91', 255)\" class=\"i\">Cm</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs85', 256)\" onmouseover=\"showTip(event, 'fs85', 256)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs2', 257)\" onmouseover=\"showTip(event, 'fs2', 257)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs60', 258)\" onmouseover=\"showTip(event, 'fs60', 258)\" class=\"f\">m</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>which is exactly what you can find on a tab sheet:</p>\r\n\r\n<table class=\"pre\"><tr><td><pre><code>[(0, G 4); (3, D# 4); (3, G 4); (3, C 5)]</code></pre></td></tr></table>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n<span class=\"l\">7: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs85', 259)\" onmouseover=\"showTip(event, 'fs85', 259)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs4', 260)\" onmouseover=\"showTip(event, 'fs4', 260)\" class=\"f\">D</span> <span onmouseout=\"hideTip(event, 'fs60', 261)\" onmouseover=\"showTip(event, 'fs60', 261)\" class=\"f\">m</span>\r\n    \r\n<span onmouseout=\"hideTip(event, 'fs85', 262)\" onmouseover=\"showTip(event, 'fs85', 262)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs8', 263)\" onmouseover=\"showTip(event, 'fs8', 263)\" class=\"f\">A</span> <span onmouseout=\"hideTip(event, 'fs59', 264)\" onmouseover=\"showTip(event, 'fs59', 264)\" class=\"f\">M</span>\r\n<span onmouseout=\"hideTip(event, 'fs85', 265)\" onmouseover=\"showTip(event, 'fs85', 265)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs8', 266)\" onmouseover=\"showTip(event, 'fs8', 266)\" class=\"f\">A</span> <span onmouseout=\"hideTip(event, 'fs60', 267)\" onmouseover=\"showTip(event, 'fs60', 267)\" class=\"f\">m</span>\r\n\r\n<span onmouseout=\"hideTip(event, 'fs85', 268)\" onmouseover=\"showTip(event, 'fs85', 268)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs7', 269)\" onmouseover=\"showTip(event, 'fs7', 269)\" class=\"f\">G</span> <span onmouseout=\"hideTip(event, 'fs60', 270)\" onmouseover=\"showTip(event, 'fs60', 270)\" class=\"f\">m</span>\r\n<span onmouseout=\"hideTip(event, 'fs85', 271)\" onmouseover=\"showTip(event, 'fs85', 271)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs5', 272)\" onmouseover=\"showTip(event, 'fs5', 272)\" class=\"f\">E</span> <span onmouseout=\"hideTip(event, 'fs59', 273)\" onmouseover=\"showTip(event, 'fs59', 273)\" class=\"f\">M</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<h2>Printing chords</h2>\r\n\r\n<p>To print chords, we will simply use pretty unicode chars, and place a small 'o'\r\non the fret where we should place fingers:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs92', 274)\" onmouseover=\"showTip(event, 'fs92', 274)\" class=\"f\">print</span> <span onmouseout=\"hideTip(event, 'fs93', 275)\" onmouseover=\"showTip(event, 'fs93', 275)\" class=\"i\">chord</span>  <span class=\"o\">=</span>\r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs94', 276)\" onmouseover=\"showTip(event, 'fs94', 276)\" class=\"f\">fret</span> <span onmouseout=\"hideTip(event, 'fs95', 277)\" onmouseover=\"showTip(event, 'fs95', 277)\" class=\"i\">n</span> <span onmouseout=\"hideTip(event, 'fs96', 278)\" onmouseover=\"showTip(event, 'fs96', 278)\" class=\"i\">frt</span> <span class=\"o\">=</span> \r\n        <span class=\"k\">if</span> <span onmouseout=\"hideTip(event, 'fs95', 279)\" onmouseover=\"showTip(event, 'fs95', 279)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs96', 280)\" onmouseover=\"showTip(event, 'fs96', 280)\" class=\"i\">frt</span> <span class=\"k\">then</span> \r\n            <span class=\"s\">&quot;o&quot;</span> \r\n        <span class=\"k\">else</span> \r\n            <span class=\"s\">&quot;â&quot;</span>\r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs97', 281)\" onmouseover=\"showTip(event, 'fs97', 281)\" class=\"f\">line</span> <span onmouseout=\"hideTip(event, 'fs98', 282)\" onmouseover=\"showTip(event, 'fs98', 282)\" class=\"i\">chord</span> <span onmouseout=\"hideTip(event, 'fs95', 283)\" onmouseover=\"showTip(event, 'fs95', 283)\" class=\"i\">n</span>  <span class=\"o\">=</span>\r\n            <span onmouseout=\"hideTip(event, 'fs98', 284)\" onmouseover=\"showTip(event, 'fs98', 284)\" class=\"i\">chord</span> \r\n            <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 285)\" onmouseover=\"showTip(event, 'fs53', 285)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 286)\" onmouseover=\"showTip(event, 'fs54', 286)\" class=\"f\">map</span> (<span onmouseout=\"hideTip(event, 'fs99', 287)\" onmouseover=\"showTip(event, 'fs99', 287)\" class=\"f\">fst</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span onmouseout=\"hideTip(event, 'fs94', 288)\" onmouseover=\"showTip(event, 'fs94', 288)\" class=\"f\">fret</span> <span onmouseout=\"hideTip(event, 'fs95', 289)\" onmouseover=\"showTip(event, 'fs95', 289)\" class=\"i\">n</span>)\r\n            <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs100', 290)\" onmouseover=\"showTip(event, 'fs100', 290)\" class=\"t\">String</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs101', 291)\" onmouseover=\"showTip(event, 'fs101', 291)\" class=\"f\">concat</span> <span class=\"s\">&quot;&quot;</span>       \r\n    <span onmouseout=\"hideTip(event, 'fs102', 292)\" onmouseover=\"showTip(event, 'fs102', 292)\" class=\"f\">printfn</span> <span class=\"s\">&quot;â¬â¬â¬â¬&quot;</span>\r\n    [<span class=\"n\">1..</span><span class=\"n\">4</span>] \r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 293)\" onmouseover=\"showTip(event, 'fs53', 293)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 294)\" onmouseover=\"showTip(event, 'fs54', 294)\" class=\"f\">map</span> (<span onmouseout=\"hideTip(event, 'fs97', 295)\" onmouseover=\"showTip(event, 'fs97', 295)\" class=\"f\">line</span> <span onmouseout=\"hideTip(event, 'fs93', 296)\" onmouseover=\"showTip(event, 'fs93', 296)\" class=\"i\">chord</span>)\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs100', 297)\" onmouseover=\"showTip(event, 'fs100', 297)\" class=\"t\">String</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs101', 298)\" onmouseover=\"showTip(event, 'fs101', 298)\" class=\"f\">concat</span> <span class=\"s\">&quot;</span><span class=\"e\">\n</span><span class=\"s\">â¼â¼â¼â¼</span><span class=\"e\">\n</span><span class=\"s\">&quot;</span> \r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs102', 299)\" onmouseover=\"showTip(event, 'fs102', 299)\" class=\"f\">printfn</span> <span class=\"s\">&quot;</span><span class=\"pf\">%s</span><span class=\"s\">&quot;</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>Let's try it</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs85', 300)\" onmouseover=\"showTip(event, 'fs85', 300)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs2', 301)\" onmouseover=\"showTip(event, 'fs2', 301)\" class=\"f\">C</span> <span onmouseout=\"hideTip(event, 'fs59', 302)\" onmouseover=\"showTip(event, 'fs59', 302)\" class=\"f\">M</span> <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs92', 303)\" onmouseover=\"showTip(event, 'fs92', 303)\" class=\"f\">print</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>It prints</p>\r\n\r\n<table class=\"pre\"><tr><td><pre><code>â¬â¬â¬â¬\r\nââââ\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¼â¼â¼â¼\r\nâââo\r\nâ¼â¼â¼â¼\r\nââââ</code></pre></td></tr></table>\r\n\r\n<p>Another one</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs85', 304)\" onmouseover=\"showTip(event, 'fs85', 304)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs7', 305)\" onmouseover=\"showTip(event, 'fs7', 305)\" class=\"f\">G</span> <span onmouseout=\"hideTip(event, 'fs59', 306)\" onmouseover=\"showTip(event, 'fs59', 306)\" class=\"f\">M</span> <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs92', 307)\" onmouseover=\"showTip(event, 'fs92', 307)\" class=\"f\">print</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>and we get</p>\r\n\r\n<table class=\"pre\"><tr><td><pre><code>â¬â¬â¬â¬\r\nââââ\r\nâ¼â¼â¼â¼\r\nâoâo\r\nâ¼â¼â¼â¼\r\nââoâ\r\nâ¼â¼â¼â¼\r\nââââ</code></pre></td></tr></table>\r\n\r\n<h2>Playing chords</h2>\r\n\r\n<p>We can also play chords using NAudio.</p>\r\n\r\n<p>You can find NAudio on nuget.org</p>\r\n\r\n<p>For simplicity I will use the midi synthetizer:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"prep\">#r</span> <span class=\"s\">@&quot;packages\NAudio\lib\net35\NAudio.dll&quot;</span>\r\n\r\n<span class=\"k\">open</span> <span onmouseout=\"hideTip(event, 'fs103', 308)\" onmouseover=\"showTip(event, 'fs103', 308)\" class=\"i\">NAudio</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs104', 309)\" onmouseover=\"showTip(event, 'fs104', 309)\" class=\"i\">Midi</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs105', 310)\" onmouseover=\"showTip(event, 'fs105', 310)\" class=\"i\">device</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span onmouseout=\"hideTip(event, 'fs106', 311)\" onmouseover=\"showTip(event, 'fs106', 311)\" class=\"t\">MidiOut</span>(<span class=\"n\">0</span>)\r\n<span onmouseout=\"hideTip(event, 'fs106', 312)\" onmouseover=\"showTip(event, 'fs106', 312)\" class=\"t\">MidiOut</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs107', 313)\" onmouseover=\"showTip(event, 'fs107', 313)\" class=\"f\">DeviceInfo</span> <span class=\"n\">0</span>\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs108', 314)\" onmouseover=\"showTip(event, 'fs108', 314)\" class=\"f\">midi</span> (<span onmouseout=\"hideTip(event, 'fs109', 315)\" onmouseover=\"showTip(event, 'fs109', 315)\" class=\"i\">m</span><span class=\"o\">:</span><span onmouseout=\"hideTip(event, 'fs110', 316)\" onmouseover=\"showTip(event, 'fs110', 316)\" class=\"t\">MidiMessage</span>) <span class=\"o\">=</span>  <span onmouseout=\"hideTip(event, 'fs105', 317)\" onmouseover=\"showTip(event, 'fs105', 317)\" class=\"i\">device</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs111', 318)\" onmouseover=\"showTip(event, 'fs111', 318)\" class=\"f\">Send</span> <span onmouseout=\"hideTip(event, 'fs109', 319)\" onmouseover=\"showTip(event, 'fs109', 319)\" class=\"i\">m</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs112', 320)\" onmouseover=\"showTip(event, 'fs112', 320)\" class=\"i\">RawData</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs113', 321)\" onmouseover=\"showTip(event, 'fs113', 321)\" class=\"f\">startNote</span> <span onmouseout=\"hideTip(event, 'fs27', 322)\" onmouseover=\"showTip(event, 'fs27', 322)\" class=\"i\">note</span> <span onmouseout=\"hideTip(event, 'fs114', 323)\" onmouseover=\"showTip(event, 'fs114', 323)\" class=\"i\">volume</span> <span class=\"o\">=</span> \r\n    <span onmouseout=\"hideTip(event, 'fs110', 324)\" onmouseover=\"showTip(event, 'fs110', 324)\" class=\"t\">MidiMessage</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs115', 325)\" onmouseover=\"showTip(event, 'fs115', 325)\" class=\"f\">StartNote</span>(<span onmouseout=\"hideTip(event, 'fs27', 326)\" onmouseover=\"showTip(event, 'fs27', 326)\" class=\"i\">note</span>, <span onmouseout=\"hideTip(event, 'fs114', 327)\" onmouseover=\"showTip(event, 'fs114', 327)\" class=\"i\">volume</span>, <span class=\"n\">2</span>) <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs108', 328)\" onmouseover=\"showTip(event, 'fs108', 328)\" class=\"f\">midi</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs116', 329)\" onmouseover=\"showTip(event, 'fs116', 329)\" class=\"f\">stopNote</span> <span onmouseout=\"hideTip(event, 'fs27', 330)\" onmouseover=\"showTip(event, 'fs27', 330)\" class=\"i\">note</span> <span onmouseout=\"hideTip(event, 'fs114', 331)\" onmouseover=\"showTip(event, 'fs114', 331)\" class=\"i\">volume</span> <span class=\"o\">=</span> \r\n    <span onmouseout=\"hideTip(event, 'fs110', 332)\" onmouseover=\"showTip(event, 'fs110', 332)\" class=\"t\">MidiMessage</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs117', 333)\" onmouseover=\"showTip(event, 'fs117', 333)\" class=\"f\">StopNote</span>(<span onmouseout=\"hideTip(event, 'fs27', 334)\" onmouseover=\"showTip(event, 'fs27', 334)\" class=\"i\">note</span>, <span onmouseout=\"hideTip(event, 'fs114', 335)\" onmouseover=\"showTip(event, 'fs114', 335)\" class=\"i\">volume</span>, <span class=\"n\">2</span>) <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs108', 336)\" onmouseover=\"showTip(event, 'fs108', 336)\" class=\"f\">midi</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs118', 337)\" onmouseover=\"showTip(event, 'fs118', 337)\" class=\"f\">sleep</span> <span onmouseout=\"hideTip(event, 'fs3', 338)\" onmouseover=\"showTip(event, 'fs3', 338)\" class=\"i\">n</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs1', 339)\" onmouseover=\"showTip(event, 'fs1', 339)\" class=\"i\">System</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs119', 340)\" onmouseover=\"showTip(event, 'fs119', 340)\" class=\"i\">Threading</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs120', 341)\" onmouseover=\"showTip(event, 'fs120', 341)\" class=\"t\">Thread</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs121', 342)\" onmouseover=\"showTip(event, 'fs121', 342)\" class=\"f\">Sleep</span>(<span onmouseout=\"hideTip(event, 'fs3', 343)\" onmouseover=\"showTip(event, 'fs3', 343)\" class=\"i\">n</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs28', 344)\" onmouseover=\"showTip(event, 'fs28', 344)\" class=\"t\">int</span>)\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>Now we can define a function that will play a chord.</p>\r\n\r\n<p>The tempo is used as a multiplicator for a the chord length.</p>\r\n\r\n<p>Longer tempo means slower.</p>\r\n\r\n<p>For better result we introduce an arpegio, a small delay between each note.\r\nDon't forget to remove this time from the waiting length...</p>\r\n\r\n<p>The direction indicate if the cords are strumed Up, or Down.\r\nIn the Up case we reverse the chord.</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n<span class=\"l\">18: </span>\r\n<span class=\"l\">19: </span>\r\n<span class=\"l\">20: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">type</span> <span onmouseout=\"hideTip(event, 'fs122', 345)\" onmouseover=\"showTip(event, 'fs122', 345)\" class=\"t\">Direction</span> <span class=\"o\">=</span> <span onmouseout=\"hideTip(event, 'fs123', 346)\" onmouseover=\"showTip(event, 'fs123', 346)\" class=\"p\">Dn</span> <span class=\"k\">of</span> <span onmouseout=\"hideTip(event, 'fs28', 347)\" onmouseover=\"showTip(event, 'fs28', 347)\" class=\"t\">int</span> | <span onmouseout=\"hideTip(event, 'fs124', 348)\" onmouseover=\"showTip(event, 'fs124', 348)\" class=\"p\">Up</span> <span class=\"k\">of</span> <span onmouseout=\"hideTip(event, 'fs28', 349)\" onmouseover=\"showTip(event, 'fs28', 349)\" class=\"t\">int</span>\r\n\r\n<span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs125', 350)\" onmouseover=\"showTip(event, 'fs125', 350)\" class=\"f\">play</span> <span onmouseout=\"hideTip(event, 'fs126', 351)\" onmouseover=\"showTip(event, 'fs126', 351)\" class=\"i\">tempo</span> <span onmouseout=\"hideTip(event, 'fs127', 352)\" onmouseover=\"showTip(event, 'fs127', 352)\" class=\"i\">arpegio</span> (<span onmouseout=\"hideTip(event, 'fs128', 353)\" onmouseover=\"showTip(event, 'fs128', 353)\" class=\"i\">chord</span>, <span onmouseout=\"hideTip(event, 'fs129', 354)\" onmouseover=\"showTip(event, 'fs129', 354)\" class=\"i\">strum</span>)  <span class=\"o\">=</span>\r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs130', 355)\" onmouseover=\"showTip(event, 'fs130', 355)\" class=\"i\">strings</span>, <span onmouseout=\"hideTip(event, 'fs131', 356)\" onmouseover=\"showTip(event, 'fs131', 356)\" class=\"i\">length</span> <span class=\"o\">=</span> \r\n        <span class=\"k\">match</span> <span onmouseout=\"hideTip(event, 'fs129', 357)\" onmouseover=\"showTip(event, 'fs129', 357)\" class=\"i\">strum</span> <span class=\"k\">with</span> \r\n        | <span onmouseout=\"hideTip(event, 'fs123', 358)\" onmouseover=\"showTip(event, 'fs123', 358)\" class=\"p\">Dn</span> <span onmouseout=\"hideTip(event, 'fs131', 359)\" onmouseover=\"showTip(event, 'fs131', 359)\" class=\"i\">length</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs128', 360)\" onmouseover=\"showTip(event, 'fs128', 360)\" class=\"i\">chord</span>, <span onmouseout=\"hideTip(event, 'fs131', 361)\" onmouseover=\"showTip(event, 'fs131', 361)\" class=\"i\">length</span>\r\n        | <span onmouseout=\"hideTip(event, 'fs124', 362)\" onmouseover=\"showTip(event, 'fs124', 362)\" class=\"p\">Up</span> <span onmouseout=\"hideTip(event, 'fs131', 363)\" onmouseover=\"showTip(event, 'fs131', 363)\" class=\"i\">length</span> <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 364)\" onmouseover=\"showTip(event, 'fs53', 364)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs73', 365)\" onmouseover=\"showTip(event, 'fs73', 365)\" class=\"f\">rev</span> <span onmouseout=\"hideTip(event, 'fs128', 366)\" onmouseover=\"showTip(event, 'fs128', 366)\" class=\"i\">chord</span>, <span onmouseout=\"hideTip(event, 'fs131', 367)\" onmouseover=\"showTip(event, 'fs131', 367)\" class=\"i\">length</span> \r\n\r\n    <span onmouseout=\"hideTip(event, 'fs130', 368)\" onmouseover=\"showTip(event, 'fs130', 368)\" class=\"i\">strings</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 369)\" onmouseover=\"showTip(event, 'fs53', 369)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs132', 370)\" onmouseover=\"showTip(event, 'fs132', 370)\" class=\"f\">iter</span> (<span class=\"k\">fun</span> (_,(<span onmouseout=\"hideTip(event, 'fs133', 371)\" onmouseover=\"showTip(event, 'fs133', 371)\" class=\"i\">n</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs26', 372)\" onmouseover=\"showTip(event, 'fs26', 372)\" class=\"t\">Note</span>)) <span class=\"k\">-&gt;</span> \r\n        <span onmouseout=\"hideTip(event, 'fs113', 373)\" onmouseover=\"showTip(event, 'fs113', 373)\" class=\"f\">startNote</span> <span onmouseout=\"hideTip(event, 'fs133', 374)\" onmouseover=\"showTip(event, 'fs133', 374)\" class=\"i\">n</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 375)\" onmouseover=\"showTip(event, 'fs35', 375)\" class=\"i\">Note</span> <span class=\"n\">100</span> ; <span onmouseout=\"hideTip(event, 'fs118', 376)\" onmouseover=\"showTip(event, 'fs118', 376)\" class=\"f\">sleep</span> <span onmouseout=\"hideTip(event, 'fs127', 377)\" onmouseover=\"showTip(event, 'fs127', 377)\" class=\"i\">arpegio</span> )\r\n\r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs134', 378)\" onmouseover=\"showTip(event, 'fs134', 378)\" class=\"i\">arpegioLength</span> <span class=\"o\">=</span> \r\n        <span onmouseout=\"hideTip(event, 'fs53', 379)\" onmouseover=\"showTip(event, 'fs53', 379)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs135', 380)\" onmouseover=\"showTip(event, 'fs135', 380)\" class=\"f\">length</span> <span onmouseout=\"hideTip(event, 'fs128', 381)\" onmouseover=\"showTip(event, 'fs128', 381)\" class=\"i\">chord</span> <span class=\"o\">*</span> <span onmouseout=\"hideTip(event, 'fs127', 382)\" onmouseover=\"showTip(event, 'fs127', 382)\" class=\"i\">arpegio</span>\r\n\r\n    <span onmouseout=\"hideTip(event, 'fs118', 383)\" onmouseover=\"showTip(event, 'fs118', 383)\" class=\"f\">sleep</span> (<span onmouseout=\"hideTip(event, 'fs131', 384)\" onmouseover=\"showTip(event, 'fs131', 384)\" class=\"i\">length</span> <span class=\"o\">*</span> <span onmouseout=\"hideTip(event, 'fs126', 385)\" onmouseover=\"showTip(event, 'fs126', 385)\" class=\"i\">tempo</span> <span class=\"o\">-</span> <span onmouseout=\"hideTip(event, 'fs134', 386)\" onmouseover=\"showTip(event, 'fs134', 386)\" class=\"i\">arpegioLength</span>)\r\n\r\n    <span onmouseout=\"hideTip(event, 'fs130', 387)\" onmouseover=\"showTip(event, 'fs130', 387)\" class=\"i\">strings</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 388)\" onmouseover=\"showTip(event, 'fs53', 388)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs132', 389)\" onmouseover=\"showTip(event, 'fs132', 389)\" class=\"f\">iter</span> (<span class=\"k\">fun</span> (_,(<span onmouseout=\"hideTip(event, 'fs133', 390)\" onmouseover=\"showTip(event, 'fs133', 390)\" class=\"i\">n</span><span class=\"o\">:</span> <span onmouseout=\"hideTip(event, 'fs26', 391)\" onmouseover=\"showTip(event, 'fs26', 391)\" class=\"t\">Note</span>)) <span class=\"k\">-&gt;</span> \r\n        <span onmouseout=\"hideTip(event, 'fs116', 392)\" onmouseover=\"showTip(event, 'fs116', 392)\" class=\"f\">stopNote</span> <span onmouseout=\"hideTip(event, 'fs133', 393)\" onmouseover=\"showTip(event, 'fs133', 393)\" class=\"i\">n</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs35', 394)\" onmouseover=\"showTip(event, 'fs35', 394)\" class=\"i\">Note</span> <span class=\"n\">100</span> )\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>To strum a chord, we give a list of length, and a chord, and it will apply the cord to each length:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs136', 395)\" onmouseover=\"showTip(event, 'fs136', 395)\" class=\"f\">strum</span> <span onmouseout=\"hideTip(event, 'fs137', 396)\" onmouseover=\"showTip(event, 'fs137', 396)\" class=\"i\">strm</span> <span onmouseout=\"hideTip(event, 'fs138', 397)\" onmouseover=\"showTip(event, 'fs138', 397)\" class=\"i\">chord</span> <span class=\"o\">=</span>\r\n    <span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs139', 398)\" onmouseover=\"showTip(event, 'fs139', 398)\" class=\"i\">repeatedChord</span> <span class=\"o\">=</span> \r\n        <span onmouseout=\"hideTip(event, 'fs137', 399)\" onmouseover=\"showTip(event, 'fs137', 399)\" class=\"i\">strm</span> \r\n        <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 400)\" onmouseover=\"showTip(event, 'fs53', 400)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs54', 401)\" onmouseover=\"showTip(event, 'fs54', 401)\" class=\"f\">map</span> (<span class=\"k\">fun</span> _ <span class=\"k\">-&gt;</span> <span onmouseout=\"hideTip(event, 'fs138', 402)\" onmouseover=\"showTip(event, 'fs138', 402)\" class=\"i\">chord</span>)\r\n    \r\n    <span onmouseout=\"hideTip(event, 'fs53', 403)\" onmouseover=\"showTip(event, 'fs53', 403)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs140', 404)\" onmouseover=\"showTip(event, 'fs140', 404)\" class=\"f\">zip</span> <span onmouseout=\"hideTip(event, 'fs139', 405)\" onmouseover=\"showTip(event, 'fs139', 405)\" class=\"i\">repeatedChord</span> <span onmouseout=\"hideTip(event, 'fs137', 406)\" onmouseover=\"showTip(event, 'fs137', 406)\" class=\"i\">strm</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>Now here is Santa Clause favorite song, Get Lucky by Daft Punk.</p>\r\n\r\n<p>First the chords :</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n<span class=\"l\">7: </span>\r\n<span class=\"l\">8: </span>\r\n<span class=\"l\">9: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs141', 407)\" onmouseover=\"showTip(event, 'fs141', 407)\" class=\"i\">luckyChords</span> <span class=\"o\">=</span> \r\n    [ <span class=\"c\">//Like the legend of the Phoenix,</span>\r\n      <span onmouseout=\"hideTip(event, 'fs85', 408)\" onmouseover=\"showTip(event, 'fs85', 408)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs9', 409)\" onmouseover=\"showTip(event, 'fs9', 409)\" class=\"f\">B</span> <span onmouseout=\"hideTip(event, 'fs60', 410)\" onmouseover=\"showTip(event, 'fs60', 410)\" class=\"f\">m</span>\r\n      <span class=\"c\">// All ends with beginnings.</span>\r\n      <span onmouseout=\"hideTip(event, 'fs85', 411)\" onmouseover=\"showTip(event, 'fs85', 411)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs4', 412)\" onmouseover=\"showTip(event, 'fs4', 412)\" class=\"f\">D</span> <span onmouseout=\"hideTip(event, 'fs59', 413)\" onmouseover=\"showTip(event, 'fs59', 413)\" class=\"f\">M</span>\r\n      <span class=\"c\">// What keeps the planets spinning,</span>\r\n      <span onmouseout=\"hideTip(event, 'fs85', 414)\" onmouseover=\"showTip(event, 'fs85', 414)\" class=\"f\">chord</span> (<span onmouseout=\"hideTip(event, 'fs16', 415)\" onmouseover=\"showTip(event, 'fs16', 415)\" class=\"f\">Fd</span>) <span onmouseout=\"hideTip(event, 'fs60', 416)\" onmouseover=\"showTip(event, 'fs60', 416)\" class=\"f\">m</span>\r\n      <span class=\"c\">// The force from the beginning.</span>\r\n      <span onmouseout=\"hideTip(event, 'fs85', 417)\" onmouseover=\"showTip(event, 'fs85', 417)\" class=\"f\">chord</span> <span onmouseout=\"hideTip(event, 'fs5', 418)\" onmouseover=\"showTip(event, 'fs5', 418)\" class=\"f\">E</span> <span onmouseout=\"hideTip(event, 'fs59', 419)\" onmouseover=\"showTip(event, 'fs59', 419)\" class=\"f\">M</span> ]\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>Then strum, this is the rythm used to play the same chord,\r\nit goes like, Dam, Dam, Dam Dala Dam Dam:</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs142', 420)\" onmouseover=\"showTip(event, 'fs142', 420)\" class=\"i\">luckyStrum</span> <span class=\"o\">=</span> \r\n    [ <span onmouseout=\"hideTip(event, 'fs123', 421)\" onmouseover=\"showTip(event, 'fs123', 421)\" class=\"p\">Dn</span> <span class=\"n\">4</span>; <span onmouseout=\"hideTip(event, 'fs123', 422)\" onmouseover=\"showTip(event, 'fs123', 422)\" class=\"p\">Dn</span> <span class=\"n\">3</span>; <span onmouseout=\"hideTip(event, 'fs123', 423)\" onmouseover=\"showTip(event, 'fs123', 423)\" class=\"p\">Dn</span> <span class=\"n\">2</span>; <span onmouseout=\"hideTip(event, 'fs123', 424)\" onmouseover=\"showTip(event, 'fs123', 424)\" class=\"p\">Dn</span> <span class=\"n\">1</span>; <span onmouseout=\"hideTip(event, 'fs124', 425)\" onmouseover=\"showTip(event, 'fs124', 425)\" class=\"p\">Up</span> <span class=\"n\">2</span>; <span onmouseout=\"hideTip(event, 'fs123', 426)\" onmouseover=\"showTip(event, 'fs123', 426)\" class=\"p\">Dn</span> <span class=\"n\">2</span>; <span onmouseout=\"hideTip(event, 'fs124', 427)\" onmouseover=\"showTip(event, 'fs124', 427)\" class=\"p\">Up</span> <span class=\"n\">2</span>]\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>and the full song :</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"k\">let</span> <span onmouseout=\"hideTip(event, 'fs143', 428)\" onmouseover=\"showTip(event, 'fs143', 428)\" class=\"i\">getLucky</span> <span class=\"o\">=</span>\r\n    <span onmouseout=\"hideTip(event, 'fs141', 429)\" onmouseover=\"showTip(event, 'fs141', 429)\" class=\"i\">luckyChords</span>\r\n    <span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 430)\" onmouseover=\"showTip(event, 'fs53', 430)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs144', 431)\" onmouseover=\"showTip(event, 'fs144', 431)\" class=\"f\">collect</span> (<span onmouseout=\"hideTip(event, 'fs136', 432)\" onmouseover=\"showTip(event, 'fs136', 432)\" class=\"f\">strum</span> <span onmouseout=\"hideTip(event, 'fs142', 433)\" onmouseover=\"showTip(event, 'fs142', 433)\" class=\"i\">luckyStrum</span>)\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>And now, let's play it :</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs143', 434)\" onmouseover=\"showTip(event, 'fs143', 434)\" class=\"i\">getLucky</span>\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 435)\" onmouseover=\"showTip(event, 'fs53', 435)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs145', 436)\" onmouseover=\"showTip(event, 'fs145', 436)\" class=\"f\">replicate</span> <span class=\"n\">1</span>\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 437)\" onmouseover=\"showTip(event, 'fs53', 437)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs146', 438)\" onmouseover=\"showTip(event, 'fs146', 438)\" class=\"f\">concat</span>\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 439)\" onmouseover=\"showTip(event, 'fs53', 439)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs132', 440)\" onmouseover=\"showTip(event, 'fs132', 440)\" class=\"f\">iter</span> (<span onmouseout=\"hideTip(event, 'fs125', 441)\" onmouseover=\"showTip(event, 'fs125', 441)\" class=\"f\">play</span> <span class=\"n\">130</span> <span class=\"n\">30</span>)\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<p>And the tab notations for the song !</p>\r\n\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs141', 442)\" onmouseover=\"showTip(event, 'fs141', 442)\" class=\"i\">luckyChords</span>\r\n<span class=\"o\">|&gt;</span> <span onmouseout=\"hideTip(event, 'fs53', 443)\" onmouseover=\"showTip(event, 'fs53', 443)\" class=\"t\">List</span><span class=\"o\">.</span><span onmouseout=\"hideTip(event, 'fs132', 444)\" onmouseover=\"showTip(event, 'fs132', 444)\" class=\"f\">iter</span> <span onmouseout=\"hideTip(event, 'fs92', 445)\" onmouseover=\"showTip(event, 'fs92', 445)\" class=\"f\">print</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n\r\n<table class=\"pre\"><tr><td><pre><code>â¬â¬â¬â¬\r\nââââ\r\nâ¼â¼â¼â¼\r\nâooo\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¼â¼â¼â¼\r\noâââ\r\nâ¬â¬â¬â¬\r\nââââ\r\nâ¼â¼â¼â¼\r\noooâ\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¬â¬â¬â¬\r\nâoââ\r\nâ¼â¼â¼â¼\r\noâoâ\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¬â¬â¬â¬\r\noâââ\r\nâ¼â¼â¼â¼\r\nâââo\r\nâ¼â¼â¼â¼\r\nââââ\r\nâ¼â¼â¼â¼\r\nâoââ</code></pre></td></tr></table>\r\n\r\n<h1>Conclusion</h1>\r\n\r\n<p>I hope this small thing was entertaining and that it'll get you into ukulele !</p>\r\n\r\n<p>For excercise you can:</p>\r\n\r\n<ul>\r\n<li><a href=\"https://en.wikipedia.org/wiki/Chord_(music)\">implements more chords</a></li>\r\n<li>Better printing</li>\r\n<li>add more liveliness and groove by adding some jitter to the strum...</li>\r\n<li>add the lyrics for Karaoke !</li>\r\n<li>try with other songs !</li>\r\n<li>try the same for a <a href=\"https://en.wikipedia.org/wiki/Guitar\">6 string gitar</a> !</li>\r\n</ul>\r\n\r\n<p>Now it's your turn to rock !</p>\r\n\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </body>\r\n</html>","<div style=\"margin-top:30px\" class=\"container row\">\n<div class=\"span1\"></div>\n<div class=\"span10\" id=\"main\">\n<h1>Ukulele</h1>\n<p><em>This post is part of the <a href=\"https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/\">\nF# Advent Calendar in English 2015</a> project.</em> <em>Check out all the\nother great posts there! And special thanks to Sergey Tihon for organizing\nthis.</em></p>\n<p>Hi something fun and not too technical for end the year !</p>\n<p>As everyone knows, the <a href=\"https://www.google.fr/search?q=santa+claus+ukulele&amp;biw=1024&amp;bih=677&amp;tbm=isch&amp;source=lnms&amp;sa=X&amp;ved=0ahUKEwiHw5H8p-HJAhVE0xQKHZTdDuEQ_AUIBigB\">\nfavorite instrument of Santa Claus is Ukulele</a> ! So let's play some music,\nand especialy some Ukulele !</p>\n<p>First thing first, let's create functions for notes. We start with C at\noctave 0, and have a progression by half tones.</p>\n<p>So C is 0, D is 2, E is 4.</p>\n<p>Since there is only a half tone between E and F, F is 5.</p>\n<p>F is 7, A is 9, B is 11, and we reach next octave at 12, which is C 1 :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n<span class=\"l\">7: </span>\n<span class=\"l\">8: </span>\n<span class=\"l\">9: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">open</span> <span class=\"i\">System</span>\n\n<span class=\"k\">let</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"n\">12</span> <span class=\"o\">*</span> <span class=\"i\">n</span>\n<span class=\"k\">let</span> <span class=\"f\">D</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">2</span>\n<span class=\"k\">let</span> <span class=\"f\">E</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>\n<span class=\"k\">let</span> <span class=\"f\">F</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">5</span>\n<span class=\"k\">let</span> <span class=\"f\">G</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">7</span>\n<span class=\"k\">let</span> <span class=\"f\">A</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">9</span>\n<span class=\"k\">let</span> <span class=\"f\">B</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">11</span> \n</code>\n</pre></td>\n</tr>\n</table>\n<p>For sharps and flat, lets define two functions that had and remove a half\ntone</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">sharp</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">1</span>\n<span class=\"k\">let</span> <span class=\"f\">flat</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"i\">n</span> <span class=\"o\">-</span> <span class=\"n\">1</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>We can now create names for each note :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">Cd</span> <span class=\"o\">=</span> <span class=\"f\">C</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">sharp</span>\n<span class=\"k\">let</span> <span class=\"f\">Db</span> <span class=\"o\">=</span> <span class=\"f\">D</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">flat</span>\n<span class=\"k\">let</span> <span class=\"f\">Dd</span> <span class=\"o\">=</span> <span class=\"f\">D</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">sharp</span>\n<span class=\"k\">let</span> <span class=\"f\">Eb</span> <span class=\"o\">=</span> <span class=\"f\">E</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">flat</span>\n<span class=\"k\">let</span> <span class=\"f\">Fd</span> <span class=\"o\">=</span> <span class=\"f\">F</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">sharp</span>\n<span class=\"k\">let</span> <span class=\"f\">Gb</span> <span class=\"o\">=</span> <span class=\"f\">G</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">flat</span>\n<span class=\"k\">let</span> <span class=\"f\">Gd</span> <span class=\"o\">=</span> <span class=\"f\">G</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">sharp</span>\n<span class=\"k\">let</span> <span class=\"f\">Ab</span> <span class=\"o\">=</span> <span class=\"f\">A</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">flat</span>\n<span class=\"k\">let</span> <span class=\"f\">Ad</span> <span class=\"o\">=</span> <span class=\"f\">A</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">sharp</span>\n<span class=\"k\">let</span> <span class=\"f\">Bb</span> <span class=\"o\">=</span> <span class=\"f\">B</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">flat</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>There is no E sharp or F flat because it is F and E respectively, same thing\nfor B and C...</p>\n<p>Will create a structure with a custome comparison/equality that doesn't take\nthe octave into account by using a 12 modulus, this will prove usefull to work\nwith chords:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n<span class=\"l\">18: </span>\n<span class=\"l\">19: </span>\n<span class=\"l\">20: </span>\n<span class=\"l\">21: </span>\n<span class=\"l\">22: </span>\n<span class=\"l\">23: </span>\n<span class=\"l\">24: </span>\n<span class=\"l\">25: </span>\n<span class=\"l\">26: </span>\n<span class=\"l\">27: </span>\n<span class=\"l\">28: </span>\n<span class=\"l\">29: </span>\n<span class=\"l\">30: </span>\n<span class=\"l\">31: </span>\n<span class=\"l\">32: </span>\n<span class=\"l\">33: </span>\n<span class=\"l\">34: </span>\n<span class=\"l\">35: </span>\n<span class=\"l\">36: </span>\n<span class=\"l\">37: </span>\n<span class=\"l\">38: </span>\n<span class=\"l\">39: </span>\n<span class=\"l\">40: </span>\n<span class=\"l\">41: </span>\n<span class=\"l\">42: </span>\n<span class=\"l\">43: </span>\n<span class=\"l\">44: </span>\n<span class=\"l\">45: </span>\n<span class=\"l\">46: </span>\n<span class=\"l\">47: </span>\n<span class=\"l\">48: </span>\n<span class=\"l\">49: </span>\n<span class=\"l\">50: </span>\n<span class=\"l\">51: </span>\n<span class=\"l\">52: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\">[&lt;<span class=\"t\">Struct</span>&gt;]\n[&lt;<span class=\"t\">CustomComparison</span>&gt;]\n[&lt;<span class=\"t\">CustomEquality</span>&gt;]\n[&lt;<span class=\"t\">StructuredFormatDisplay</span>(<span class=\"s\">&quot;{Display}&quot;</span>)&gt;]\n<span class=\"k\">type</span> <span class=\"t\">Note</span>(<span class=\"i\">note</span> <span class=\"o\">:</span> <span class=\"t\">int</span>) <span class=\"o\">=</span>\n    <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">=</span> <span class=\"i\">note</span>\n    \n    <span class=\"k\">override</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"f\">GetHashCode</span>() <span class=\"o\">=</span> <span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> \n\n    <span class=\"k\">override</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"f\">Equals</span> <span class=\"i\">other</span> <span class=\"o\">=</span>\n        <span class=\"k\">match</span> <span class=\"i\">other</span> <span class=\"k\">with</span>\n        | <span class=\"o\">:?</span> <span class=\"t\">Note</span> <span class=\"k\">as</span> <span class=\"i\">other</span> <span class=\"k\">-&gt;</span>\n            <span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> <span class=\"o\">=</span> <span class=\"i\">other</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>\n        | _ <span class=\"k\">-&gt;</span> <span class=\"k\">false</span>\n\n    <span class=\"k\">static</span> <span class=\"k\">member</span> <span class=\"i\">names</span> <span class=\"o\">=</span> \n        [| <span class=\"s\">&quot;C&quot;</span>\n           <span class=\"s\">&quot;C#&quot;</span>\n           <span class=\"s\">&quot;D&quot;</span>\n           <span class=\"s\">&quot;D#&quot;</span>\n           <span class=\"s\">&quot;E&quot;</span>\n           <span class=\"s\">&quot;F&quot;</span>\n           <span class=\"s\">&quot;F#&quot;</span>\n           <span class=\"s\">&quot;G&quot;</span>\n           <span class=\"s\">&quot;G#&quot;</span>\n           <span class=\"s\">&quot;A&quot;</span>\n           <span class=\"s\">&quot;A#&quot;</span>\n           <span class=\"s\">&quot;B&quot;</span> |]\n    <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"i\">Display</span> <span class=\"o\">=</span> \n        <span class=\"k\">let</span> <span class=\"i\">name</span> <span class=\"o\">=</span> <span class=\"t\">Note</span><span class=\"o\">.</span><span class=\"i\">names</span><span class=\"o\">.</span>[<span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>]\n        <span class=\"k\">let</span> <span class=\"i\">octave</span> <span class=\"o\">=</span> <span class=\"i\">note</span> <span class=\"o\">/</span> <span class=\"n\">12</span>\n        <span class=\"f\">sprintf</span> <span class=\"s\">&quot;</span><span class=\"pf\">%s</span><span class=\"s\"> </span><span class=\"pf\">%d</span><span class=\"s\">&quot;</span> <span class=\"i\">name</span> <span class=\"i\">octave</span>\n\n    <span class=\"k\">override</span> <span class=\"i\">this</span><span class=\"o\">.</span><span class=\"f\">ToString</span>() <span class=\"o\">=</span> <span class=\"i\">this</span><span class=\"o\">.</span><span class=\"i\">Display</span>\n        \n    <span class=\"k\">interface</span> <span class=\"t\">IEquatable</span><span class=\"o\">&lt;</span><span class=\"t\">Note</span><span class=\"o\">&gt;</span> <span class=\"k\">with</span>\n        <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"f\">Equals</span> <span class=\"i\">other</span> <span class=\"o\">=</span>\n            <span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span> <span class=\"o\">=</span> <span class=\"i\">other</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>\n    <span class=\"k\">interface</span> <span class=\"t\">IComparable</span><span class=\"o\">&lt;</span><span class=\"t\">Note</span><span class=\"o\">&gt;</span> <span class=\"k\">with</span>\n        <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"f\">CompareTo</span> <span class=\"i\">other</span> <span class=\"o\">=</span>\n            <span class=\"f\">compare</span> (<span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) (<span class=\"i\">other</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) \n    <span class=\"k\">interface</span> <span class=\"t\">IComparable</span> <span class=\"k\">with</span>\n        <span class=\"k\">member</span> <span class=\"i\">__</span><span class=\"o\">.</span><span class=\"f\">CompareTo</span> <span class=\"i\">other</span> <span class=\"o\">=</span>\n            <span class=\"k\">match</span> <span class=\"i\">other</span> <span class=\"k\">with</span>\n            | <span class=\"o\">:?</span> <span class=\"t\">Note</span> <span class=\"k\">as</span> <span class=\"i\">other</span> <span class=\"k\">-&gt;</span> \n                <span class=\"f\">compare</span> (<span class=\"i\">note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>) (<span class=\"i\">other</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">%</span> <span class=\"n\">12</span>)\n            | _ <span class=\"k\">-&gt;</span> <span class=\"n\">1</span> \n\n    <span class=\"k\">static</span> <span class=\"k\">member</span> (<span class=\"o\">+</span>) (<span class=\"i\">string</span><span class=\"o\">:</span> <span class=\"t\">Note</span>, <span class=\"i\">fret</span><span class=\"o\">:</span> <span class=\"t\">int</span>) <span class=\"o\">=</span>\n        <span class=\"t\">Note</span> (<span class=\"i\">string</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"o\">+</span> <span class=\"i\">fret</span>)\n\n<span class=\"k\">let</span> <span class=\"f\">notes</span> <span class=\"o\">=</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> <span class=\"t\">Note</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<h2>Ukulele Strings</h2>\n<p>A Ukulele has 4 strings.</p>\n<p>The funy thing is that the 1st one is higher than the second one, where on\nmost string instruments strings are in progressive order.</p>\n<p>This is simply due to the limited size of the Ukulele, a low first string\nwould not sound good, so it is adjusted to the next octave.</p>\n<p>This gives use the following:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">strings</span> <span class=\"o\">=</span> <span class=\"f\">notes</span> [<span class=\"f\">G</span> <span class=\"n\">4</span>;<span class=\"f\">C</span> <span class=\"n\">4</span>;<span class=\"f\">E</span> <span class=\"n\">4</span>; <span class=\"f\">A</span> <span class=\"n\">4</span>]\n</code>\n</pre></td>\n</tr>\n</table>\n<h2>Chords</h2>\n<p>Instead of hard-encoding ukulele chords, we will compute them !</p>\n<p>So a bit of theory about chords.</p>\n<p>Chords are defined by their root note and the chord quality (major,\nminor).</p>\n<p>The chords start on the root note, and the chord quality indicates the\ndistance to other notes to include in the chord.</p>\n<p>On string instrument, the order and the height of the actual notes are not\nreally important for the chord to be ok. So we can use a note at any\noctave.</p>\n<p>Now, let's define the chord qualities.</p>\n<p>First, Major, uses the root note, 3rd and 5th, for instance for C, it will\nbe C, E, G, which gives intervals of 0, 4 and 7 half tones from root.</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">quality</span> <span class=\"o\">=</span> <span class=\"f\">notes</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"t\">Set</span><span class=\"o\">.</span><span class=\"f\">ofList</span>\n\n<span class=\"k\">let</span> <span class=\"f\">M</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">quality</span> [<span class=\"i\">n</span> ; <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>; <span class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>] \n</code>\n</pre></td>\n</tr>\n</table>\n<p>Then, Minor, uses the root note, the lower 3rd and 5th. For C it will be C,\nE flat, G, so intervals of 0, 3 and 7 half tones for root.</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">m</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">quality</span> [<span class=\"i\">n</span>; <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">3</span>; <span class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>] \n</code>\n</pre></td>\n</tr>\n</table>\n<p>The 7th adds a 4th note on the Major:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">M7</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"f\">quality</span> [<span class=\"i\">n</span>; <span class=\"i\">n</span> <span class=\"o\">+</span> <span class=\"n\">4</span>; <span class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">7</span>; <span class=\"i\">n</span><span class=\"o\">+</span><span class=\"n\">11</span> ]\n</code>\n</pre></td>\n</tr>\n</table>\n<h2>Frets</h2>\n<p>As on a gitare, a ukulele has frets, places where you press the string with\nyour finger to change the tone of a string.</p>\n<p>0 usually represent when you don't press a string at all, and pinching the\nstring will play the string note.</p>\n<p>When pressing fret 1, the note is one half tone higher, fret 2, two half\ntone (or one tone) higher.</p>\n<p>So pressing the second fret on the C 4 string give a D 4.</p>\n<p>Our first function will try pressing on frets to find frets for notes that\nbelong to the chord</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">findFrets</span> <span class=\"i\">chord</span> (<span class=\"i\">string</span><span class=\"o\">:</span> <span class=\"t\">Note</span>) <span class=\"o\">=</span>\n    [<span class=\"n\">0..</span><span class=\"n\">10</span>]\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">filter</span> (<span class=\"k\">fun</span> <span class=\"i\">fret</span> <span class=\"k\">-&gt;</span> \n        <span class=\"t\">Set</span><span class=\"o\">.</span><span class=\"f\">contains</span> (<span class=\"i\">string</span> <span class=\"o\">+</span> <span class=\"i\">fret</span>) <span class=\"i\">chord</span>)\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> (<span class=\"k\">fun</span> <span class=\"i\">fret</span> <span class=\"k\">-&gt;</span> <span class=\"i\">fret</span>, <span class=\"i\">string</span> <span class=\"o\">+</span> <span class=\"i\">fret</span>)\n</code>\n</pre></td>\n</tr>\n</table>\n<p>The result is list of pair, (fret, note) that can be used on the strnig</p>\n<p>The second function will explore the combinaison of frets/note and keep only\nthose that contains all notes of the chords.</p>\n<p>Ex: for a C Major chord, we need at least a C, a E and a G.</p>\n<p>using frets 0 on string G, 0 on string C, 3 on string E, and 3 on string A,\nwe get G, C, G, C.</p>\n<p>All notes are part of the chord, but there is no E... not enough. 0,0,0,3 is\na better solution.</p>\n<p>The function explore all possible solution by checking notes on string that\nbelong to the chord, and each time remove a note from the chord. At the end,\nthere should be no missing note.</p>\n<p>At each level sub solutions are sorted by a cost. Standard Ukulele chords\ntry to place fingers as close to the top as possible. So lewer frets are\nbetter.</p>\n<p>The cost function for a chords is to sum square of frets. If there is any\nsolution, we keep the one with the lowest cost.</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"f\">filterChord</span> <span class=\"i\">chord</span> <span class=\"i\">missingNotes</span> <span class=\"i\">solution</span> <span class=\"i\">stringFrets</span>  <span class=\"o\">=</span>\n    <span class=\"k\">match</span> <span class=\"i\">stringFrets</span> <span class=\"k\">with</span>\n    | [] <span class=\"k\">-&gt;</span> \n        <span class=\"k\">if</span> <span class=\"t\">Set</span><span class=\"o\">.</span><span class=\"f\">isEmpty</span> <span class=\"i\">missingNotes</span> <span class=\"k\">then</span> \n            <span class=\"p\">Some</span> (<span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">rev</span> <span class=\"i\">solution</span>)\n        <span class=\"k\">else</span>\n            <span class=\"p\">None</span>\n    | <span class=\"i\">string</span> <span class=\"o\">::</span> <span class=\"i\">tail</span> <span class=\"k\">-&gt;</span> \n        <span class=\"i\">string</span>\n        <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">filter</span> (<span class=\"k\">fun</span> (_,<span class=\"i\">note</span>) <span class=\"k\">-&gt;</span> \n            <span class=\"i\">chord</span> <span class=\"o\">|&gt;</span> <span class=\"t\">Set</span><span class=\"o\">.</span><span class=\"f\">contains</span> <span class=\"i\">note</span>)\n        <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">choose</span> (<span class=\"k\">fun</span> (<span class=\"i\">fret</span>,<span class=\"i\">note</span>) <span class=\"k\">-&gt;</span> \n            <span class=\"f\">filterChord</span> <span class=\"i\">chord</span> (<span class=\"t\">Set</span><span class=\"o\">.</span><span class=\"f\">remove</span> <span class=\"i\">note</span> <span class=\"i\">missingNotes</span>) ((<span class=\"i\">fret</span>,<span class=\"i\">note</span>) <span class=\"o\">::</span> <span class=\"i\">solution</span>) <span class=\"i\">tail</span>)\n        <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">sortBy</span>(<span class=\"k\">fun</span> <span class=\"i\">s</span> <span class=\"k\">-&gt;</span> \n            <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">sumBy</span> (<span class=\"k\">fun</span> (<span class=\"i\">fret</span>,_) <span class=\"k\">-&gt;</span> <span class=\"i\">fret</span><span class=\"o\">*</span><span class=\"i\">fret</span>) <span class=\"i\">s</span>)\n        <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">tryHead</span>\n       \n</code>\n</pre></td>\n</tr>\n</table>\n<p>making a cord is now simple.</p>\n<p>Compute the note in the chord using quality and root.</p>\n<p>For each string, map possible frets the belong to the chord, then filter\nit.</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n<span class=\"l\">7: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">chord</span> <span class=\"f\">root</span> <span class=\"f\">quality</span> <span class=\"o\">=</span>    \n    <span class=\"k\">let</span> <span class=\"i\">chord</span> <span class=\"o\">=</span> <span class=\"f\">quality</span> (<span class=\"f\">root</span> <span class=\"n\">4</span>)\n    <span class=\"i\">strings</span>\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> (<span class=\"f\">findFrets</span> <span class=\"i\">chord</span>)\n    <span class=\"o\">|&gt;</span> <span class=\"f\">filterChord</span> <span class=\"i\">chord</span> <span class=\"i\">chord</span> []\n    <span class=\"o\">|&gt;</span> <span class=\"t\">Option</span><span class=\"o\">.</span><span class=\"f\">get</span>\n    \n</code>\n</pre></td>\n</tr>\n</table>\n<p>We can now try with classic chords:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">CM</span> <span class=\"o\">=</span> <span class=\"f\">chord</span> <span class=\"f\">C</span> <span class=\"f\">M</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>and the result is:</p>\n<table class=\"pre\">\n<tr>\n<td>\n<pre>\n<code>[(0, G 4); (0, C 4); (0, E 4); (3, C 5)]</code>\n</pre></td>\n</tr>\n</table>\n<p>Now C minor:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">Cm</span> <span class=\"o\">=</span> <span class=\"f\">chord</span> <span class=\"f\">C</span> <span class=\"f\">m</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>which is exactly what you can find on a tab sheet:</p>\n<table class=\"pre\">\n<tr>\n<td>\n<pre>\n<code>[(0, G 4); (3, D# 4); (3, G 4); (3, C 5)]</code>\n</pre></td>\n</tr>\n</table>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n<span class=\"l\">7: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"f\">chord</span> <span class=\"f\">D</span> <span class=\"f\">m</span>\n    \n<span class=\"f\">chord</span> <span class=\"f\">A</span> <span class=\"f\">M</span>\n<span class=\"f\">chord</span> <span class=\"f\">A</span> <span class=\"f\">m</span>\n\n<span class=\"f\">chord</span> <span class=\"f\">G</span> <span class=\"f\">m</span>\n<span class=\"f\">chord</span> <span class=\"f\">E</span> <span class=\"f\">M</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<h2>Printing chords</h2>\n<p>To print chords, we will simply use pretty unicode chars, and place a small\n'o' on the fret where we should place fingers:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">print</span> <span class=\"i\">chord</span>  <span class=\"o\">=</span>\n    <span class=\"k\">let</span> <span class=\"f\">fret</span> <span class=\"i\">n</span> <span class=\"i\">frt</span> <span class=\"o\">=</span> \n        <span class=\"k\">if</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"i\">frt</span> <span class=\"k\">then</span> \n            <span class=\"s\">&quot;o&quot;</span> \n        <span class=\"k\">else</span> \n            <span class=\"s\">&quot;â&quot;</span>\n    <span class=\"k\">let</span> <span class=\"f\">line</span> <span class=\"i\">chord</span> <span class=\"i\">n</span>  <span class=\"o\">=</span>\n            <span class=\"i\">chord</span> \n            <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> (<span class=\"f\">fst</span> <span class=\"o\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"f\">fret</span> <span class=\"i\">n</span>)\n            <span class=\"o\">|&gt;</span> <span class=\"t\">String</span><span class=\"o\">.</span><span class=\"f\">concat</span> <span class=\"s\">&quot;&quot;</span>       \n    <span class=\"f\">printfn</span> <span class=\"s\">&quot;â¬â¬â¬â¬&quot;</span>\n    [<span class=\"n\">1..</span><span class=\"n\">4</span>] \n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> (<span class=\"f\">line</span> <span class=\"i\">chord</span>)\n    <span class=\"o\">|&gt;</span> <span class=\"t\">String</span><span class=\"o\">.</span><span class=\"f\">concat</span> <span class=\"s\">&quot;</span><span class=\"e\">\n</span><span class=\"s\">â¼â¼â¼â¼</span><span class=\"e\">\n</span><span class=\"s\">&quot;</span> \n    <span class=\"o\">|&gt;</span> <span class=\"f\">printfn</span> <span class=\"s\">&quot;</span><span class=\"pf\">%s</span><span class=\"s\">&quot;</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Let's try it</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"f\">chord</span> <span class=\"f\">C</span> <span class=\"f\">M</span> <span class=\"o\">|&gt;</span> <span class=\"f\">print</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>It prints</p>\n<table class=\"pre\">\n<tr>\n<td>\n<pre>\n<code>â¬â¬â¬â¬\nââââ\nâ¼â¼â¼â¼\nââââ\nâ¼â¼â¼â¼\nâââo\nâ¼â¼â¼â¼\nââââ</code>\n</pre></td>\n</tr>\n</table>\n<p>Another one</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"f\">chord</span> <span class=\"f\">G</span> <span class=\"f\">M</span> <span class=\"o\">|&gt;</span> <span class=\"f\">print</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>and we get</p>\n<table class=\"pre\">\n<tr>\n<td>\n<pre>\n<code>â¬â¬â¬â¬\nââââ\nâ¼â¼â¼â¼\nâoâo\nâ¼â¼â¼â¼\nââoâ\nâ¼â¼â¼â¼\nââââ</code>\n</pre></td>\n</tr>\n</table>\n<h2>Playing chords</h2>\n<p>We can also play chords using NAudio.</p>\n<p>You can find NAudio on nuget.org</p>\n<p>For simplicity I will use the midi synthetizer:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"prep\">#r</span> <span class=\"s\">@&quot;packages\NAudio\lib\net35\NAudio.dll&quot;</span>\n\n<span class=\"k\">open</span> <span class=\"i\">NAudio</span><span class=\"o\">.</span><span class=\"i\">Midi</span>\n<span class=\"k\">let</span> <span class=\"i\">device</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"t\">MidiOut</span>(<span class=\"n\">0</span>)\n<span class=\"t\">MidiOut</span><span class=\"o\">.</span><span class=\"f\">DeviceInfo</span> <span class=\"n\">0</span>\n<span class=\"k\">let</span> <span class=\"f\">midi</span> (<span class=\"i\">m</span><span class=\"o\">:</span><span class=\"t\">MidiMessage</span>) <span class=\"o\">=</span>  <span class=\"i\">device</span><span class=\"o\">.</span><span class=\"f\">Send</span> <span class=\"i\">m</span><span class=\"o\">.</span><span class=\"i\">RawData</span>\n\n<span class=\"k\">let</span> <span class=\"f\">startNote</span> <span class=\"i\">note</span> <span class=\"i\">volume</span> <span class=\"o\">=</span> \n    <span class=\"t\">MidiMessage</span><span class=\"o\">.</span><span class=\"f\">StartNote</span>(<span class=\"i\">note</span>, <span class=\"i\">volume</span>, <span class=\"n\">2</span>) <span class=\"o\">|&gt;</span> <span class=\"f\">midi</span>\n\n<span class=\"k\">let</span> <span class=\"f\">stopNote</span> <span class=\"i\">note</span> <span class=\"i\">volume</span> <span class=\"o\">=</span> \n    <span class=\"t\">MidiMessage</span><span class=\"o\">.</span><span class=\"f\">StopNote</span>(<span class=\"i\">note</span>, <span class=\"i\">volume</span>, <span class=\"n\">2</span>) <span class=\"o\">|&gt;</span> <span class=\"f\">midi</span>\n\n<span class=\"k\">let</span> <span class=\"f\">sleep</span> <span class=\"i\">n</span> <span class=\"o\">=</span> <span class=\"i\">System</span><span class=\"o\">.</span><span class=\"i\">Threading</span><span class=\"o\">.</span><span class=\"t\">Thread</span><span class=\"o\">.</span><span class=\"f\">Sleep</span>(<span class=\"i\">n</span><span class=\"o\">:</span> <span class=\"t\">int</span>)\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Now we can define a function that will play a chord.</p>\n<p>The tempo is used as a multiplicator for a the chord length.</p>\n<p>Longer tempo means slower.</p>\n<p>For better result we introduce an arpegio, a small delay between each note.\nDon't forget to remove this time from the waiting length...</p>\n<p>The direction indicate if the cords are strumed Up, or Down. In the Up case\nwe reverse the chord.</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n<span class=\"l\">18: </span>\n<span class=\"l\">19: </span>\n<span class=\"l\">20: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">type</span> <span class=\"t\">Direction</span> <span class=\"o\">=</span> <span class=\"p\">Dn</span> <span class=\"k\">of</span> <span class=\"t\">int</span> | <span class=\"p\">Up</span> <span class=\"k\">of</span> <span class=\"t\">int</span>\n\n<span class=\"k\">let</span> <span class=\"f\">play</span> <span class=\"i\">tempo</span> <span class=\"i\">arpegio</span> (<span class=\"i\">chord</span>, <span class=\"i\">strum</span>)  <span class=\"o\">=</span>\n    <span class=\"k\">let</span> <span class=\"i\">strings</span>, <span class=\"i\">length</span> <span class=\"o\">=</span> \n        <span class=\"k\">match</span> <span class=\"i\">strum</span> <span class=\"k\">with</span> \n        | <span class=\"p\">Dn</span> <span class=\"i\">length</span> <span class=\"k\">-&gt;</span> <span class=\"i\">chord</span>, <span class=\"i\">length</span>\n        | <span class=\"p\">Up</span> <span class=\"i\">length</span> <span class=\"k\">-&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">rev</span> <span class=\"i\">chord</span>, <span class=\"i\">length</span> \n\n    <span class=\"i\">strings</span>\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">iter</span> (<span class=\"k\">fun</span> (_,(<span class=\"i\">n</span><span class=\"o\">:</span> <span class=\"t\">Note</span>)) <span class=\"k\">-&gt;</span> \n        <span class=\"f\">startNote</span> <span class=\"i\">n</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"n\">100</span> ; <span class=\"f\">sleep</span> <span class=\"i\">arpegio</span> )\n\n    <span class=\"k\">let</span> <span class=\"i\">arpegioLength</span> <span class=\"o\">=</span> \n        <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">length</span> <span class=\"i\">chord</span> <span class=\"o\">*</span> <span class=\"i\">arpegio</span>\n\n    <span class=\"f\">sleep</span> (<span class=\"i\">length</span> <span class=\"o\">*</span> <span class=\"i\">tempo</span> <span class=\"o\">-</span> <span class=\"i\">arpegioLength</span>)\n\n    <span class=\"i\">strings</span>\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">iter</span> (<span class=\"k\">fun</span> (_,(<span class=\"i\">n</span><span class=\"o\">:</span> <span class=\"t\">Note</span>)) <span class=\"k\">-&gt;</span> \n        <span class=\"f\">stopNote</span> <span class=\"i\">n</span><span class=\"o\">.</span><span class=\"i\">Note</span> <span class=\"n\">100</span> )\n</code>\n</pre></td>\n</tr>\n</table>\n<p>To strum a chord, we give a list of length, and a chord, and it will apply\nthe cord to each length:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"f\">strum</span> <span class=\"i\">strm</span> <span class=\"i\">chord</span> <span class=\"o\">=</span>\n    <span class=\"k\">let</span> <span class=\"i\">repeatedChord</span> <span class=\"o\">=</span> \n        <span class=\"i\">strm</span> \n        <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">map</span> (<span class=\"k\">fun</span> _ <span class=\"k\">-&gt;</span> <span class=\"i\">chord</span>)\n    \n    <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">zip</span> <span class=\"i\">repeatedChord</span> <span class=\"i\">strm</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Now here is Santa Clause favorite song, Get Lucky by Daft Punk.</p>\n<p>First the chords :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n<span class=\"l\">7: </span>\n<span class=\"l\">8: </span>\n<span class=\"l\">9: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">luckyChords</span> <span class=\"o\">=</span> \n    [ <span class=\"c\">//Like the legend of the Phoenix,</span>\n      <span class=\"f\">chord</span> <span class=\"f\">B</span> <span class=\"f\">m</span>\n      <span class=\"c\">// All ends with beginnings.</span>\n      <span class=\"f\">chord</span> <span class=\"f\">D</span> <span class=\"f\">M</span>\n      <span class=\"c\">// What keeps the planets spinning,</span>\n      <span class=\"f\">chord</span> (<span class=\"f\">Fd</span>) <span class=\"f\">m</span>\n      <span class=\"c\">// The force from the beginning.</span>\n      <span class=\"f\">chord</span> <span class=\"f\">E</span> <span class=\"f\">M</span> ]\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Then strum, this is the rythm used to play the same chord, it goes like,\nDam, Dam, Dam Dala Dam Dam:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">luckyStrum</span> <span class=\"o\">=</span> \n    [ <span class=\"p\">Dn</span> <span class=\"n\">4</span>; <span class=\"p\">Dn</span> <span class=\"n\">3</span>; <span class=\"p\">Dn</span> <span class=\"n\">2</span>; <span class=\"p\">Dn</span> <span class=\"n\">1</span>; <span class=\"p\">Up</span> <span class=\"n\">2</span>; <span class=\"p\">Dn</span> <span class=\"n\">2</span>; <span class=\"p\">Up</span> <span class=\"n\">2</span>]\n</code>\n</pre></td>\n</tr>\n</table>\n<p>and the full song :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"k\">let</span> <span class=\"i\">getLucky</span> <span class=\"o\">=</span>\n    <span class=\"i\">luckyChords</span>\n    <span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">collect</span> (<span class=\"f\">strum</span> <span class=\"i\">luckyStrum</span>)\n</code>\n</pre></td>\n</tr>\n</table>\n<p>And now, let's play it :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">getLucky</span>\n<span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">replicate</span> <span class=\"n\">1</span>\n<span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">concat</span>\n<span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">iter</span> (<span class=\"f\">play</span> <span class=\"n\">130</span> <span class=\"n\">30</span>)\n</code>\n</pre></td>\n</tr>\n</table>\n<p>And the tab notations for the song !</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">luckyChords</span>\n<span class=\"o\">|&gt;</span> <span class=\"t\">List</span><span class=\"o\">.</span><span class=\"f\">iter</span> <span class=\"f\">print</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<table class=\"pre\">\n<tr>\n<td>\n<pre>\n<code>â¬â¬â¬â¬\nââââ\nâ¼â¼â¼â¼\nâooo\nâ¼â¼â¼â¼\nââââ\nâ¼â¼â¼â¼\noâââ\nâ¬â¬â¬â¬\nââââ\nâ¼â¼â¼â¼\noooâ\nâ¼â¼â¼â¼\nââââ\nâ¼â¼â¼â¼\nââââ\nâ¬â¬â¬â¬\nâoââ\nâ¼â¼â¼â¼\noâoâ\nâ¼â¼â¼â¼\nââââ\nâ¼â¼â¼â¼\nââââ\nâ¬â¬â¬â¬\noâââ\nâ¼â¼â¼â¼\nâââo\nâ¼â¼â¼â¼\nââââ\nâ¼â¼â¼â¼\nâoââ</code>\n</pre></td>\n</tr>\n</table>\n<h1>Conclusion</h1>\n<p>I hope this small thing was entertaining and that it'll get you into ukulele\n!</p>\n<p>For excercise you can:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Chord_(music)\">implements more\nchords</a></li>\n<li>Better printing</li>\n<li>add more liveliness and groove by adding some jitter to the strum...</li>\n<li>add the lyrics for Karaoke !</li>\n<li>try with other songs !</li>\n<li>try the same for a <a href=\"https://en.wikipedia.org/wiki/Guitar\">6 string\ngitar</a> !</li>\n</ul>\n<p>Now it's your turn to rock !</p>\n</div>\n</div>","","ukulele fun for xmas ukulele this post part the advent calendar english 2015 project check out all the other great posts there and special thanks sergey tihon for organizing this something fun and not too technical for end the year everyone knows the favorite instrument santa claus ukulele let play some music and especialy some ukulele first thing first let create functions for notes start with octave and have progression half tones since there only half tone between and and reach next octave which open system let let let let let let let for sharps and flat lets define two functions that had and remove half tone let sharp let flat can now create names for each note let sharp let flat let sharp let flat let sharp let flat let sharp let flat let sharp let flat there sharp flat because and respectively same thing for and will create structure with custome comparison equality that doesn take the octave into account using modulus this will prove usefull work with chords struct customcomparison customequality structuredformatdisplay quot display quot type note note int member note note override gethashcode note override equals other match other with note other note other note false static member names quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot quot member display let name note names note let octave note sprintf quot quot name octave override this tostring this display interface iequatable note with member equals other note other note interface icomparable note with member compareto other compare note other note interface icomparable with member compareto other match other with note other compare note other note static member string note fret int note string note fret let notes list map note ukulele strings ukulele has strings the funy thing that the 1st one higher than the second one where most string instruments strings are progressive order this simply due the limited size the ukulele low first string would not sound good adjusted the next octave this gives use the following let strings notes chords instead hard encoding ukulele chords will compute them bit theory about chords chords are defined their root note and the chord quality major minor the chords start the root note and the chord quality indicates the distance other notes include the chord string instrument the order and the height the actual notes are not really important for the chord can use note any octave now let define the chord qualities first major uses the root note 3rd and 5th for instance for will which gives intervals and half tones from root let quality notes set oflist let quality then minor uses the root note the lower 3rd and 5th for will flat intervals and half tones for root let quality the 7th adds 4th note the major let quality frets gitare ukulele has frets places where you press the string with your finger change the tone string usually represent when you don press string all and pinching the string will play the string note when pressing fret the note one half tone higher fret two half tone one tone higher pressing the second fret the string give our first function will try pressing frets find frets for notes that belong the chord let findfrets chord string note list filter fun fret set contains string fret chord list map fun fret fret string fret the result list pair fret note that can used the strnig the second function will explore the combinaison frets note and keep only those that contains all notes the chords for major chord need least and using frets string string string and string get all notes are part the chord but there not enough better solution the function explore all possible solution checking notes string that belong the chord and each time remove note from the chord the end there should missing note each level sub solutions are sorted cost standard ukulele chords try place fingers close the top possible lewer frets are better the cost function for chords sum square frets there any solution keep the one with the lowest cost let rec filterchord chord missingnotes solution stringfrets match stringfrets with set isempty missingnotes then some list rev solution else none string tail string list filter fun note chord set contains note list choose fun fret note filterchord chord set remove note missingnotes fret note solution tail list sortby fun list sumby fun fret fret fret list tryhead making cord now simple compute the note the chord using quality and root for each string map possible frets the belong the chord then filter let chord root quality let chord quality root strings list map findfrets chord filterchord chord chord option get can now try with classic chords let chord and the result now minor let chord which exactly what you can find tab sheet chord chord chord chord chord printing chords print chords will simply use pretty unicode chars and place small the fret where should place fingers let print chord let fret frt frt then quot quot else quot quot let line chord chord list map fst fret string concat quot quot printfn quot â¬â¬â¬â¬ quot list map line chord string concat quot nâ¼â¼â¼â¼ quot printfn quot quot let try chord print prints â¬â¬â¬â¬ ââââ â¼â¼â¼â¼ ââââ â¼â¼â¼â¼ âââo â¼â¼â¼â¼ ââââ another one chord print and get â¬â¬â¬â¬ ââââ â¼â¼â¼â¼ âoâo â¼â¼â¼â¼ ââoâ â¼â¼â¼â¼ ââââ playing chords can also play chords using naudio you can find naudio nuget org for simplicity will use the midi synthetizer quot packages naudio lib net35 naudio dll quot open naudio midi let device new midiout midiout deviceinfo let midi midimessage device send rawdata let startnote note volume midimessage startnote note volume midi let stopnote note volume midimessage stopnote note volume midi let sleep system threading thread sleep int now can define function that will play chord the tempo used multiplicator for the chord length longer tempo means slower for better result introduce arpegio small delay between each note don forget remove this time from the waiting length the direction indicate the cords are strumed down the case reverse the chord type direction int int let play tempo arpegio chord strum let strings length match strum with length chord length length list rev chord length strings list iter fun note startnote note 100 sleep arpegio let arpegiolength list length chord arpegio sleep length tempo arpegiolength strings list iter fun note stopnote note 100 strum chord give list length and chord and will apply the cord each length let strum strm chord let repeatedchord strm list map fun chord list zip repeatedchord strm now here santa clause favorite song get lucky daft punk first the chords let luckychords like the legend the phoenix chord all ends with beginnings chord what keeps the planets spinning chord the force from the beginning chord then strum this the rythm used play the same chord goes like dam dam dam dala dam dam let luckystrum and the full song let getlucky luckychords list collect strum luckystrum and now let play getlucky list replicate list concat list iter play 130 and the tab notations for the song luckychords list iter print â¬â¬â¬â¬ ââââ â¼â¼â¼â¼ âooo â¼â¼â¼â¼ ââââ â¼â¼â¼â¼ oâââ â¬â¬â¬â¬ ââââ â¼â¼â¼â¼ oooâ â¼â¼â¼â¼ ââââ â¼â¼â¼â¼ ââââ â¬â¬â¬â¬ âoââ â¼â¼â¼â¼ oâoâ â¼â¼â¼â¼ ââââ â¼â¼â¼â¼ ââââ â¬â¬â¬â¬ oâââ â¼â¼â¼â¼ âââo â¼â¼â¼â¼ ââââ â¼â¼â¼â¼ âoââ conclusion hope this small thing was entertaining and that get you into ukulele for excercise you can implements more chords better printing add more liveliness and groove adding some jitter the strum add the lyrics for karaoke try with other songs try the same for string gitar now your turn rock","a:0:{}","1","1","1","1","1","2","0"
"868221","bfbe7b38ff563c323c884dbaf9b071d8","JC4980-GANDI","","2016-12-04 10:34:00","Europe/Paris","2016-12-04 09:34:56","2016-12-04 09:37:43","","post","xhtml","2016/12/04/fck:-Fake-Construction-Kit","en","fck: Fake Construction Kit","","","<p>Yeah it's christmas time again, and santa's elves are quite busy.</p>\r\n<p>And when I say busy, I don't mean:</p>\r\n<p><img src=\"http://s.hswstatic.com/gif/santa-claus-stories-ga-the-tiny-elf-8b.jpg\" alt=\"Santa's elves\" /></p>\r\n<p>I mean busy like this:</p>\r\n<p><img src=\"https://theredphoenix.files.wordpress.com/2013/12/amazon-warehouse-assemblyline.jpg\" alt=\"Santa's elves\" /></p>\r\n<p>So they decided to build some automation productivity tools,\r\nand they choose Santa's favorite language to do the job:</p>\r\n<p><strong>F#</strong> of course !</p>\r\n<h2>F# scripting</h2>\r\n<p>No body would seriously use a compiled language for automation tools. Requiring compilation or a CI server\r\nfor this kind of things usually kills motivation.</p>\r\n<p>Of course it is possible to write bash/batch files but the syntax if fugly once you start to make more advanced\r\ntools.</p>\r\n<p>Python, JavaScript, Ruby or PowerShell are cool, but you end up as often with scripted languages with dynamic typing which you'll\r\ncome to regret when you have to maintain it on the long term.</p>\r\n<p>F# is a staticaly typed language that can be easily scripted. Type inference make it feel like shorter JavaScript but\r\nwith far higher safety !</p>\r\n<p>Writing F# script is easy and fast. Test it from the command line:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Then write:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span onmouseout=\"hideTip(event, 'fs1', 1)\" onmouseover=\"showTip(event, 'fs1', 1)\" class=\"f\">printfn</span> <span class=\"s\">&quot;Merry Christmas !&quot;</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>press <code>:q</code> to exit</p>\r\n<p>now launch it on linux with:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">fsharpi</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>or on windows:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">fsianycpu</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Excellent.</p>\r\n<p>The only problem is that typing the <code>fshapi --exec</code> this is a bit tedious.</p>\r\n<h2>Bash/Batch to the rescue</h2>\r\n<p>We can create a bash/batch script to puth in the path that will launch the script (for linux):</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">fsharpi</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">chmod</span> <span class=\"o\">+</span><span class=\"i\">x</span> <span class=\"i\">test</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>or one windows</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">cmd</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">fsianycpu</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>    \r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Done !</p>\r\n<p>Better, but now we need to write a bash and/or a batch script for each F# script.</p>\r\n<h2>fck bash/batch dispatcher FTW !</h2>\r\n<p>We create a fck file (don't forget to chmod +x it) that takes a command</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n<span class=\"l\">18: </span>\r\n<span class=\"l\">19: </span>\r\n<span class=\"l\">20: </span>\r\n<span class=\"l\">21: </span>\r\n<span class=\"l\">22: </span>\r\n<span class=\"l\">23: </span>\r\n<span class=\"l\">24: </span>\r\n<span class=\"l\">25: </span>\r\n<span class=\"l\">26: </span>\r\n<span class=\"l\">27: </span>\r\n<span class=\"l\">28: </span>\r\n<span class=\"l\">29: </span>\r\n<span class=\"l\">30: </span>\r\n<span class=\"l\">31: </span>\r\n<span class=\"l\">32: </span>\r\n<span class=\"l\">33: </span>\r\n<span class=\"l\">34: </span>\r\n<span class=\"l\">35: </span>\r\n<span class=\"l\">36: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"c\">#!/usr/bin/env bash</span>\r\n\r\n\r\n# <span class=\"i\">fck</span> <span class=\"i\">tool</span> <span class=\"i\">path</span>\r\n<span class=\"i\">fckpath</span><span class=\"o\">=$</span>(<span class=\"i\">readlink</span> <span class=\"o\">-</span><span class=\"i\">f</span> <span class=\"s\">&quot;$0&quot;</span>)\r\n# <span class=\"i\">fck</span> <span class=\"i\">tool</span> <span class=\"i\">dir</span>\r\n<span class=\"i\">dir</span><span class=\"o\">=$</span>(<span class=\"i\">dirname</span> <span class=\"o\">$</span><span class=\"i\">fckpath</span>)\r\n<span class=\"i\">script</span><span class=\"o\">=</span><span class=\"s\">&quot;$dir/fck-cmd/fck-$1.fsx&quot;</span>\r\n<span class=\"i\">shell</span><span class=\"o\">=</span><span class=\"s\">&quot;$dir/fck-cmd/fck-$1.sh&quot;</span>\r\n<span class=\"i\">cmd</span><span class=\"o\">=</span><span class=\"s\">&quot;$1&quot;</span>\r\n<span class=\"i\">shift</span>\r\n\r\n# <span class=\"i\">packages</span> <span class=\"k\">if</span> <span class=\"i\">needed</span>\r\n<span class=\"k\">if</span> [ <span class=\"o\">!</span> <span class=\"o\">-</span><span class=\"i\">d</span> <span class=\"s\">&quot;$dir/fck-cmd/packages&quot;</span> ]\r\n<span class=\"k\">then</span>\r\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir/fck-cmd&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/.paket/paket.bootstrapper.exe&quot;</span> <span class=\"o\">--</span><span class=\"i\">run</span> <span class=\"i\">restore</span>\r\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n<span class=\"i\">fi</span>\r\n\r\n# <span class=\"i\">script</span> <span class=\"i\">command</span> <span class=\"k\">if</span> <span class=\"i\">it</span> <span class=\"i\">exists</span>\r\n<span class=\"k\">if</span> [ <span class=\"o\">-</span><span class=\"i\">e</span> <span class=\"o\">$</span><span class=\"i\">script</span> ]\r\n<span class=\"k\">then</span>\r\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/packages/FAKE/tools/FAKE.exe&quot;</span> <span class=\"s\">&quot;$script&quot;</span> <span class=\"o\">--</span> <span class=\"o\">$@</span>\r\n\r\n# <span class=\"i\">shell</span> <span class=\"i\">command</span> <span class=\"k\">if</span> <span class=\"i\">it</span> <span class=\"i\">exists</span>\r\n<span class=\"k\">elif</span> [ <span class=\"o\">-</span><span class=\"i\">e</span> <span class=\"o\">$</span><span class=\"i\">shell</span> ]\r\n<span class=\"k\">then</span>\r\n    <span class=\"i\">eval</span> <span class=\"o\">$</span><span class=\"i\">shell</span> <span class=\"o\">$@</span>\r\n\r\n# <span class=\"i\">help</span>\r\n<span class=\"k\">else</span>\r\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir/fck-cmd&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/packages/FAKE/tools/FAKE.exe&quot;</span> <span class=\"s\">&quot;$dir/fck-cmd/fck-help.fsx&quot;</span> <span class=\"o\">--</span> <span class=\"o\">$</span><span class=\"i\">cmd</span> <span class=\"o\">$@</span>\r\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n<span class=\"i\">fi</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>and the batch version:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n<span class=\"l\">18: </span>\r\n<span class=\"l\">19: </span>\r\n<span class=\"l\">20: </span>\r\n<span class=\"l\">21: </span>\r\n<span class=\"l\">22: </span>\r\n<span class=\"l\">23: </span>\r\n<span class=\"l\">24: </span>\r\n<span class=\"l\">25: </span>\r\n<span class=\"l\">26: </span>\r\n<span class=\"l\">27: </span>\r\n<span class=\"l\">28: </span>\r\n<span class=\"l\">29: </span>\r\n<span class=\"l\">30: </span>\r\n<span class=\"l\">31: </span>\r\n<span class=\"l\">32: </span>\r\n<span class=\"l\">33: </span>\r\n<span class=\"l\">34: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"o\">@</span><span class=\"i\">echo</span> <span class=\"i\">off</span>\r\n<span onmouseout=\"hideTip(event, 'fs2', 2)\" onmouseover=\"showTip(event, 'fs2', 2)\" class=\"i\">set</span> <span class=\"i\">encoding</span><span class=\"o\">=</span><span class=\"i\">utf</span><span class=\"o\">-</span><span class=\"n\">8</span>\r\n\r\n<span onmouseout=\"hideTip(event, 'fs2', 3)\" onmouseover=\"showTip(event, 'fs2', 3)\" class=\"i\">set</span> <span class=\"i\">dir</span><span class=\"o\">=%~</span><span class=\"i\">dp0</span>\r\n<span onmouseout=\"hideTip(event, 'fs2', 4)\" onmouseover=\"showTip(event, 'fs2', 4)\" class=\"i\">set</span> <span class=\"i\">cmd</span><span class=\"o\">=%</span><span class=\"n\">1</span>\r\n<span onmouseout=\"hideTip(event, 'fs2', 5)\" onmouseover=\"showTip(event, 'fs2', 5)\" class=\"i\">set</span> <span class=\"i\">script</span><span class=\"o\">=</span><span class=\"s\">&quot;%dir%\fck-cmd\fck-%cmd%.fsx&quot;</span>\r\n<span onmouseout=\"hideTip(event, 'fs2', 6)\" onmouseover=\"showTip(event, 'fs2', 6)\" class=\"i\">set</span> <span class=\"i\">batch</span><span class=\"o\">=</span><span class=\"s\">&quot;%dir%\fck-cmd\fck-%cmd%.cmd&quot;</span>\r\n<span class=\"i\">shift</span>\r\n\r\n<span onmouseout=\"hideTip(event, 'fs2', 7)\" onmouseover=\"showTip(event, 'fs2', 7)\" class=\"i\">set</span> <span class=\"s\">&quot;args=&quot;</span>\r\n<span class=\"o\">:</span><span class=\"i\">parse</span>\r\n<span class=\"k\">if</span> <span class=\"s\">&quot;%~1&quot;</span> <span class=\"i\">neq</span> <span class=\"s\">&quot;&quot;</span> (\r\n  <span onmouseout=\"hideTip(event, 'fs2', 8)\" onmouseover=\"showTip(event, 'fs2', 8)\" class=\"i\">set</span> <span class=\"i\">args</span><span class=\"o\">=%</span><span class=\"i\">args</span><span class=\"o\">%</span> <span class=\"o\">%</span><span class=\"n\">1</span>\r\n  <span class=\"i\">shift</span>\r\n  <span class=\"i\">goto</span> <span class=\"o\">:</span><span class=\"i\">parse</span>\r\n)\r\n<span class=\"k\">if</span> <span class=\"i\">defined</span> <span class=\"i\">args</span> <span onmouseout=\"hideTip(event, 'fs2', 9)\" onmouseover=\"showTip(event, 'fs2', 9)\" class=\"i\">set</span> <span class=\"i\">args</span><span class=\"o\">=%</span><span class=\"i\">args</span><span class=\"o\">:</span><span class=\"k\">~</span><span class=\"n\">1</span><span class=\"o\">%</span>\r\n\r\n\r\n<span class=\"k\">if</span> <span onmouseout=\"hideTip(event, 'fs3', 10)\" onmouseover=\"showTip(event, 'fs3', 10)\" class=\"i\">not</span> <span class=\"i\">exist</span> <span class=\"s\">&quot;%dir%\fck-cmd\packages&quot;</span> (\r\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;%dir%\fck-cmd\&quot;</span>\r\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%</span>\r\n<span class=\"i\">popd</span> \r\n)\r\n\r\n<span class=\"k\">if</span> <span class=\"i\">exist</span>  <span class=\"s\">&quot;%script%&quot;</span> (\r\n<span class=\"s\">&quot;%dir%/fck-cmd/packages/fake/tools/fake.exe&quot;</span> <span class=\"s\">&quot;%script%&quot;</span> <span class=\"o\">--</span> <span class=\"o\">%</span><span class=\"i\">args</span><span class=\"o\">%</span>\r\n) <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"i\">exist</span> <span class=\"s\">&quot;%batch%&quot;</span> (\r\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;%dir%\fck-cmd\&quot;</span>\r\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">batch</span><span class=\"o\">%</span><span class=\"s\">&quot; %cmd% %*</span>\r\n<span class=\"s\">popd</span>\r\n<span class=\"s\">) else (</span>\r\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%/</span><span class=\"i\">fck</span><span class=\"o\">-</span><span class=\"i\">cmd</span><span class=\"o\">/</span><span class=\"i\">packages</span><span class=\"o\">/</span><span class=\"i\">fake</span><span class=\"o\">/</span><span class=\"i\">tools</span><span class=\"o\">/</span><span class=\"i\">fake</span><span class=\"o\">.</span><span class=\"i\">exe</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%</span>\r\n)\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Forget the paket part for now.</p>\r\n<p>The bash take a command argument, and check whether a fck-cmd/fck-$cmd.fsx file exists.\r\nIf it does, run it !\r\nIt also works with shell scripts name fck-$cmd.sh or batch scripts fck-$cmd.cmd to integrate quickly with existing tools.</p>\r\n<h2>Fake for faster startups</h2>\r\n<p>When F# scripts start to grow big, especially with things like Json or Xml type providers,\r\nload time can start to raise above acceptable limits for a cli.</p>\r\n<p>Using Fake to launch scripts takes adventage of it's compilation cache. We get the best of both world:</p>\r\n<ul>\r\n<li>scriptability for quick changes and easy deployment</li>\r\n<li>automaticly cached jit compilation for fast startup and execution</li>\r\n</ul>\r\n<p>We could have written all commands in a single fsx file and pattern maching on the command name,\r\nbut once we start to have more commands, the script becomes bigger and compilation longer.\r\nThe problem is also that the pattern matching becomes a friction point in the source control.</p>\r\n<h2>FckLib</h2>\r\n<p>At some point we have recuring code in the tools. So we can create helper scripts that will be included by\r\ncommand scripts.</p>\r\n<p>For instance parsing the command line is often useful so I created a helper:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\"> 1: </span>\r\n<span class=\"l\"> 2: </span>\r\n<span class=\"l\"> 3: </span>\r\n<span class=\"l\"> 4: </span>\r\n<span class=\"l\"> 5: </span>\r\n<span class=\"l\"> 6: </span>\r\n<span class=\"l\"> 7: </span>\r\n<span class=\"l\"> 8: </span>\r\n<span class=\"l\"> 9: </span>\r\n<span class=\"l\">10: </span>\r\n<span class=\"l\">11: </span>\r\n<span class=\"l\">12: </span>\r\n<span class=\"l\">13: </span>\r\n<span class=\"l\">14: </span>\r\n<span class=\"l\">15: </span>\r\n<span class=\"l\">16: </span>\r\n<span class=\"l\">17: </span>\r\n<span class=\"l\">18: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"c\">// culture invariant, case insensitive string comparison</span>\r\n<span class=\"c\">let (==) x y = String.Equals(x,y, StringComparison.InvariantCultureIgnoreCase)</span>\r\n\r\n<span class=\"c\">open System.Xml.Linq</span>\r\n\r\n<span class=\"c\">module CommandLine =</span>\r\n<span class=\"c\">    // get the command line, fck style...</span>\r\n<span class=\"c\">    let getCommandLine() = </span>\r\n<span class=\"c\">        System.Environment.GetCommandLineArgs() </span>\r\n<span class=\"c\">        |&gt; Array.toList</span>\r\n<span class=\"c\">        |&gt; List.skipWhile ((&lt;&gt;) &quot;--&quot;)</span>\r\n<span class=\"c\">        |&gt; List.tail</span>\r\n\r\n<span class=\"c\">    // check whether the command line starts with specified command</span>\r\n<span class=\"c\">    let (|Cmd|_|) str cmdLine =</span>\r\n<span class=\"c\">        match cmdLine with</span>\r\n<span class=\"c\">        | s :: _ when s == str -&gt; Some()</span>\r\n<span class=\"c\">        | _ -&gt; None </span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>We use the <code>--</code> to delimit arguments reserved for the script.\r\nSince Fake is used to launch scripts, we can also include FakeLib for all the fantastic helpers it contains.</p>\r\n<p>Here is a sample fck-cmd/fck-hello.fsx script that can write hello.</p>\r\n<p>It uses FakeLib for the <code>tracefn</code> function and FckLib for <code>getCommandLine</code>.</p>\r\n<p>You can call it with (once fck is in your Path environment variable):</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">fck</span> <span class=\"i\">hello</span> <span class=\"i\">Santa</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<h2>Help</h2>\r\n<p>A tool without help is just a nightmare, and writing help should be easy.</p>\r\n<p>The last part of fck bash script lanch the fck-help.fsx script:</p>\r\n<p>This script tries to find a fck-xxx.txt file and display it, or fallbacks to fck-help.txt.</p>\r\n<p>For exemple the help for our fck hello command will be in fck-hello.txt:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">Usage</span><span class=\"o\">:</span>\r\n<span class=\"i\">fck</span> <span class=\"i\">hello</span> [&lt;<span class=\"i\">name</span>&gt;]\r\n\r\n<span class=\"i\">Display</span> <span class=\"i\">a</span> <span class=\"i\">friendly</span> <span class=\"i\">message</span> <span class=\"k\">to</span> <span class=\"o\">&lt;</span><span class=\"i\">name</span><span class=\"o\">&gt;</span> <span class=\"k\">or</span> <span class=\"k\">to</span> <span class=\"i\">you</span> <span class=\"k\">if</span> <span class=\"o\">&lt;</span><span class=\"i\">name</span><span class=\"o\">&gt;</span> <span class=\"i\">is</span> <span class=\"i\">omitted</span><span class=\"o\">.</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Of course we can the pimp the fck-help.fsx to parse the txt help files and add codes for colors, verbosity etc.</p>\r\n<h2>Deployment</h2>\r\n<p>Deployment is really easy. We can clone the git repository, and add it to $PATH.</p>\r\n<p>Run the commands, it will automatically restore packages if missing, and lanch the script.</p>\r\n<p>To upgrade to a new version, call fck update, defined in fck-update.sh :</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n<span class=\"l\">3: </span>\r\n<span class=\"l\">4: </span>\r\n<span class=\"l\">5: </span>\r\n<span class=\"l\">6: </span>\r\n<span class=\"l\">7: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">script</span><span class=\"o\">=$</span>(<span class=\"i\">readlink</span> <span class=\"o\">-</span><span class=\"i\">f</span> <span class=\"s\">&quot;$0&quot;</span>)\r\n<span class=\"i\">dir</span><span class=\"o\">=$</span>(<span class=\"i\">dirname</span> <span class=\"o\">$</span><span class=\"i\">script</span>)\r\n\r\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n<span class=\"i\">git</span> <span class=\"i\">pull</span>\r\n<span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/.paket/paket.bootstrapper.exe&quot;</span> <span class=\"o\">--</span><span class=\"i\">run</span> <span class=\"i\">restore</span>\r\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>or batch fck-update.cmd:</p>\r\n<table class=\"pre\"><tr><td class=\"lines\"><pre class=\"fssnip\"><span class=\"l\">1: </span>\r\n<span class=\"l\">2: </span>\r\n</pre></td>\r\n<td class=\"snippet\"><pre class=\"fssnip highlighted\"><code lang=\"fsharp\"><span class=\"i\">git</span> <span class=\"i\">pull</span>\r\n<span class=\"o\">.</span><span class=\"i\">paket</span>\r\n</code></pre></td>\r\n</tr>\r\n</table>\r\n<p>Yep, that's that easy</p>\r\n<h2>Happy Christmas</h2>\r\n<p>Using Santa's elves tools, I hope you won't be stuck at work on xmas eve ! Enjoy !</p>\r\n<p><a href=\"https://github.com/thinkbeforecoding/fck\">The full source is on github</a></p>\r\n\r\n\r\n<div class=\"tip\" id=\"fs1\">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>\r\n<div class=\"tip\" id=\"fs2\">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>\r\n<div class=\"tip\" id=\"fs3\">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>","<p>Yeah it's christmas time again, and santa's elves are quite busy.</p>\n<p>And when I say busy, I don't mean:</p>\n<p><img src=\"http://s.hswstatic.com/gif/santa-claus-stories-ga-the-tiny-elf-8b.jpg\" alt=\"Santa's elves\" /></p>\n<p>I mean busy like this:</p>\n<p><img src=\"https://theredphoenix.files.wordpress.com/2013/12/amazon-warehouse-assemblyline.jpg\" alt=\"Santa's elves\" /></p>\n<p>So they decided to build some automation productivity tools, and they choose\nSanta's favorite language to do the job:</p>\n<p><strong>F#</strong> of course !</p>\n<h2>F# scripting</h2>\n<p>No body would seriously use a compiled language for automation tools.\nRequiring compilation or a CI server for this kind of things usually kills\nmotivation.</p>\n<p>Of course it is possible to write bash/batch files but the syntax if fugly\nonce you start to make more advanced tools.</p>\n<p>Python, JavaScript, Ruby or PowerShell are cool, but you end up as often\nwith scripted languages with dynamic typing which you'll come to regret when\nyou have to maintain it on the long term.</p>\n<p>F# is a staticaly typed language that can be easily scripted. Type inference\nmake it feel like shorter JavaScript but with far higher safety !</p>\n<p>Writing F# script is easy and fast. Test it from the command line:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Then write:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"f\">printfn</span> <span class=\"s\">&quot;Merry Christmas !&quot;</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>press <code>:q</code> to exit</p>\n<p>now launch it on linux with:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">fsharpi</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>or on windows:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">fsianycpu</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Excellent.</p>\n<p>The only problem is that typing the <code>fshapi --exec</code> this is a bit\ntedious.</p>\n<h2>Bash/Batch to the rescue</h2>\n<p>We can create a bash/batch script to puth in the path that will launch the\nscript (for linux):</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">fsharpi</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">chmod</span> <span class=\"o\">+</span><span class=\"i\">x</span> <span class=\"i\">test</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>or one windows</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">vim</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">cmd</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">fsianycpu</span> <span class=\"o\">--</span><span class=\"i\">exec</span> <span class=\"i\">test</span><span class=\"o\">.</span><span class=\"i\">fsx</span>    \n</code>\n</pre></td>\n</tr>\n</table>\n<p>Done !</p>\n<p>Better, but now we need to write a bash and/or a batch script for each F#\nscript.</p>\n<h2>fck bash/batch dispatcher FTW !</h2>\n<p>We create a fck file (don't forget to chmod +x it) that takes a command</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n<span class=\"l\">18: </span>\n<span class=\"l\">19: </span>\n<span class=\"l\">20: </span>\n<span class=\"l\">21: </span>\n<span class=\"l\">22: </span>\n<span class=\"l\">23: </span>\n<span class=\"l\">24: </span>\n<span class=\"l\">25: </span>\n<span class=\"l\">26: </span>\n<span class=\"l\">27: </span>\n<span class=\"l\">28: </span>\n<span class=\"l\">29: </span>\n<span class=\"l\">30: </span>\n<span class=\"l\">31: </span>\n<span class=\"l\">32: </span>\n<span class=\"l\">33: </span>\n<span class=\"l\">34: </span>\n<span class=\"l\">35: </span>\n<span class=\"l\">36: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"c\">#!/usr/bin/env bash</span>\n\n\n# <span class=\"i\">fck</span> <span class=\"i\">tool</span> <span class=\"i\">path</span>\n<span class=\"i\">fckpath</span><span class=\"o\">=$</span>(<span class=\"i\">readlink</span> <span class=\"o\">-</span><span class=\"i\">f</span> <span class=\"s\">&quot;$0&quot;</span>)\n# <span class=\"i\">fck</span> <span class=\"i\">tool</span> <span class=\"i\">dir</span>\n<span class=\"i\">dir</span><span class=\"o\">=$</span>(<span class=\"i\">dirname</span> <span class=\"o\">$</span><span class=\"i\">fckpath</span>)\n<span class=\"i\">script</span><span class=\"o\">=</span><span class=\"s\">&quot;$dir/fck-cmd/fck-$1.fsx&quot;</span>\n<span class=\"i\">shell</span><span class=\"o\">=</span><span class=\"s\">&quot;$dir/fck-cmd/fck-$1.sh&quot;</span>\n<span class=\"i\">cmd</span><span class=\"o\">=</span><span class=\"s\">&quot;$1&quot;</span>\n<span class=\"i\">shift</span>\n\n# <span class=\"i\">packages</span> <span class=\"k\">if</span> <span class=\"i\">needed</span>\n<span class=\"k\">if</span> [ <span class=\"o\">!</span> <span class=\"o\">-</span><span class=\"i\">d</span> <span class=\"s\">&quot;$dir/fck-cmd/packages&quot;</span> ]\n<span class=\"k\">then</span>\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir/fck-cmd&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/.paket/paket.bootstrapper.exe&quot;</span> <span class=\"o\">--</span><span class=\"i\">run</span> <span class=\"i\">restore</span>\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n<span class=\"i\">fi</span>\n\n# <span class=\"i\">script</span> <span class=\"i\">command</span> <span class=\"k\">if</span> <span class=\"i\">it</span> <span class=\"i\">exists</span>\n<span class=\"k\">if</span> [ <span class=\"o\">-</span><span class=\"i\">e</span> <span class=\"o\">$</span><span class=\"i\">script</span> ]\n<span class=\"k\">then</span>\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/packages/FAKE/tools/FAKE.exe&quot;</span> <span class=\"s\">&quot;$script&quot;</span> <span class=\"o\">--</span> <span class=\"o\">$@</span>\n\n# <span class=\"i\">shell</span> <span class=\"i\">command</span> <span class=\"k\">if</span> <span class=\"i\">it</span> <span class=\"i\">exists</span>\n<span class=\"k\">elif</span> [ <span class=\"o\">-</span><span class=\"i\">e</span> <span class=\"o\">$</span><span class=\"i\">shell</span> ]\n<span class=\"k\">then</span>\n    <span class=\"i\">eval</span> <span class=\"o\">$</span><span class=\"i\">shell</span> <span class=\"o\">$@</span>\n\n# <span class=\"i\">help</span>\n<span class=\"k\">else</span>\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir/fck-cmd&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n    <span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/fck-cmd/packages/FAKE/tools/FAKE.exe&quot;</span> <span class=\"s\">&quot;$dir/fck-cmd/fck-help.fsx&quot;</span> <span class=\"o\">--</span> <span class=\"o\">$</span><span class=\"i\">cmd</span> <span class=\"o\">$@</span>\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n<span class=\"i\">fi</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>and the batch version:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n<span class=\"l\">18: </span>\n<span class=\"l\">19: </span>\n<span class=\"l\">20: </span>\n<span class=\"l\">21: </span>\n<span class=\"l\">22: </span>\n<span class=\"l\">23: </span>\n<span class=\"l\">24: </span>\n<span class=\"l\">25: </span>\n<span class=\"l\">26: </span>\n<span class=\"l\">27: </span>\n<span class=\"l\">28: </span>\n<span class=\"l\">29: </span>\n<span class=\"l\">30: </span>\n<span class=\"l\">31: </span>\n<span class=\"l\">32: </span>\n<span class=\"l\">33: </span>\n<span class=\"l\">34: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"o\">@</span><span class=\"i\">echo</span> <span class=\"i\">off</span>\n<span class=\"i\">set</span> <span class=\"i\">encoding</span><span class=\"o\">=</span><span class=\"i\">utf</span><span class=\"o\">-</span><span class=\"n\">8</span>\n\n<span class=\"i\">set</span> <span class=\"i\">dir</span><span class=\"o\">=%~</span><span class=\"i\">dp0</span>\n<span class=\"i\">set</span> <span class=\"i\">cmd</span><span class=\"o\">=%</span><span class=\"n\">1</span>\n<span class=\"i\">set</span> <span class=\"i\">script</span><span class=\"o\">=</span><span class=\"s\">&quot;%dir%\fck-cmd\fck-%cmd%.fsx&quot;</span>\n<span class=\"i\">set</span> <span class=\"i\">batch</span><span class=\"o\">=</span><span class=\"s\">&quot;%dir%\fck-cmd\fck-%cmd%.cmd&quot;</span>\n<span class=\"i\">shift</span>\n\n<span class=\"i\">set</span> <span class=\"s\">&quot;args=&quot;</span>\n<span class=\"o\">:</span><span class=\"i\">parse</span>\n<span class=\"k\">if</span> <span class=\"s\">&quot;%~1&quot;</span> <span class=\"i\">neq</span> <span class=\"s\">&quot;&quot;</span> (\n  <span class=\"i\">set</span> <span class=\"i\">args</span><span class=\"o\">=%</span><span class=\"i\">args</span><span class=\"o\">%</span> <span class=\"o\">%</span><span class=\"n\">1</span>\n  <span class=\"i\">shift</span>\n  <span class=\"i\">goto</span> <span class=\"o\">:</span><span class=\"i\">parse</span>\n)\n<span class=\"k\">if</span> <span class=\"i\">defined</span> <span class=\"i\">args</span> <span class=\"i\">set</span> <span class=\"i\">args</span><span class=\"o\">=%</span><span class=\"i\">args</span><span class=\"o\">:</span><span class=\"k\">~</span><span class=\"n\">1</span><span class=\"o\">%</span>\n\n\n<span class=\"k\">if</span> <span class=\"i\">not</span> <span class=\"i\">exist</span> <span class=\"s\">&quot;%dir%\fck-cmd\packages&quot;</span> (\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;%dir%\fck-cmd\&quot;</span>\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%</span>\n<span class=\"i\">popd</span> \n)\n\n<span class=\"k\">if</span> <span class=\"i\">exist</span>  <span class=\"s\">&quot;%script%&quot;</span> (\n<span class=\"s\">&quot;%dir%/fck-cmd/packages/fake/tools/fake.exe&quot;</span> <span class=\"s\">&quot;%script%&quot;</span> <span class=\"o\">--</span> <span class=\"o\">%</span><span class=\"i\">args</span><span class=\"o\">%</span>\n) <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"i\">exist</span> <span class=\"s\">&quot;%batch%&quot;</span> (\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;%dir%\fck-cmd\&quot;</span>\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">batch</span><span class=\"o\">%</span><span class=\"s\">&quot; %cmd% %*</span>\n<span class=\"s\">popd</span>\n<span class=\"s\">) else (</span>\n<span class=\"s\">&quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%/</span><span class=\"i\">fck</span><span class=\"o\">-</span><span class=\"i\">cmd</span><span class=\"o\">/</span><span class=\"i\">packages</span><span class=\"o\">/</span><span class=\"i\">fake</span><span class=\"o\">/</span><span class=\"i\">tools</span><span class=\"o\">/</span><span class=\"i\">fake</span><span class=\"o\">.</span><span class=\"i\">exe</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">%</span><span class=\"i\">dir</span><span class=\"o\">%</span>\n)\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Forget the paket part for now.</p>\n<p>The bash take a command argument, and check whether a fck-cmd/fck-$cmd.fsx\nfile exists. If it does, run it ! It also works with shell scripts name\nfck-$cmd.sh or batch scripts fck-$cmd.cmd to integrate quickly with existing\ntools.</p>\n<h2>Fake for faster startups</h2>\n<p>When F# scripts start to grow big, especially with things like Json or Xml\ntype providers, load time can start to raise above acceptable limits for a\ncli.</p>\n<p>Using Fake to launch scripts takes adventage of it's compilation cache. We\nget the best of both world:</p>\n<ul>\n<li>scriptability for quick changes and easy deployment</li>\n<li>automaticly cached jit compilation for fast startup and execution</li>\n</ul>\n<p>We could have written all commands in a single fsx file and pattern maching\non the command name, but once we start to have more commands, the script\nbecomes bigger and compilation longer. The problem is also that the pattern\nmatching becomes a friction point in the source control.</p>\n<h2>FckLib</h2>\n<p>At some point we have recuring code in the tools. So we can create helper\nscripts that will be included by command scripts.</p>\n<p>For instance parsing the command line is often useful so I created a\nhelper:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\"> 1: </span>\n<span class=\"l\"> 2: </span>\n<span class=\"l\"> 3: </span>\n<span class=\"l\"> 4: </span>\n<span class=\"l\"> 5: </span>\n<span class=\"l\"> 6: </span>\n<span class=\"l\"> 7: </span>\n<span class=\"l\"> 8: </span>\n<span class=\"l\"> 9: </span>\n<span class=\"l\">10: </span>\n<span class=\"l\">11: </span>\n<span class=\"l\">12: </span>\n<span class=\"l\">13: </span>\n<span class=\"l\">14: </span>\n<span class=\"l\">15: </span>\n<span class=\"l\">16: </span>\n<span class=\"l\">17: </span>\n<span class=\"l\">18: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"c\">// culture invariant, case insensitive string comparison</span>\n<span class=\"c\">let (==) x y = String.Equals(x,y, StringComparison.InvariantCultureIgnoreCase)</span>\n\n<span class=\"c\">open System.Xml.Linq</span>\n\n<span class=\"c\">module CommandLine =</span>\n<span class=\"c\">    // get the command line, fck style...</span>\n<span class=\"c\">    let getCommandLine() = </span>\n<span class=\"c\">        System.Environment.GetCommandLineArgs() </span>\n<span class=\"c\">        |&gt; Array.toList</span>\n<span class=\"c\">        |&gt; List.skipWhile ((&lt;&gt;) &quot;--&quot;)</span>\n<span class=\"c\">        |&gt; List.tail</span>\n\n<span class=\"c\">    // check whether the command line starts with specified command</span>\n<span class=\"c\">    let (|Cmd|_|) str cmdLine =</span>\n<span class=\"c\">        match cmdLine with</span>\n<span class=\"c\">        | s :: _ when s == str -&gt; Some()</span>\n<span class=\"c\">        | _ -&gt; None </span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>We use the <code>--</code> to delimit arguments reserved for the script.\nSince Fake is used to launch scripts, we can also include FakeLib for all the\nfantastic helpers it contains.</p>\n<p>Here is a sample fck-cmd/fck-hello.fsx script that can write hello.</p>\n<p>It uses FakeLib for the <code>tracefn</code> function and FckLib for\n<code>getCommandLine</code>.</p>\n<p>You can call it with (once fck is in your Path environment variable):</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">fck</span> <span class=\"i\">hello</span> <span class=\"i\">Santa</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<h2>Help</h2>\n<p>A tool without help is just a nightmare, and writing help should be\neasy.</p>\n<p>The last part of fck bash script lanch the fck-help.fsx script:</p>\n<p>This script tries to find a fck-xxx.txt file and display it, or fallbacks to\nfck-help.txt.</p>\n<p>For exemple the help for our fck hello command will be in fck-hello.txt:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">Usage</span><span class=\"o\">:</span>\n<span class=\"i\">fck</span> <span class=\"i\">hello</span> [&lt;<span class=\"i\">name</span>&gt;]\n\n<span class=\"i\">Display</span> <span class=\"i\">a</span> <span class=\"i\">friendly</span> <span class=\"i\">message</span> <span class=\"k\">to</span> <span class=\"o\">&lt;</span><span class=\"i\">name</span><span class=\"o\">&gt;</span> <span class=\"k\">or</span> <span class=\"k\">to</span> <span class=\"i\">you</span> <span class=\"k\">if</span> <span class=\"o\">&lt;</span><span class=\"i\">name</span><span class=\"o\">&gt;</span> <span class=\"i\">is</span> <span class=\"i\">omitted</span><span class=\"o\">.</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Of course we can the pimp the fck-help.fsx to parse the txt help files and\nadd codes for colors, verbosity etc.</p>\n<h2>Deployment</h2>\n<p>Deployment is really easy. We can clone the git repository, and add it to\n$PATH.</p>\n<p>Run the commands, it will automatically restore packages if missing, and\nlanch the script.</p>\n<p>To upgrade to a new version, call fck update, defined in fck-update.sh :</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n<span class=\"l\">3: </span>\n<span class=\"l\">4: </span>\n<span class=\"l\">5: </span>\n<span class=\"l\">6: </span>\n<span class=\"l\">7: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">script</span><span class=\"o\">=$</span>(<span class=\"i\">readlink</span> <span class=\"o\">-</span><span class=\"i\">f</span> <span class=\"s\">&quot;$0&quot;</span>)\n<span class=\"i\">dir</span><span class=\"o\">=$</span>(<span class=\"i\">dirname</span> <span class=\"o\">$</span><span class=\"i\">script</span>)\n\n<span class=\"i\">pushd</span> <span class=\"s\">&quot;$dir&quot;</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n<span class=\"i\">git</span> <span class=\"i\">pull</span>\n<span class=\"i\">mono</span> <span class=\"s\">&quot;$dir/.paket/paket.bootstrapper.exe&quot;</span> <span class=\"o\">--</span><span class=\"i\">run</span> <span class=\"i\">restore</span>\n<span class=\"i\">popd</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"i\">dev</span><span class=\"o\">/</span><span class=\"k\">null</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>or batch fck-update.cmd:</p>\n<table class=\"pre\">\n<tr>\n<td class=\"lines\">\n<pre class=\"fssnip\">\n<span class=\"l\">1: </span>\n<span class=\"l\">2: </span>\n</pre></td>\n<td class=\"snippet\">\n<pre class=\"fssnip highlighted\">\n<code lang=\"fsharp\"><span class=\"i\">git</span> <span class=\"i\">pull</span>\n<span class=\"o\">.</span><span class=\"i\">paket</span>\n</code>\n</pre></td>\n</tr>\n</table>\n<p>Yep, that's that easy</p>\n<h2>Happy Christmas</h2>\n<p>Using Santa's elves tools, I hope you won't be stuck at work on xmas eve !\nEnjoy !</p>\n<p><a href=\"https://github.com/thinkbeforecoding/fck\">The full source is on\ngithub</a></p>\n<div class=\"tip\" id=\"fs1\">val printfn :\nformat:Printf.TextWriterFormat&lt;'T&gt; -&gt; 'T<br />\n<br />\nFull name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>\n<div class=\"tip\" id=\"fs2\">val set : elements:seq&lt;'T&gt; -&gt; Set&lt;'T&gt;\n(requires comparison)<br />\n<br />\nFull name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>\n<div class=\"tip\" id=\"fs3\">val not : value:bool -&gt; bool<br />\n<br />\nFull name: Microsoft.FSharp.Core.Operators.not</div>","","fck fake construction kit yeah christmas time again and santa elves are quite busy and when say busy don mean mean busy like this they decided build some automation productivity tools and they choose santa favorite language the job course scripting body would seriously use compiled language for automation tools requiring compilation server for this kind things usually kills motivation course possible write bash batch files but the syntax fugly once you start make more advanced tools python javascript ruby powershell are cool but you end often with scripted languages with dynamic typing which you come regret when you have maintain the long term staticaly typed language that can easily scripted type inference make feel like shorter javascript but with far higher safety writing script easy and fast test from the command line vim test fsx then write printfn quot merry christmas quot press exit now launch linux with fsharpi exec test fsx windows fsianycpu exec test fsx excellent the only problem that typing the fshapi exec this bit tedious bash batch the rescue can create bash batch script puth the path that will launch the script for linux vim test fsharpi exec test fsx chmod test one windows vim test cmd fsianycpu exec test fsx done better but now need write bash and batch script for each script fck bash batch dispatcher ftw create fck file don forget chmod that takes command usr bin env bash fck tool path fckpath readlink quot quot fck tool dir dir dirname fckpath script quot dir fck cmd fck fsx quot shell quot dir fck cmd fck quot cmd quot quot shift packages needed quot dir fck cmd packages quot then pushd quot dir fck cmd quot dev null mono quot dir fck cmd paket paket bootstrapper exe quot run restore popd dev null script command exists script then mono quot dir fck cmd packages fake tools fake exe quot quot script quot shell command exists elif shell then eval shell help else pushd quot dir fck cmd quot dev null mono quot dir fck cmd packages fake tools fake exe quot quot dir fck cmd fck help fsx quot cmd popd dev null and the batch version echo off set encoding utf set dir dp0 set cmd set script quot dir fck cmd fck cmd fsx quot set batch quot dir fck cmd fck cmd cmd quot shift set quot args quot parse quot quot neq quot quot set args args shift goto parse defined args set args args not exist quot dir fck cmd packages quot pushd quot dir fck cmd quot quot dir popd exist quot script quot quot dir fck cmd packages fake tools fake exe quot quot script quot args else exist quot batch quot pushd quot dir fck cmd quot quot batch quot cmd popd else quot dir fck cmd packages fake tools fake exe quot quot dir forget the paket part for now the bash take command argument and check whether fck cmd fck cmd fsx file exists does run also works with shell scripts name fck cmd batch scripts fck cmd cmd integrate quickly with existing tools fake for faster startups when scripts start grow big especially with things like json xml type providers load time can start raise above acceptable limits for cli using fake launch scripts takes adventage compilation cache get the best both world scriptability for quick changes and easy deployment automaticly cached jit compilation for fast startup and execution could have written all commands single fsx file and pattern maching the command name but once start have more commands the script becomes bigger and compilation longer the problem also that the pattern matching becomes friction point the source control fcklib some point have recuring code the tools can create helper scripts that will included command scripts for instance parsing the command line often useful created helper culture invariant case insensitive string comparison let string equals stringcomparison invariantcultureignorecase open system xml linq module commandline get the command line fck style let getcommandline system environment getcommandlineargs array tolist list skipwhile quot quot list tail check whether the command line starts with specified command let cmd str cmdline match cmdline with when str some none use the delimit arguments reserved for the script since fake used launch scripts can also include fakelib for all the fantastic helpers contains here sample fck cmd fck hello fsx script that can write hello uses fakelib for the tracefn function and fcklib for getcommandline you can call with once fck your path environment variable fck hello santa help tool without help just nightmare and writing help should easy the last part fck bash script lanch the fck help fsx script this script tries find fck xxx txt file and display fallbacks fck help txt for exemple the help for our fck hello command will fck hello txt usage fck hello name display friendly message name you name omitted course can the pimp the fck help fsx parse the txt help files and add codes for colors verbosity etc deployment deployment really easy can clone the git repository and add path run the commands will automatically restore packages missing and lanch the script upgrade new version call fck update defined fck update script readlink quot quot dir dirname script pushd quot dir quot dev null git pull mono quot dir paket paket bootstrapper exe quot run restore popd dev null batch fck update cmd git pull paket yep that that easy happy christmas using santa elves tools hope you won stuck work xmas eve enjoy the full source github val printfn format printf textwriterformat full name microsoft fsharp core extratopleveloperators printfn val set elements seq set requires comparison full name microsoft fsharp core extratopleveloperators set val not value bool bool full name microsoft fsharp core operators not","a:1:{s:3:\"tag\";a:2:{i:0;s:1:\"f\";i:1;s:8:\"FsAdvent\";}}","1","0","1","1","0","0","0"
